
WIIFIT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000041bc  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000058  080042cc  080042cc  000142cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004324  08004324  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  08004324  08004324  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004324  08004324  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004324  08004324  00014324  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004328  08004328  00014328  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  0800432c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000011b0  20000010  0800433c  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200011c0  0800433c  000211c0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013526  00000000  00000000  00020039  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003201  00000000  00000000  0003355f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000011c8  00000000  00000000  00036760  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001050  00000000  00000000  00037928  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019c80  00000000  00000000  00038978  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000135ab  00000000  00000000  000525f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00092a01  00000000  00000000  00065ba3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000f85a4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004880  00000000  00000000  000f85f8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000010 	.word	0x20000010
 800012c:	00000000 	.word	0x00000000
 8000130:	080042b4 	.word	0x080042b4

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000014 	.word	0x20000014
 800014c:	080042b4 	.word	0x080042b4

08000150 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000150:	b480      	push	{r7}
 8000152:	b085      	sub	sp, #20
 8000154:	af00      	add	r7, sp, #0
 8000156:	60f8      	str	r0, [r7, #12]
 8000158:	60b9      	str	r1, [r7, #8]
 800015a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 800015c:	68fb      	ldr	r3, [r7, #12]
 800015e:	4a06      	ldr	r2, [pc, #24]	; (8000178 <vApplicationGetIdleTaskMemory+0x28>)
 8000160:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000162:	68bb      	ldr	r3, [r7, #8]
 8000164:	4a05      	ldr	r2, [pc, #20]	; (800017c <vApplicationGetIdleTaskMemory+0x2c>)
 8000166:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000168:	687b      	ldr	r3, [r7, #4]
 800016a:	2280      	movs	r2, #128	; 0x80
 800016c:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800016e:	bf00      	nop
 8000170:	3714      	adds	r7, #20
 8000172:	46bd      	mov	sp, r7
 8000174:	bc80      	pop	{r7}
 8000176:	4770      	bx	lr
 8000178:	2000002c 	.word	0x2000002c
 800017c:	20000080 	.word	0x20000080

08000180 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000180:	b5b0      	push	{r4, r5, r7, lr}
 8000182:	b088      	sub	sp, #32
 8000184:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000186:	f000 fc0f 	bl	80009a8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800018a:	f000 f823 	bl	80001d4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800018e:	f000 f8bb 	bl	8000308 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000192:	f000 f865 	bl	8000260 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8000196:	f000 f88d 	bl	80002b4 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  PowerOn();
 800019a:	f002 fae5 	bl	8002768 <PowerOn>
  TurnOnPowerLED();
 800019e:	f002 fafb 	bl	8002798 <TurnOnPowerLED>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 80001a2:	4b0a      	ldr	r3, [pc, #40]	; (80001cc <main+0x4c>)
 80001a4:	1d3c      	adds	r4, r7, #4
 80001a6:	461d      	mov	r5, r3
 80001a8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80001aa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80001ac:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80001b0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80001b4:	1d3b      	adds	r3, r7, #4
 80001b6:	2100      	movs	r1, #0
 80001b8:	4618      	mov	r0, r3
 80001ba:	f002 fe84 	bl	8002ec6 <osThreadCreate>
 80001be:	4603      	mov	r3, r0
 80001c0:	4a03      	ldr	r2, [pc, #12]	; (80001d0 <main+0x50>)
 80001c2:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80001c4:	f002 fe78 	bl	8002eb8 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80001c8:	e7fe      	b.n	80001c8 <main+0x48>
 80001ca:	bf00      	nop
 80001cc:	080042d8 	.word	0x080042d8
 80001d0:	20000ff4 	.word	0x20000ff4

080001d4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80001d4:	b580      	push	{r7, lr}
 80001d6:	b090      	sub	sp, #64	; 0x40
 80001d8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80001da:	f107 0318 	add.w	r3, r7, #24
 80001de:	2228      	movs	r2, #40	; 0x28
 80001e0:	2100      	movs	r1, #0
 80001e2:	4618      	mov	r0, r3
 80001e4:	f004 f85e 	bl	80042a4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80001e8:	1d3b      	adds	r3, r7, #4
 80001ea:	2200      	movs	r2, #0
 80001ec:	601a      	str	r2, [r3, #0]
 80001ee:	605a      	str	r2, [r3, #4]
 80001f0:	609a      	str	r2, [r3, #8]
 80001f2:	60da      	str	r2, [r3, #12]
 80001f4:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80001f6:	2301      	movs	r3, #1
 80001f8:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80001fa:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80001fe:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000200:	2300      	movs	r3, #0
 8000202:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000204:	2301      	movs	r3, #1
 8000206:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000208:	2302      	movs	r3, #2
 800020a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800020c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000210:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000212:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000216:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000218:	f107 0318 	add.w	r3, r7, #24
 800021c:	4618      	mov	r0, r3
 800021e:	f000 ff17 	bl	8001050 <HAL_RCC_OscConfig>
 8000222:	4603      	mov	r3, r0
 8000224:	2b00      	cmp	r3, #0
 8000226:	d001      	beq.n	800022c <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000228:	f000 fa3e 	bl	80006a8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800022c:	230f      	movs	r3, #15
 800022e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000230:	2302      	movs	r3, #2
 8000232:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000234:	2300      	movs	r3, #0
 8000236:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000238:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800023c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800023e:	2300      	movs	r3, #0
 8000240:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000242:	1d3b      	adds	r3, r7, #4
 8000244:	2102      	movs	r1, #2
 8000246:	4618      	mov	r0, r3
 8000248:	f001 f982 	bl	8001550 <HAL_RCC_ClockConfig>
 800024c:	4603      	mov	r3, r0
 800024e:	2b00      	cmp	r3, #0
 8000250:	d001      	beq.n	8000256 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000252:	f000 fa29 	bl	80006a8 <Error_Handler>
  }
}
 8000256:	bf00      	nop
 8000258:	3740      	adds	r7, #64	; 0x40
 800025a:	46bd      	mov	sp, r7
 800025c:	bd80      	pop	{r7, pc}
	...

08000260 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000260:	b580      	push	{r7, lr}
 8000262:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000264:	4b11      	ldr	r3, [pc, #68]	; (80002ac <MX_USART1_UART_Init+0x4c>)
 8000266:	4a12      	ldr	r2, [pc, #72]	; (80002b0 <MX_USART1_UART_Init+0x50>)
 8000268:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800026a:	4b10      	ldr	r3, [pc, #64]	; (80002ac <MX_USART1_UART_Init+0x4c>)
 800026c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000270:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000272:	4b0e      	ldr	r3, [pc, #56]	; (80002ac <MX_USART1_UART_Init+0x4c>)
 8000274:	2200      	movs	r2, #0
 8000276:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000278:	4b0c      	ldr	r3, [pc, #48]	; (80002ac <MX_USART1_UART_Init+0x4c>)
 800027a:	2200      	movs	r2, #0
 800027c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800027e:	4b0b      	ldr	r3, [pc, #44]	; (80002ac <MX_USART1_UART_Init+0x4c>)
 8000280:	2200      	movs	r2, #0
 8000282:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000284:	4b09      	ldr	r3, [pc, #36]	; (80002ac <MX_USART1_UART_Init+0x4c>)
 8000286:	220c      	movs	r2, #12
 8000288:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800028a:	4b08      	ldr	r3, [pc, #32]	; (80002ac <MX_USART1_UART_Init+0x4c>)
 800028c:	2200      	movs	r2, #0
 800028e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000290:	4b06      	ldr	r3, [pc, #24]	; (80002ac <MX_USART1_UART_Init+0x4c>)
 8000292:	2200      	movs	r2, #0
 8000294:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000296:	4805      	ldr	r0, [pc, #20]	; (80002ac <MX_USART1_UART_Init+0x4c>)
 8000298:	f001 fd6e 	bl	8001d78 <HAL_UART_Init>
 800029c:	4603      	mov	r3, r0
 800029e:	2b00      	cmp	r3, #0
 80002a0:	d001      	beq.n	80002a6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80002a2:	f000 fa01 	bl	80006a8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80002a6:	bf00      	nop
 80002a8:	bd80      	pop	{r7, pc}
 80002aa:	bf00      	nop
 80002ac:	20001010 	.word	0x20001010
 80002b0:	40013800 	.word	0x40013800

080002b4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80002b4:	b580      	push	{r7, lr}
 80002b6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80002b8:	4b11      	ldr	r3, [pc, #68]	; (8000300 <MX_USART2_UART_Init+0x4c>)
 80002ba:	4a12      	ldr	r2, [pc, #72]	; (8000304 <MX_USART2_UART_Init+0x50>)
 80002bc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80002be:	4b10      	ldr	r3, [pc, #64]	; (8000300 <MX_USART2_UART_Init+0x4c>)
 80002c0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80002c4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80002c6:	4b0e      	ldr	r3, [pc, #56]	; (8000300 <MX_USART2_UART_Init+0x4c>)
 80002c8:	2200      	movs	r2, #0
 80002ca:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80002cc:	4b0c      	ldr	r3, [pc, #48]	; (8000300 <MX_USART2_UART_Init+0x4c>)
 80002ce:	2200      	movs	r2, #0
 80002d0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80002d2:	4b0b      	ldr	r3, [pc, #44]	; (8000300 <MX_USART2_UART_Init+0x4c>)
 80002d4:	2200      	movs	r2, #0
 80002d6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80002d8:	4b09      	ldr	r3, [pc, #36]	; (8000300 <MX_USART2_UART_Init+0x4c>)
 80002da:	220c      	movs	r2, #12
 80002dc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80002de:	4b08      	ldr	r3, [pc, #32]	; (8000300 <MX_USART2_UART_Init+0x4c>)
 80002e0:	2200      	movs	r2, #0
 80002e2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80002e4:	4b06      	ldr	r3, [pc, #24]	; (8000300 <MX_USART2_UART_Init+0x4c>)
 80002e6:	2200      	movs	r2, #0
 80002e8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80002ea:	4805      	ldr	r0, [pc, #20]	; (8000300 <MX_USART2_UART_Init+0x4c>)
 80002ec:	f001 fd44 	bl	8001d78 <HAL_UART_Init>
 80002f0:	4603      	mov	r3, r0
 80002f2:	2b00      	cmp	r3, #0
 80002f4:	d001      	beq.n	80002fa <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80002f6:	f000 f9d7 	bl	80006a8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80002fa:	bf00      	nop
 80002fc:	bd80      	pop	{r7, pc}
 80002fe:	bf00      	nop
 8000300:	20001094 	.word	0x20001094
 8000304:	40004400 	.word	0x40004400

08000308 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000308:	b580      	push	{r7, lr}
 800030a:	b088      	sub	sp, #32
 800030c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800030e:	f107 0310 	add.w	r3, r7, #16
 8000312:	2200      	movs	r2, #0
 8000314:	601a      	str	r2, [r3, #0]
 8000316:	605a      	str	r2, [r3, #4]
 8000318:	609a      	str	r2, [r3, #8]
 800031a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800031c:	4b27      	ldr	r3, [pc, #156]	; (80003bc <MX_GPIO_Init+0xb4>)
 800031e:	699b      	ldr	r3, [r3, #24]
 8000320:	4a26      	ldr	r2, [pc, #152]	; (80003bc <MX_GPIO_Init+0xb4>)
 8000322:	f043 0320 	orr.w	r3, r3, #32
 8000326:	6193      	str	r3, [r2, #24]
 8000328:	4b24      	ldr	r3, [pc, #144]	; (80003bc <MX_GPIO_Init+0xb4>)
 800032a:	699b      	ldr	r3, [r3, #24]
 800032c:	f003 0320 	and.w	r3, r3, #32
 8000330:	60fb      	str	r3, [r7, #12]
 8000332:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000334:	4b21      	ldr	r3, [pc, #132]	; (80003bc <MX_GPIO_Init+0xb4>)
 8000336:	699b      	ldr	r3, [r3, #24]
 8000338:	4a20      	ldr	r2, [pc, #128]	; (80003bc <MX_GPIO_Init+0xb4>)
 800033a:	f043 0304 	orr.w	r3, r3, #4
 800033e:	6193      	str	r3, [r2, #24]
 8000340:	4b1e      	ldr	r3, [pc, #120]	; (80003bc <MX_GPIO_Init+0xb4>)
 8000342:	699b      	ldr	r3, [r3, #24]
 8000344:	f003 0304 	and.w	r3, r3, #4
 8000348:	60bb      	str	r3, [r7, #8]
 800034a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800034c:	4b1b      	ldr	r3, [pc, #108]	; (80003bc <MX_GPIO_Init+0xb4>)
 800034e:	699b      	ldr	r3, [r3, #24]
 8000350:	4a1a      	ldr	r2, [pc, #104]	; (80003bc <MX_GPIO_Init+0xb4>)
 8000352:	f043 0308 	orr.w	r3, r3, #8
 8000356:	6193      	str	r3, [r2, #24]
 8000358:	4b18      	ldr	r3, [pc, #96]	; (80003bc <MX_GPIO_Init+0xb4>)
 800035a:	699b      	ldr	r3, [r3, #24]
 800035c:	f003 0308 	and.w	r3, r3, #8
 8000360:	607b      	str	r3, [r7, #4]
 8000362:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, POWER_CON_Pin|O_GPIO_Pin, GPIO_PIN_RESET);
 8000364:	2200      	movs	r2, #0
 8000366:	2130      	movs	r1, #48	; 0x30
 8000368:	4815      	ldr	r0, [pc, #84]	; (80003c0 <MX_GPIO_Init+0xb8>)
 800036a:	f000 fe40 	bl	8000fee <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SDA1_Pin|SCL1_Pin|SDA2_Pin|SCL2_Pin
 800036e:	2200      	movs	r2, #0
 8000370:	f64f 41e3 	movw	r1, #64739	; 0xfce3
 8000374:	4813      	ldr	r0, [pc, #76]	; (80003c4 <MX_GPIO_Init+0xbc>)
 8000376:	f000 fe3a 	bl	8000fee <HAL_GPIO_WritePin>
                          |SDA3_Pin|SCL3_Pin|SDA4_Pin|SCL4_Pin
                          |LED_GPIO1_Pin|LED_GPIO5_Pin|LED_GPIO3_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : POWER_CON_Pin O_GPIO_Pin */
  GPIO_InitStruct.Pin = POWER_CON_Pin|O_GPIO_Pin;
 800037a:	2330      	movs	r3, #48	; 0x30
 800037c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800037e:	2301      	movs	r3, #1
 8000380:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000382:	2300      	movs	r3, #0
 8000384:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000386:	2302      	movs	r3, #2
 8000388:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800038a:	f107 0310 	add.w	r3, r7, #16
 800038e:	4619      	mov	r1, r3
 8000390:	480b      	ldr	r0, [pc, #44]	; (80003c0 <MX_GPIO_Init+0xb8>)
 8000392:	f000 fc91 	bl	8000cb8 <HAL_GPIO_Init>

  /*Configure GPIO pins : SDA1_Pin SCL1_Pin SDA2_Pin SCL2_Pin
                           SDA3_Pin SCL3_Pin SDA4_Pin SCL4_Pin
                           LED_GPIO1_Pin LED_GPIO5_Pin LED_GPIO3_Pin */
  GPIO_InitStruct.Pin = SDA1_Pin|SCL1_Pin|SDA2_Pin|SCL2_Pin
 8000396:	f64f 43e3 	movw	r3, #64739	; 0xfce3
 800039a:	613b      	str	r3, [r7, #16]
                          |SDA3_Pin|SCL3_Pin|SDA4_Pin|SCL4_Pin
                          |LED_GPIO1_Pin|LED_GPIO5_Pin|LED_GPIO3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800039c:	2301      	movs	r3, #1
 800039e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003a0:	2300      	movs	r3, #0
 80003a2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80003a4:	2302      	movs	r3, #2
 80003a6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80003a8:	f107 0310 	add.w	r3, r7, #16
 80003ac:	4619      	mov	r1, r3
 80003ae:	4805      	ldr	r0, [pc, #20]	; (80003c4 <MX_GPIO_Init+0xbc>)
 80003b0:	f000 fc82 	bl	8000cb8 <HAL_GPIO_Init>

}
 80003b4:	bf00      	nop
 80003b6:	3720      	adds	r7, #32
 80003b8:	46bd      	mov	sp, r7
 80003ba:	bd80      	pop	{r7, pc}
 80003bc:	40021000 	.word	0x40021000
 80003c0:	40010800 	.word	0x40010800
 80003c4:	40010c00 	.word	0x40010c00

080003c8 <StartUartReceiveProc>:
static uint8_t crcTempBuf[32];
uint8_t send_buf[64];
uint8_t second_buf[32];

void StartUartReceiveProc(void)
{
 80003c8:	b580      	push	{r7, lr}
 80003ca:	af00      	add	r7, sp, #0
    HAL_UART_Receive_IT(&huart1, aRxBuffer, 1);
 80003cc:	2201      	movs	r2, #1
 80003ce:	4903      	ldr	r1, [pc, #12]	; (80003dc <StartUartReceiveProc+0x14>)
 80003d0:	4803      	ldr	r0, [pc, #12]	; (80003e0 <StartUartReceiveProc+0x18>)
 80003d2:	f001 fdb0 	bl	8001f36 <HAL_UART_Receive_IT>
}
 80003d6:	bf00      	nop
 80003d8:	bd80      	pop	{r7, pc}
 80003da:	bf00      	nop
 80003dc:	20001090 	.word	0x20001090
 80003e0:	20001010 	.word	0x20001010

080003e4 <StartSecondReceiveProc>:

void StartSecondReceiveProc(void)
{
 80003e4:	b580      	push	{r7, lr}
 80003e6:	af00      	add	r7, sp, #0
    HAL_UART_Receive_IT(&huart2, bRxBuffer, 1);
 80003e8:	2201      	movs	r2, #1
 80003ea:	4903      	ldr	r1, [pc, #12]	; (80003f8 <StartSecondReceiveProc+0x14>)
 80003ec:	4803      	ldr	r0, [pc, #12]	; (80003fc <StartSecondReceiveProc+0x18>)
 80003ee:	f001 fda2 	bl	8001f36 <HAL_UART_Receive_IT>
}
 80003f2:	bf00      	nop
 80003f4:	bd80      	pop	{r7, pc}
 80003f6:	bf00      	nop
 80003f8:	20000ff8 	.word	0x20000ff8
 80003fc:	20001094 	.word	0x20001094

08000400 <HAL_UART_RxCpltCallback>:
}

uint8_t turnoff;

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000400:	b580      	push	{r7, lr}
 8000402:	b082      	sub	sp, #8
 8000404:	af00      	add	r7, sp, #0
 8000406:	6078      	str	r0, [r7, #4]
    if (huart->Instance == USART1)
 8000408:	687b      	ldr	r3, [r7, #4]
 800040a:	681b      	ldr	r3, [r3, #0]
 800040c:	4a0f      	ldr	r2, [pc, #60]	; (800044c <HAL_UART_RxCpltCallback+0x4c>)
 800040e:	4293      	cmp	r3, r2
 8000410:	d109      	bne.n	8000426 <HAL_UART_RxCpltCallback+0x26>
    {
        //ReceiveByteFromUart1(aRxBuffer[0]);
    	if (aRxBuffer[0] == 'S') turnoff = 1;
 8000412:	4b0f      	ldr	r3, [pc, #60]	; (8000450 <HAL_UART_RxCpltCallback+0x50>)
 8000414:	781b      	ldrb	r3, [r3, #0]
 8000416:	2b53      	cmp	r3, #83	; 0x53
 8000418:	d102      	bne.n	8000420 <HAL_UART_RxCpltCallback+0x20>
 800041a:	4b0e      	ldr	r3, [pc, #56]	; (8000454 <HAL_UART_RxCpltCallback+0x54>)
 800041c:	2201      	movs	r2, #1
 800041e:	701a      	strb	r2, [r3, #0]
        StartUartReceiveProc();
 8000420:	f7ff ffd2 	bl	80003c8 <StartUartReceiveProc>
#else
        if (bRxBuffer[0] == 'S') turnoff = 1;
#endif
        StartSecondReceiveProc();
    }
}
 8000424:	e00d      	b.n	8000442 <HAL_UART_RxCpltCallback+0x42>
    else if (huart->Instance == USART2)
 8000426:	687b      	ldr	r3, [r7, #4]
 8000428:	681b      	ldr	r3, [r3, #0]
 800042a:	4a0b      	ldr	r2, [pc, #44]	; (8000458 <HAL_UART_RxCpltCallback+0x58>)
 800042c:	4293      	cmp	r3, r2
 800042e:	d108      	bne.n	8000442 <HAL_UART_RxCpltCallback+0x42>
        if (bRxBuffer[0] == 'S') turnoff = 1;
 8000430:	4b0a      	ldr	r3, [pc, #40]	; (800045c <HAL_UART_RxCpltCallback+0x5c>)
 8000432:	781b      	ldrb	r3, [r3, #0]
 8000434:	2b53      	cmp	r3, #83	; 0x53
 8000436:	d102      	bne.n	800043e <HAL_UART_RxCpltCallback+0x3e>
 8000438:	4b06      	ldr	r3, [pc, #24]	; (8000454 <HAL_UART_RxCpltCallback+0x54>)
 800043a:	2201      	movs	r2, #1
 800043c:	701a      	strb	r2, [r3, #0]
        StartSecondReceiveProc();
 800043e:	f7ff ffd1 	bl	80003e4 <StartSecondReceiveProc>
}
 8000442:	bf00      	nop
 8000444:	3708      	adds	r7, #8
 8000446:	46bd      	mov	sp, r7
 8000448:	bd80      	pop	{r7, pc}
 800044a:	bf00      	nop
 800044c:	40013800 	.word	0x40013800
 8000450:	20001090 	.word	0x20001090
 8000454:	20000ff9 	.word	0x20000ff9
 8000458:	40004400 	.word	0x40004400
 800045c:	20000ff8 	.word	0x20000ff8

08000460 <SendDataToMaster>:
{
    HAL_UART_Transmit(&huart1, pData, len, 300);
}

void SendDataToMaster(uint8_t * pData, uint16_t len)
{
 8000460:	b580      	push	{r7, lr}
 8000462:	b082      	sub	sp, #8
 8000464:	af00      	add	r7, sp, #0
 8000466:	6078      	str	r0, [r7, #4]
 8000468:	460b      	mov	r3, r1
 800046a:	807b      	strh	r3, [r7, #2]
    HAL_UART_Transmit(&huart2, pData, len, 300);
 800046c:	887a      	ldrh	r2, [r7, #2]
 800046e:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8000472:	6879      	ldr	r1, [r7, #4]
 8000474:	4803      	ldr	r0, [pc, #12]	; (8000484 <SendDataToMaster+0x24>)
 8000476:	f001 fccc 	bl	8001e12 <HAL_UART_Transmit>
}
 800047a:	bf00      	nop
 800047c:	3708      	adds	r7, #8
 800047e:	46bd      	mov	sp, r7
 8000480:	bd80      	pop	{r7, pc}
 8000482:	bf00      	nop
 8000484:	20001094 	.word	0x20001094

08000488 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000488:	b580      	push	{r7, lr}
 800048a:	b086      	sub	sp, #24
 800048c:	af00      	add	r7, sp, #0
 800048e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	int i, j, k;
	//int sleep_cnt;

	osDelay(1000);
 8000490:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000494:	f002 fd63 	bl	8002f5e <osDelay>

	turnoff = 0;
 8000498:	4b6f      	ldr	r3, [pc, #444]	; (8000658 <StartDefaultTask+0x1d0>)
 800049a:	2200      	movs	r2, #0
 800049c:	701a      	strb	r2, [r3, #0]

	uartS = 0;
 800049e:	4b6f      	ldr	r3, [pc, #444]	; (800065c <StartDefaultTask+0x1d4>)
 80004a0:	2200      	movs	r2, #0
 80004a2:	601a      	str	r2, [r3, #0]
	uartE = 0;
 80004a4:	4b6e      	ldr	r3, [pc, #440]	; (8000660 <StartDefaultTask+0x1d8>)
 80004a6:	2200      	movs	r2, #0
 80004a8:	601a      	str	r2, [r3, #0]

	TurnOnBoardLED(0);
 80004aa:	2000      	movs	r0, #0
 80004ac:	f002 f980 	bl	80027b0 <TurnOnBoardLED>
	TurnOnBoardLED(1);
 80004b0:	2001      	movs	r0, #1
 80004b2:	f002 f97d 	bl	80027b0 <TurnOnBoardLED>
	InitADS1110();
 80004b6:	f002 f895 	bl	80025e4 <InitADS1110>

	memset(second_buf, 0x00, sizeof(second_buf));
 80004ba:	2220      	movs	r2, #32
 80004bc:	2100      	movs	r1, #0
 80004be:	4869      	ldr	r0, [pc, #420]	; (8000664 <StartDefaultTask+0x1dc>)
 80004c0:	f003 fef0 	bl	80042a4 <memset>

	StartSecondReceiveProc();
 80004c4:	f7ff ff8e 	bl	80003e4 <StartSecondReceiveProc>
#ifdef BOARD_MASTER
    osThreadDef(secondCommTask, SecondCommTask, osPriorityNormal, 0, 128);
    secondCommTaskHandle = osThreadCreate(osThread(secondCommTask), NULL);
#endif

	for (k = 0; k < 10; k++)
 80004c8:	2300      	movs	r3, #0
 80004ca:	60fb      	str	r3, [r7, #12]
 80004cc:	e056      	b.n	800057c <StartDefaultTask+0xf4>
	{
		for (i = 0; i < 4; i++)
 80004ce:	2300      	movs	r3, #0
 80004d0:	617b      	str	r3, [r7, #20]
 80004d2:	e007      	b.n	80004e4 <StartDefaultTask+0x5c>
			init_val[i] = 0;
 80004d4:	4a64      	ldr	r2, [pc, #400]	; (8000668 <StartDefaultTask+0x1e0>)
 80004d6:	697b      	ldr	r3, [r7, #20]
 80004d8:	2100      	movs	r1, #0
 80004da:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		for (i = 0; i < 4; i++)
 80004de:	697b      	ldr	r3, [r7, #20]
 80004e0:	3301      	adds	r3, #1
 80004e2:	617b      	str	r3, [r7, #20]
 80004e4:	697b      	ldr	r3, [r7, #20]
 80004e6:	2b03      	cmp	r3, #3
 80004e8:	ddf4      	ble.n	80004d4 <StartDefaultTask+0x4c>

		for (j = 0; j < 10; j++)
 80004ea:	2300      	movs	r3, #0
 80004ec:	613b      	str	r3, [r7, #16]
 80004ee:	e020      	b.n	8000532 <StartDefaultTask+0xaa>
		{
			for (i = 0; i < 4; i++)
 80004f0:	2300      	movs	r3, #0
 80004f2:	617b      	str	r3, [r7, #20]
 80004f4:	e011      	b.n	800051a <StartDefaultTask+0x92>
				init_val[i] += ReadAD(i);
 80004f6:	697b      	ldr	r3, [r7, #20]
 80004f8:	b2db      	uxtb	r3, r3
 80004fa:	4618      	mov	r0, r3
 80004fc:	f002 f8e6 	bl	80026cc <ReadAD>
 8000500:	4602      	mov	r2, r0
 8000502:	4959      	ldr	r1, [pc, #356]	; (8000668 <StartDefaultTask+0x1e0>)
 8000504:	697b      	ldr	r3, [r7, #20]
 8000506:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800050a:	441a      	add	r2, r3
 800050c:	4956      	ldr	r1, [pc, #344]	; (8000668 <StartDefaultTask+0x1e0>)
 800050e:	697b      	ldr	r3, [r7, #20]
 8000510:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			for (i = 0; i < 4; i++)
 8000514:	697b      	ldr	r3, [r7, #20]
 8000516:	3301      	adds	r3, #1
 8000518:	617b      	str	r3, [r7, #20]
 800051a:	697b      	ldr	r3, [r7, #20]
 800051c:	2b03      	cmp	r3, #3
 800051e:	ddea      	ble.n	80004f6 <StartDefaultTask+0x6e>

			ToggleBoardLED(1);
 8000520:	2001      	movs	r0, #1
 8000522:	f002 f979 	bl	8002818 <ToggleBoardLED>

			osDelay(100);
 8000526:	2064      	movs	r0, #100	; 0x64
 8000528:	f002 fd19 	bl	8002f5e <osDelay>
		for (j = 0; j < 10; j++)
 800052c:	693b      	ldr	r3, [r7, #16]
 800052e:	3301      	adds	r3, #1
 8000530:	613b      	str	r3, [r7, #16]
 8000532:	693b      	ldr	r3, [r7, #16]
 8000534:	2b09      	cmp	r3, #9
 8000536:	dddb      	ble.n	80004f0 <StartDefaultTask+0x68>
		}

		if (k >= 5)
 8000538:	68fb      	ldr	r3, [r7, #12]
 800053a:	2b04      	cmp	r3, #4
 800053c:	dd1b      	ble.n	8000576 <StartDefaultTask+0xee>
		{
			for (i = 0; i < 4; i++)
 800053e:	2300      	movs	r3, #0
 8000540:	617b      	str	r3, [r7, #20]
 8000542:	e015      	b.n	8000570 <StartDefaultTask+0xe8>
				avg_val[i] += init_val[i] / 10;
 8000544:	4a49      	ldr	r2, [pc, #292]	; (800066c <StartDefaultTask+0x1e4>)
 8000546:	697b      	ldr	r3, [r7, #20]
 8000548:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800054c:	4946      	ldr	r1, [pc, #280]	; (8000668 <StartDefaultTask+0x1e0>)
 800054e:	697b      	ldr	r3, [r7, #20]
 8000550:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000554:	4946      	ldr	r1, [pc, #280]	; (8000670 <StartDefaultTask+0x1e8>)
 8000556:	fb81 0103 	smull	r0, r1, r1, r3
 800055a:	1089      	asrs	r1, r1, #2
 800055c:	17db      	asrs	r3, r3, #31
 800055e:	1acb      	subs	r3, r1, r3
 8000560:	441a      	add	r2, r3
 8000562:	4942      	ldr	r1, [pc, #264]	; (800066c <StartDefaultTask+0x1e4>)
 8000564:	697b      	ldr	r3, [r7, #20]
 8000566:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			for (i = 0; i < 4; i++)
 800056a:	697b      	ldr	r3, [r7, #20]
 800056c:	3301      	adds	r3, #1
 800056e:	617b      	str	r3, [r7, #20]
 8000570:	697b      	ldr	r3, [r7, #20]
 8000572:	2b03      	cmp	r3, #3
 8000574:	dde6      	ble.n	8000544 <StartDefaultTask+0xbc>
	for (k = 0; k < 10; k++)
 8000576:	68fb      	ldr	r3, [r7, #12]
 8000578:	3301      	adds	r3, #1
 800057a:	60fb      	str	r3, [r7, #12]
 800057c:	68fb      	ldr	r3, [r7, #12]
 800057e:	2b09      	cmp	r3, #9
 8000580:	dda5      	ble.n	80004ce <StartDefaultTask+0x46>
		}
	}

	for (i = 0; i < 4; i++)
 8000582:	2300      	movs	r3, #0
 8000584:	617b      	str	r3, [r7, #20]
 8000586:	e010      	b.n	80005aa <StartDefaultTask+0x122>
		avg_val[i] /= 5;
 8000588:	4a38      	ldr	r2, [pc, #224]	; (800066c <StartDefaultTask+0x1e4>)
 800058a:	697b      	ldr	r3, [r7, #20]
 800058c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000590:	4a37      	ldr	r2, [pc, #220]	; (8000670 <StartDefaultTask+0x1e8>)
 8000592:	fb82 1203 	smull	r1, r2, r2, r3
 8000596:	1052      	asrs	r2, r2, #1
 8000598:	17db      	asrs	r3, r3, #31
 800059a:	1ad2      	subs	r2, r2, r3
 800059c:	4933      	ldr	r1, [pc, #204]	; (800066c <StartDefaultTask+0x1e4>)
 800059e:	697b      	ldr	r3, [r7, #20]
 80005a0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for (i = 0; i < 4; i++)
 80005a4:	697b      	ldr	r3, [r7, #20]
 80005a6:	3301      	adds	r3, #1
 80005a8:	617b      	str	r3, [r7, #20]
 80005aa:	697b      	ldr	r3, [r7, #20]
 80005ac:	2b03      	cmp	r3, #3
 80005ae:	ddeb      	ble.n	8000588 <StartDefaultTask+0x100>

	TurnOffBoardLED(1);
 80005b0:	2001      	movs	r0, #1
 80005b2:	f002 f917 	bl	80027e4 <TurnOffBoardLED>

	StartUartReceiveProc();
 80005b6:	f7ff ff07 	bl	80003c8 <StartUartReceiveProc>

	for (i = 0; i < 4; i++)
 80005ba:	2300      	movs	r3, #0
 80005bc:	617b      	str	r3, [r7, #20]
 80005be:	e010      	b.n	80005e2 <StartDefaultTask+0x15a>
		sig[i] = (avg_val[i] >= 0 ? 1 : -1);
 80005c0:	4a2a      	ldr	r2, [pc, #168]	; (800066c <StartDefaultTask+0x1e4>)
 80005c2:	697b      	ldr	r3, [r7, #20]
 80005c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80005c8:	2b00      	cmp	r3, #0
 80005ca:	db01      	blt.n	80005d0 <StartDefaultTask+0x148>
 80005cc:	2201      	movs	r2, #1
 80005ce:	e001      	b.n	80005d4 <StartDefaultTask+0x14c>
 80005d0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80005d4:	4927      	ldr	r1, [pc, #156]	; (8000674 <StartDefaultTask+0x1ec>)
 80005d6:	697b      	ldr	r3, [r7, #20]
 80005d8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for (i = 0; i < 4; i++)
 80005dc:	697b      	ldr	r3, [r7, #20]
 80005de:	3301      	adds	r3, #1
 80005e0:	617b      	str	r3, [r7, #20]
 80005e2:	697b      	ldr	r3, [r7, #20]
 80005e4:	2b03      	cmp	r3, #3
 80005e6:	ddeb      	ble.n	80005c0 <StartDefaultTask+0x138>

  /* Infinite loop */
	for(;;)
	{
		for (i = 0; i < 4; i++)
 80005e8:	2300      	movs	r3, #0
 80005ea:	617b      	str	r3, [r7, #20]
 80005ec:	e013      	b.n	8000616 <StartDefaultTask+0x18e>
		{
			//if (sig[i] == 1)
			//	val[i] = myabs(ReadAD(i) - avg_val[i]);
			//else
			//	val[i] = myabs(avg_val[i] - ReadAD(i));
			val[i] = ReadAD(i) - avg_val[i] + 100;
 80005ee:	697b      	ldr	r3, [r7, #20]
 80005f0:	b2db      	uxtb	r3, r3
 80005f2:	4618      	mov	r0, r3
 80005f4:	f002 f86a 	bl	80026cc <ReadAD>
 80005f8:	4602      	mov	r2, r0
 80005fa:	491c      	ldr	r1, [pc, #112]	; (800066c <StartDefaultTask+0x1e4>)
 80005fc:	697b      	ldr	r3, [r7, #20]
 80005fe:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000602:	1ad3      	subs	r3, r2, r3
 8000604:	f103 0264 	add.w	r2, r3, #100	; 0x64
 8000608:	491b      	ldr	r1, [pc, #108]	; (8000678 <StartDefaultTask+0x1f0>)
 800060a:	697b      	ldr	r3, [r7, #20]
 800060c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		for (i = 0; i < 4; i++)
 8000610:	697b      	ldr	r3, [r7, #20]
 8000612:	3301      	adds	r3, #1
 8000614:	617b      	str	r3, [r7, #20]
 8000616:	697b      	ldr	r3, [r7, #20]
 8000618:	2b03      	cmp	r3, #3
 800061a:	dde8      	ble.n	80005ee <StartDefaultTask+0x166>
		}

		ToggleBoardLED(0);
 800061c:	2000      	movs	r0, #0
 800061e:	f002 f8fb 	bl	8002818 <ToggleBoardLED>
			osDelay(1000);
			PowerOff();
			osDelay(1000);
		}
#else
		send_buf[0] = 0xAA;
 8000622:	4b16      	ldr	r3, [pc, #88]	; (800067c <StartDefaultTask+0x1f4>)
 8000624:	22aa      	movs	r2, #170	; 0xaa
 8000626:	701a      	strb	r2, [r3, #0]
		send_buf[1] = 0x55;
 8000628:	4b14      	ldr	r3, [pc, #80]	; (800067c <StartDefaultTask+0x1f4>)
 800062a:	2255      	movs	r2, #85	; 0x55
 800062c:	705a      	strb	r2, [r3, #1]
		memcpy(&send_buf[2], val, sizeof(int32_t) * 4);
 800062e:	2210      	movs	r2, #16
 8000630:	4911      	ldr	r1, [pc, #68]	; (8000678 <StartDefaultTask+0x1f0>)
 8000632:	4813      	ldr	r0, [pc, #76]	; (8000680 <StartDefaultTask+0x1f8>)
 8000634:	f003 fe28 	bl	8004288 <memcpy>
		SendDataToMaster(send_buf, sizeof(int32_t) * 4 + 2);
 8000638:	2112      	movs	r1, #18
 800063a:	4810      	ldr	r0, [pc, #64]	; (800067c <StartDefaultTask+0x1f4>)
 800063c:	f7ff ff10 	bl	8000460 <SendDataToMaster>
		if (turnoff == 1)
 8000640:	4b05      	ldr	r3, [pc, #20]	; (8000658 <StartDefaultTask+0x1d0>)
 8000642:	781b      	ldrb	r3, [r3, #0]
 8000644:	2b01      	cmp	r3, #1
 8000646:	d1cf      	bne.n	80005e8 <StartDefaultTask+0x160>
		{
			PowerOff();
 8000648:	f002 f89a 	bl	8002780 <PowerOff>
			osDelay(1000);
 800064c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000650:	f002 fc85 	bl	8002f5e <osDelay>
		for (i = 0; i < 4; i++)
 8000654:	e7c8      	b.n	80005e8 <StartDefaultTask+0x160>
 8000656:	bf00      	nop
 8000658:	20000ff9 	.word	0x20000ff9
 800065c:	20000280 	.word	0x20000280
 8000660:	20000284 	.word	0x20000284
 8000664:	20001050 	.word	0x20001050
 8000668:	20000288 	.word	0x20000288
 800066c:	20000298 	.word	0x20000298
 8000670:	66666667 	.word	0x66666667
 8000674:	20001114 	.word	0x20001114
 8000678:	20001000 	.word	0x20001000
 800067c:	200010d4 	.word	0x200010d4
 8000680:	200010d6 	.word	0x200010d6

08000684 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000684:	b580      	push	{r7, lr}
 8000686:	b082      	sub	sp, #8
 8000688:	af00      	add	r7, sp, #0
 800068a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 800068c:	687b      	ldr	r3, [r7, #4]
 800068e:	681b      	ldr	r3, [r3, #0]
 8000690:	4a04      	ldr	r2, [pc, #16]	; (80006a4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000692:	4293      	cmp	r3, r2
 8000694:	d101      	bne.n	800069a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000696:	f000 f99d 	bl	80009d4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800069a:	bf00      	nop
 800069c:	3708      	adds	r7, #8
 800069e:	46bd      	mov	sp, r7
 80006a0:	bd80      	pop	{r7, pc}
 80006a2:	bf00      	nop
 80006a4:	40012c00 	.word	0x40012c00

080006a8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80006a8:	b480      	push	{r7}
 80006aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80006ac:	bf00      	nop
 80006ae:	46bd      	mov	sp, r7
 80006b0:	bc80      	pop	{r7}
 80006b2:	4770      	bx	lr

080006b4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80006b4:	b480      	push	{r7}
 80006b6:	b085      	sub	sp, #20
 80006b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80006ba:	4b13      	ldr	r3, [pc, #76]	; (8000708 <HAL_MspInit+0x54>)
 80006bc:	699b      	ldr	r3, [r3, #24]
 80006be:	4a12      	ldr	r2, [pc, #72]	; (8000708 <HAL_MspInit+0x54>)
 80006c0:	f043 0301 	orr.w	r3, r3, #1
 80006c4:	6193      	str	r3, [r2, #24]
 80006c6:	4b10      	ldr	r3, [pc, #64]	; (8000708 <HAL_MspInit+0x54>)
 80006c8:	699b      	ldr	r3, [r3, #24]
 80006ca:	f003 0301 	and.w	r3, r3, #1
 80006ce:	60bb      	str	r3, [r7, #8]
 80006d0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80006d2:	4b0d      	ldr	r3, [pc, #52]	; (8000708 <HAL_MspInit+0x54>)
 80006d4:	69db      	ldr	r3, [r3, #28]
 80006d6:	4a0c      	ldr	r2, [pc, #48]	; (8000708 <HAL_MspInit+0x54>)
 80006d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006dc:	61d3      	str	r3, [r2, #28]
 80006de:	4b0a      	ldr	r3, [pc, #40]	; (8000708 <HAL_MspInit+0x54>)
 80006e0:	69db      	ldr	r3, [r3, #28]
 80006e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006e6:	607b      	str	r3, [r7, #4]
 80006e8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** ENABLE: Full SWJ (JTAG-DP + SW-DP): Reset State
  */
  __HAL_AFIO_REMAP_SWJ_ENABLE();
 80006ea:	4b08      	ldr	r3, [pc, #32]	; (800070c <HAL_MspInit+0x58>)
 80006ec:	685b      	ldr	r3, [r3, #4]
 80006ee:	60fb      	str	r3, [r7, #12]
 80006f0:	68fb      	ldr	r3, [r7, #12]
 80006f2:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80006f6:	60fb      	str	r3, [r7, #12]
 80006f8:	4a04      	ldr	r2, [pc, #16]	; (800070c <HAL_MspInit+0x58>)
 80006fa:	68fb      	ldr	r3, [r7, #12]
 80006fc:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80006fe:	bf00      	nop
 8000700:	3714      	adds	r7, #20
 8000702:	46bd      	mov	sp, r7
 8000704:	bc80      	pop	{r7}
 8000706:	4770      	bx	lr
 8000708:	40021000 	.word	0x40021000
 800070c:	40010000 	.word	0x40010000

08000710 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000710:	b580      	push	{r7, lr}
 8000712:	b08a      	sub	sp, #40	; 0x28
 8000714:	af00      	add	r7, sp, #0
 8000716:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000718:	f107 0318 	add.w	r3, r7, #24
 800071c:	2200      	movs	r2, #0
 800071e:	601a      	str	r2, [r3, #0]
 8000720:	605a      	str	r2, [r3, #4]
 8000722:	609a      	str	r2, [r3, #8]
 8000724:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8000726:	687b      	ldr	r3, [r7, #4]
 8000728:	681b      	ldr	r3, [r3, #0]
 800072a:	4a3f      	ldr	r2, [pc, #252]	; (8000828 <HAL_UART_MspInit+0x118>)
 800072c:	4293      	cmp	r3, r2
 800072e:	d13a      	bne.n	80007a6 <HAL_UART_MspInit+0x96>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000730:	4b3e      	ldr	r3, [pc, #248]	; (800082c <HAL_UART_MspInit+0x11c>)
 8000732:	699b      	ldr	r3, [r3, #24]
 8000734:	4a3d      	ldr	r2, [pc, #244]	; (800082c <HAL_UART_MspInit+0x11c>)
 8000736:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800073a:	6193      	str	r3, [r2, #24]
 800073c:	4b3b      	ldr	r3, [pc, #236]	; (800082c <HAL_UART_MspInit+0x11c>)
 800073e:	699b      	ldr	r3, [r3, #24]
 8000740:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000744:	617b      	str	r3, [r7, #20]
 8000746:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000748:	4b38      	ldr	r3, [pc, #224]	; (800082c <HAL_UART_MspInit+0x11c>)
 800074a:	699b      	ldr	r3, [r3, #24]
 800074c:	4a37      	ldr	r2, [pc, #220]	; (800082c <HAL_UART_MspInit+0x11c>)
 800074e:	f043 0304 	orr.w	r3, r3, #4
 8000752:	6193      	str	r3, [r2, #24]
 8000754:	4b35      	ldr	r3, [pc, #212]	; (800082c <HAL_UART_MspInit+0x11c>)
 8000756:	699b      	ldr	r3, [r3, #24]
 8000758:	f003 0304 	and.w	r3, r3, #4
 800075c:	613b      	str	r3, [r7, #16]
 800075e:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000760:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000764:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000766:	2302      	movs	r3, #2
 8000768:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800076a:	2303      	movs	r3, #3
 800076c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800076e:	f107 0318 	add.w	r3, r7, #24
 8000772:	4619      	mov	r1, r3
 8000774:	482e      	ldr	r0, [pc, #184]	; (8000830 <HAL_UART_MspInit+0x120>)
 8000776:	f000 fa9f 	bl	8000cb8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800077a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800077e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000780:	2300      	movs	r3, #0
 8000782:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000784:	2300      	movs	r3, #0
 8000786:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000788:	f107 0318 	add.w	r3, r7, #24
 800078c:	4619      	mov	r1, r3
 800078e:	4828      	ldr	r0, [pc, #160]	; (8000830 <HAL_UART_MspInit+0x120>)
 8000790:	f000 fa92 	bl	8000cb8 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000794:	2200      	movs	r2, #0
 8000796:	2100      	movs	r1, #0
 8000798:	2025      	movs	r0, #37	; 0x25
 800079a:	f000 f9ec 	bl	8000b76 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800079e:	2025      	movs	r0, #37	; 0x25
 80007a0:	f000 fa05 	bl	8000bae <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80007a4:	e03c      	b.n	8000820 <HAL_UART_MspInit+0x110>
  else if(huart->Instance==USART2)
 80007a6:	687b      	ldr	r3, [r7, #4]
 80007a8:	681b      	ldr	r3, [r3, #0]
 80007aa:	4a22      	ldr	r2, [pc, #136]	; (8000834 <HAL_UART_MspInit+0x124>)
 80007ac:	4293      	cmp	r3, r2
 80007ae:	d137      	bne.n	8000820 <HAL_UART_MspInit+0x110>
    __HAL_RCC_USART2_CLK_ENABLE();
 80007b0:	4b1e      	ldr	r3, [pc, #120]	; (800082c <HAL_UART_MspInit+0x11c>)
 80007b2:	69db      	ldr	r3, [r3, #28]
 80007b4:	4a1d      	ldr	r2, [pc, #116]	; (800082c <HAL_UART_MspInit+0x11c>)
 80007b6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80007ba:	61d3      	str	r3, [r2, #28]
 80007bc:	4b1b      	ldr	r3, [pc, #108]	; (800082c <HAL_UART_MspInit+0x11c>)
 80007be:	69db      	ldr	r3, [r3, #28]
 80007c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80007c4:	60fb      	str	r3, [r7, #12]
 80007c6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80007c8:	4b18      	ldr	r3, [pc, #96]	; (800082c <HAL_UART_MspInit+0x11c>)
 80007ca:	699b      	ldr	r3, [r3, #24]
 80007cc:	4a17      	ldr	r2, [pc, #92]	; (800082c <HAL_UART_MspInit+0x11c>)
 80007ce:	f043 0304 	orr.w	r3, r3, #4
 80007d2:	6193      	str	r3, [r2, #24]
 80007d4:	4b15      	ldr	r3, [pc, #84]	; (800082c <HAL_UART_MspInit+0x11c>)
 80007d6:	699b      	ldr	r3, [r3, #24]
 80007d8:	f003 0304 	and.w	r3, r3, #4
 80007dc:	60bb      	str	r3, [r7, #8]
 80007de:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80007e0:	2304      	movs	r3, #4
 80007e2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007e4:	2302      	movs	r3, #2
 80007e6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80007e8:	2303      	movs	r3, #3
 80007ea:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007ec:	f107 0318 	add.w	r3, r7, #24
 80007f0:	4619      	mov	r1, r3
 80007f2:	480f      	ldr	r0, [pc, #60]	; (8000830 <HAL_UART_MspInit+0x120>)
 80007f4:	f000 fa60 	bl	8000cb8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80007f8:	2308      	movs	r3, #8
 80007fa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007fc:	2300      	movs	r3, #0
 80007fe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000800:	2300      	movs	r3, #0
 8000802:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000804:	f107 0318 	add.w	r3, r7, #24
 8000808:	4619      	mov	r1, r3
 800080a:	4809      	ldr	r0, [pc, #36]	; (8000830 <HAL_UART_MspInit+0x120>)
 800080c:	f000 fa54 	bl	8000cb8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000810:	2200      	movs	r2, #0
 8000812:	2100      	movs	r1, #0
 8000814:	2026      	movs	r0, #38	; 0x26
 8000816:	f000 f9ae 	bl	8000b76 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800081a:	2026      	movs	r0, #38	; 0x26
 800081c:	f000 f9c7 	bl	8000bae <HAL_NVIC_EnableIRQ>
}
 8000820:	bf00      	nop
 8000822:	3728      	adds	r7, #40	; 0x28
 8000824:	46bd      	mov	sp, r7
 8000826:	bd80      	pop	{r7, pc}
 8000828:	40013800 	.word	0x40013800
 800082c:	40021000 	.word	0x40021000
 8000830:	40010800 	.word	0x40010800
 8000834:	40004400 	.word	0x40004400

08000838 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000838:	b580      	push	{r7, lr}
 800083a:	b08c      	sub	sp, #48	; 0x30
 800083c:	af00      	add	r7, sp, #0
 800083e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000840:	2300      	movs	r3, #0
 8000842:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000844:	2300      	movs	r3, #0
 8000846:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority ,0);
 8000848:	2200      	movs	r2, #0
 800084a:	6879      	ldr	r1, [r7, #4]
 800084c:	2019      	movs	r0, #25
 800084e:	f000 f992 	bl	8000b76 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8000852:	2019      	movs	r0, #25
 8000854:	f000 f9ab 	bl	8000bae <HAL_NVIC_EnableIRQ>
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000858:	4b1e      	ldr	r3, [pc, #120]	; (80008d4 <HAL_InitTick+0x9c>)
 800085a:	699b      	ldr	r3, [r3, #24]
 800085c:	4a1d      	ldr	r2, [pc, #116]	; (80008d4 <HAL_InitTick+0x9c>)
 800085e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000862:	6193      	str	r3, [r2, #24]
 8000864:	4b1b      	ldr	r3, [pc, #108]	; (80008d4 <HAL_InitTick+0x9c>)
 8000866:	699b      	ldr	r3, [r3, #24]
 8000868:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800086c:	60fb      	str	r3, [r7, #12]
 800086e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000870:	f107 0210 	add.w	r2, r7, #16
 8000874:	f107 0314 	add.w	r3, r7, #20
 8000878:	4611      	mov	r1, r2
 800087a:	4618      	mov	r0, r3
 800087c:	f000 ffe4 	bl	8001848 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000880:	f000 ffce 	bl	8001820 <HAL_RCC_GetPCLK2Freq>
 8000884:	62f8      	str	r0, [r7, #44]	; 0x2c

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8000886:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000888:	4a13      	ldr	r2, [pc, #76]	; (80008d8 <HAL_InitTick+0xa0>)
 800088a:	fba2 2303 	umull	r2, r3, r2, r3
 800088e:	0c9b      	lsrs	r3, r3, #18
 8000890:	3b01      	subs	r3, #1
 8000892:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000894:	4b11      	ldr	r3, [pc, #68]	; (80008dc <HAL_InitTick+0xa4>)
 8000896:	4a12      	ldr	r2, [pc, #72]	; (80008e0 <HAL_InitTick+0xa8>)
 8000898:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000 / 1000) - 1;
 800089a:	4b10      	ldr	r3, [pc, #64]	; (80008dc <HAL_InitTick+0xa4>)
 800089c:	f240 32e7 	movw	r2, #999	; 0x3e7
 80008a0:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 80008a2:	4a0e      	ldr	r2, [pc, #56]	; (80008dc <HAL_InitTick+0xa4>)
 80008a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80008a6:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 80008a8:	4b0c      	ldr	r3, [pc, #48]	; (80008dc <HAL_InitTick+0xa4>)
 80008aa:	2200      	movs	r2, #0
 80008ac:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008ae:	4b0b      	ldr	r3, [pc, #44]	; (80008dc <HAL_InitTick+0xa4>)
 80008b0:	2200      	movs	r2, #0
 80008b2:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 80008b4:	4809      	ldr	r0, [pc, #36]	; (80008dc <HAL_InitTick+0xa4>)
 80008b6:	f001 f815 	bl	80018e4 <HAL_TIM_Base_Init>
 80008ba:	4603      	mov	r3, r0
 80008bc:	2b00      	cmp	r3, #0
 80008be:	d104      	bne.n	80008ca <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 80008c0:	4806      	ldr	r0, [pc, #24]	; (80008dc <HAL_InitTick+0xa4>)
 80008c2:	f001 f867 	bl	8001994 <HAL_TIM_Base_Start_IT>
 80008c6:	4603      	mov	r3, r0
 80008c8:	e000      	b.n	80008cc <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 80008ca:	2301      	movs	r3, #1
}
 80008cc:	4618      	mov	r0, r3
 80008ce:	3730      	adds	r7, #48	; 0x30
 80008d0:	46bd      	mov	sp, r7
 80008d2:	bd80      	pop	{r7, pc}
 80008d4:	40021000 	.word	0x40021000
 80008d8:	431bde83 	.word	0x431bde83
 80008dc:	20001124 	.word	0x20001124
 80008e0:	40012c00 	.word	0x40012c00

080008e4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80008e4:	b480      	push	{r7}
 80008e6:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80008e8:	bf00      	nop
 80008ea:	46bd      	mov	sp, r7
 80008ec:	bc80      	pop	{r7}
 80008ee:	4770      	bx	lr

080008f0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008f0:	b480      	push	{r7}
 80008f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008f4:	e7fe      	b.n	80008f4 <HardFault_Handler+0x4>

080008f6 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80008f6:	b480      	push	{r7}
 80008f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80008fa:	e7fe      	b.n	80008fa <MemManage_Handler+0x4>

080008fc <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80008fc:	b480      	push	{r7}
 80008fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000900:	e7fe      	b.n	8000900 <BusFault_Handler+0x4>

08000902 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000902:	b480      	push	{r7}
 8000904:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000906:	e7fe      	b.n	8000906 <UsageFault_Handler+0x4>

08000908 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000908:	b480      	push	{r7}
 800090a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800090c:	bf00      	nop
 800090e:	46bd      	mov	sp, r7
 8000910:	bc80      	pop	{r7}
 8000912:	4770      	bx	lr

08000914 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8000914:	b580      	push	{r7, lr}
 8000916:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000918:	4802      	ldr	r0, [pc, #8]	; (8000924 <TIM1_UP_IRQHandler+0x10>)
 800091a:	f001 f88d 	bl	8001a38 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 800091e:	bf00      	nop
 8000920:	bd80      	pop	{r7, pc}
 8000922:	bf00      	nop
 8000924:	20001124 	.word	0x20001124

08000928 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000928:	b580      	push	{r7, lr}
 800092a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800092c:	4802      	ldr	r0, [pc, #8]	; (8000938 <USART1_IRQHandler+0x10>)
 800092e:	f001 fb57 	bl	8001fe0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000932:	bf00      	nop
 8000934:	bd80      	pop	{r7, pc}
 8000936:	bf00      	nop
 8000938:	20001010 	.word	0x20001010

0800093c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 800093c:	b580      	push	{r7, lr}
 800093e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000940:	4802      	ldr	r0, [pc, #8]	; (800094c <USART2_IRQHandler+0x10>)
 8000942:	f001 fb4d 	bl	8001fe0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000946:	bf00      	nop
 8000948:	bd80      	pop	{r7, pc}
 800094a:	bf00      	nop
 800094c:	20001094 	.word	0x20001094

08000950 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000950:	b480      	push	{r7}
 8000952:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000954:	bf00      	nop
 8000956:	46bd      	mov	sp, r7
 8000958:	bc80      	pop	{r7}
 800095a:	4770      	bx	lr

0800095c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 800095c:	2100      	movs	r1, #0
  b LoopCopyDataInit
 800095e:	e003      	b.n	8000968 <LoopCopyDataInit>

08000960 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8000960:	4b0b      	ldr	r3, [pc, #44]	; (8000990 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8000962:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8000964:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8000966:	3104      	adds	r1, #4

08000968 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8000968:	480a      	ldr	r0, [pc, #40]	; (8000994 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 800096a:	4b0b      	ldr	r3, [pc, #44]	; (8000998 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 800096c:	1842      	adds	r2, r0, r1
  cmp r2, r3
 800096e:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8000970:	d3f6      	bcc.n	8000960 <CopyDataInit>
  ldr r2, =_sbss
 8000972:	4a0a      	ldr	r2, [pc, #40]	; (800099c <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8000974:	e002      	b.n	800097c <LoopFillZerobss>

08000976 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8000976:	2300      	movs	r3, #0
  str r3, [r2], #4
 8000978:	f842 3b04 	str.w	r3, [r2], #4

0800097c <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 800097c:	4b08      	ldr	r3, [pc, #32]	; (80009a0 <LoopFillZerobss+0x24>)
  cmp r2, r3
 800097e:	429a      	cmp	r2, r3
  bcc FillZerobss
 8000980:	d3f9      	bcc.n	8000976 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000982:	f7ff ffe5 	bl	8000950 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000986:	f003 fc5b 	bl	8004240 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800098a:	f7ff fbf9 	bl	8000180 <main>
  bx lr
 800098e:	4770      	bx	lr
  ldr r3, =_sidata
 8000990:	0800432c 	.word	0x0800432c
  ldr r0, =_sdata
 8000994:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8000998:	20000010 	.word	0x20000010
  ldr r2, =_sbss
 800099c:	20000010 	.word	0x20000010
  ldr r3, = _ebss
 80009a0:	200011c0 	.word	0x200011c0

080009a4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80009a4:	e7fe      	b.n	80009a4 <ADC1_2_IRQHandler>
	...

080009a8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80009a8:	b580      	push	{r7, lr}
 80009aa:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80009ac:	4b08      	ldr	r3, [pc, #32]	; (80009d0 <HAL_Init+0x28>)
 80009ae:	681b      	ldr	r3, [r3, #0]
 80009b0:	4a07      	ldr	r2, [pc, #28]	; (80009d0 <HAL_Init+0x28>)
 80009b2:	f043 0310 	orr.w	r3, r3, #16
 80009b6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80009b8:	2003      	movs	r0, #3
 80009ba:	f000 f8d1 	bl	8000b60 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80009be:	2000      	movs	r0, #0
 80009c0:	f7ff ff3a 	bl	8000838 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80009c4:	f7ff fe76 	bl	80006b4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80009c8:	2300      	movs	r3, #0
}
 80009ca:	4618      	mov	r0, r3
 80009cc:	bd80      	pop	{r7, pc}
 80009ce:	bf00      	nop
 80009d0:	40022000 	.word	0x40022000

080009d4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80009d4:	b480      	push	{r7}
 80009d6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80009d8:	4b05      	ldr	r3, [pc, #20]	; (80009f0 <HAL_IncTick+0x1c>)
 80009da:	781b      	ldrb	r3, [r3, #0]
 80009dc:	461a      	mov	r2, r3
 80009de:	4b05      	ldr	r3, [pc, #20]	; (80009f4 <HAL_IncTick+0x20>)
 80009e0:	681b      	ldr	r3, [r3, #0]
 80009e2:	4413      	add	r3, r2
 80009e4:	4a03      	ldr	r2, [pc, #12]	; (80009f4 <HAL_IncTick+0x20>)
 80009e6:	6013      	str	r3, [r2, #0]
}
 80009e8:	bf00      	nop
 80009ea:	46bd      	mov	sp, r7
 80009ec:	bc80      	pop	{r7}
 80009ee:	4770      	bx	lr
 80009f0:	20000008 	.word	0x20000008
 80009f4:	2000116c 	.word	0x2000116c

080009f8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80009f8:	b480      	push	{r7}
 80009fa:	af00      	add	r7, sp, #0
  return uwTick;
 80009fc:	4b02      	ldr	r3, [pc, #8]	; (8000a08 <HAL_GetTick+0x10>)
 80009fe:	681b      	ldr	r3, [r3, #0]
}
 8000a00:	4618      	mov	r0, r3
 8000a02:	46bd      	mov	sp, r7
 8000a04:	bc80      	pop	{r7}
 8000a06:	4770      	bx	lr
 8000a08:	2000116c 	.word	0x2000116c

08000a0c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a0c:	b480      	push	{r7}
 8000a0e:	b085      	sub	sp, #20
 8000a10:	af00      	add	r7, sp, #0
 8000a12:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	f003 0307 	and.w	r3, r3, #7
 8000a1a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a1c:	4b0c      	ldr	r3, [pc, #48]	; (8000a50 <__NVIC_SetPriorityGrouping+0x44>)
 8000a1e:	68db      	ldr	r3, [r3, #12]
 8000a20:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000a22:	68ba      	ldr	r2, [r7, #8]
 8000a24:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000a28:	4013      	ands	r3, r2
 8000a2a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000a2c:	68fb      	ldr	r3, [r7, #12]
 8000a2e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000a30:	68bb      	ldr	r3, [r7, #8]
 8000a32:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000a34:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000a38:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a3c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000a3e:	4a04      	ldr	r2, [pc, #16]	; (8000a50 <__NVIC_SetPriorityGrouping+0x44>)
 8000a40:	68bb      	ldr	r3, [r7, #8]
 8000a42:	60d3      	str	r3, [r2, #12]
}
 8000a44:	bf00      	nop
 8000a46:	3714      	adds	r7, #20
 8000a48:	46bd      	mov	sp, r7
 8000a4a:	bc80      	pop	{r7}
 8000a4c:	4770      	bx	lr
 8000a4e:	bf00      	nop
 8000a50:	e000ed00 	.word	0xe000ed00

08000a54 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000a54:	b480      	push	{r7}
 8000a56:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000a58:	4b04      	ldr	r3, [pc, #16]	; (8000a6c <__NVIC_GetPriorityGrouping+0x18>)
 8000a5a:	68db      	ldr	r3, [r3, #12]
 8000a5c:	0a1b      	lsrs	r3, r3, #8
 8000a5e:	f003 0307 	and.w	r3, r3, #7
}
 8000a62:	4618      	mov	r0, r3
 8000a64:	46bd      	mov	sp, r7
 8000a66:	bc80      	pop	{r7}
 8000a68:	4770      	bx	lr
 8000a6a:	bf00      	nop
 8000a6c:	e000ed00 	.word	0xe000ed00

08000a70 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a70:	b480      	push	{r7}
 8000a72:	b083      	sub	sp, #12
 8000a74:	af00      	add	r7, sp, #0
 8000a76:	4603      	mov	r3, r0
 8000a78:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a7e:	2b00      	cmp	r3, #0
 8000a80:	db0b      	blt.n	8000a9a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000a82:	79fb      	ldrb	r3, [r7, #7]
 8000a84:	f003 021f 	and.w	r2, r3, #31
 8000a88:	4906      	ldr	r1, [pc, #24]	; (8000aa4 <__NVIC_EnableIRQ+0x34>)
 8000a8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a8e:	095b      	lsrs	r3, r3, #5
 8000a90:	2001      	movs	r0, #1
 8000a92:	fa00 f202 	lsl.w	r2, r0, r2
 8000a96:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000a9a:	bf00      	nop
 8000a9c:	370c      	adds	r7, #12
 8000a9e:	46bd      	mov	sp, r7
 8000aa0:	bc80      	pop	{r7}
 8000aa2:	4770      	bx	lr
 8000aa4:	e000e100 	.word	0xe000e100

08000aa8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000aa8:	b480      	push	{r7}
 8000aaa:	b083      	sub	sp, #12
 8000aac:	af00      	add	r7, sp, #0
 8000aae:	4603      	mov	r3, r0
 8000ab0:	6039      	str	r1, [r7, #0]
 8000ab2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ab4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ab8:	2b00      	cmp	r3, #0
 8000aba:	db0a      	blt.n	8000ad2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000abc:	683b      	ldr	r3, [r7, #0]
 8000abe:	b2da      	uxtb	r2, r3
 8000ac0:	490c      	ldr	r1, [pc, #48]	; (8000af4 <__NVIC_SetPriority+0x4c>)
 8000ac2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ac6:	0112      	lsls	r2, r2, #4
 8000ac8:	b2d2      	uxtb	r2, r2
 8000aca:	440b      	add	r3, r1
 8000acc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ad0:	e00a      	b.n	8000ae8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ad2:	683b      	ldr	r3, [r7, #0]
 8000ad4:	b2da      	uxtb	r2, r3
 8000ad6:	4908      	ldr	r1, [pc, #32]	; (8000af8 <__NVIC_SetPriority+0x50>)
 8000ad8:	79fb      	ldrb	r3, [r7, #7]
 8000ada:	f003 030f 	and.w	r3, r3, #15
 8000ade:	3b04      	subs	r3, #4
 8000ae0:	0112      	lsls	r2, r2, #4
 8000ae2:	b2d2      	uxtb	r2, r2
 8000ae4:	440b      	add	r3, r1
 8000ae6:	761a      	strb	r2, [r3, #24]
}
 8000ae8:	bf00      	nop
 8000aea:	370c      	adds	r7, #12
 8000aec:	46bd      	mov	sp, r7
 8000aee:	bc80      	pop	{r7}
 8000af0:	4770      	bx	lr
 8000af2:	bf00      	nop
 8000af4:	e000e100 	.word	0xe000e100
 8000af8:	e000ed00 	.word	0xe000ed00

08000afc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000afc:	b480      	push	{r7}
 8000afe:	b089      	sub	sp, #36	; 0x24
 8000b00:	af00      	add	r7, sp, #0
 8000b02:	60f8      	str	r0, [r7, #12]
 8000b04:	60b9      	str	r1, [r7, #8]
 8000b06:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000b08:	68fb      	ldr	r3, [r7, #12]
 8000b0a:	f003 0307 	and.w	r3, r3, #7
 8000b0e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b10:	69fb      	ldr	r3, [r7, #28]
 8000b12:	f1c3 0307 	rsb	r3, r3, #7
 8000b16:	2b04      	cmp	r3, #4
 8000b18:	bf28      	it	cs
 8000b1a:	2304      	movcs	r3, #4
 8000b1c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b1e:	69fb      	ldr	r3, [r7, #28]
 8000b20:	3304      	adds	r3, #4
 8000b22:	2b06      	cmp	r3, #6
 8000b24:	d902      	bls.n	8000b2c <NVIC_EncodePriority+0x30>
 8000b26:	69fb      	ldr	r3, [r7, #28]
 8000b28:	3b03      	subs	r3, #3
 8000b2a:	e000      	b.n	8000b2e <NVIC_EncodePriority+0x32>
 8000b2c:	2300      	movs	r3, #0
 8000b2e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b30:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000b34:	69bb      	ldr	r3, [r7, #24]
 8000b36:	fa02 f303 	lsl.w	r3, r2, r3
 8000b3a:	43da      	mvns	r2, r3
 8000b3c:	68bb      	ldr	r3, [r7, #8]
 8000b3e:	401a      	ands	r2, r3
 8000b40:	697b      	ldr	r3, [r7, #20]
 8000b42:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000b44:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000b48:	697b      	ldr	r3, [r7, #20]
 8000b4a:	fa01 f303 	lsl.w	r3, r1, r3
 8000b4e:	43d9      	mvns	r1, r3
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b54:	4313      	orrs	r3, r2
         );
}
 8000b56:	4618      	mov	r0, r3
 8000b58:	3724      	adds	r7, #36	; 0x24
 8000b5a:	46bd      	mov	sp, r7
 8000b5c:	bc80      	pop	{r7}
 8000b5e:	4770      	bx	lr

08000b60 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b60:	b580      	push	{r7, lr}
 8000b62:	b082      	sub	sp, #8
 8000b64:	af00      	add	r7, sp, #0
 8000b66:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000b68:	6878      	ldr	r0, [r7, #4]
 8000b6a:	f7ff ff4f 	bl	8000a0c <__NVIC_SetPriorityGrouping>
}
 8000b6e:	bf00      	nop
 8000b70:	3708      	adds	r7, #8
 8000b72:	46bd      	mov	sp, r7
 8000b74:	bd80      	pop	{r7, pc}

08000b76 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000b76:	b580      	push	{r7, lr}
 8000b78:	b086      	sub	sp, #24
 8000b7a:	af00      	add	r7, sp, #0
 8000b7c:	4603      	mov	r3, r0
 8000b7e:	60b9      	str	r1, [r7, #8]
 8000b80:	607a      	str	r2, [r7, #4]
 8000b82:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000b84:	2300      	movs	r3, #0
 8000b86:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000b88:	f7ff ff64 	bl	8000a54 <__NVIC_GetPriorityGrouping>
 8000b8c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000b8e:	687a      	ldr	r2, [r7, #4]
 8000b90:	68b9      	ldr	r1, [r7, #8]
 8000b92:	6978      	ldr	r0, [r7, #20]
 8000b94:	f7ff ffb2 	bl	8000afc <NVIC_EncodePriority>
 8000b98:	4602      	mov	r2, r0
 8000b9a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000b9e:	4611      	mov	r1, r2
 8000ba0:	4618      	mov	r0, r3
 8000ba2:	f7ff ff81 	bl	8000aa8 <__NVIC_SetPriority>
}
 8000ba6:	bf00      	nop
 8000ba8:	3718      	adds	r7, #24
 8000baa:	46bd      	mov	sp, r7
 8000bac:	bd80      	pop	{r7, pc}

08000bae <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000bae:	b580      	push	{r7, lr}
 8000bb0:	b082      	sub	sp, #8
 8000bb2:	af00      	add	r7, sp, #0
 8000bb4:	4603      	mov	r3, r0
 8000bb6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000bb8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bbc:	4618      	mov	r0, r3
 8000bbe:	f7ff ff57 	bl	8000a70 <__NVIC_EnableIRQ>
}
 8000bc2:	bf00      	nop
 8000bc4:	3708      	adds	r7, #8
 8000bc6:	46bd      	mov	sp, r7
 8000bc8:	bd80      	pop	{r7, pc}
	...

08000bcc <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	b084      	sub	sp, #16
 8000bd0:	af00      	add	r7, sp, #0
 8000bd2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000bd4:	2300      	movs	r3, #0
 8000bd6:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000bde:	2b02      	cmp	r3, #2
 8000be0:	d005      	beq.n	8000bee <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	2204      	movs	r2, #4
 8000be6:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8000be8:	2301      	movs	r3, #1
 8000bea:	73fb      	strb	r3, [r7, #15]
 8000bec:	e051      	b.n	8000c92 <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	681b      	ldr	r3, [r3, #0]
 8000bf2:	681a      	ldr	r2, [r3, #0]
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	681b      	ldr	r3, [r3, #0]
 8000bf8:	f022 020e 	bic.w	r2, r2, #14
 8000bfc:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	681b      	ldr	r3, [r3, #0]
 8000c02:	681a      	ldr	r2, [r3, #0]
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	681b      	ldr	r3, [r3, #0]
 8000c08:	f022 0201 	bic.w	r2, r2, #1
 8000c0c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	681b      	ldr	r3, [r3, #0]
 8000c12:	4a22      	ldr	r2, [pc, #136]	; (8000c9c <HAL_DMA_Abort_IT+0xd0>)
 8000c14:	4293      	cmp	r3, r2
 8000c16:	d029      	beq.n	8000c6c <HAL_DMA_Abort_IT+0xa0>
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	681b      	ldr	r3, [r3, #0]
 8000c1c:	4a20      	ldr	r2, [pc, #128]	; (8000ca0 <HAL_DMA_Abort_IT+0xd4>)
 8000c1e:	4293      	cmp	r3, r2
 8000c20:	d022      	beq.n	8000c68 <HAL_DMA_Abort_IT+0x9c>
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	681b      	ldr	r3, [r3, #0]
 8000c26:	4a1f      	ldr	r2, [pc, #124]	; (8000ca4 <HAL_DMA_Abort_IT+0xd8>)
 8000c28:	4293      	cmp	r3, r2
 8000c2a:	d01a      	beq.n	8000c62 <HAL_DMA_Abort_IT+0x96>
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	681b      	ldr	r3, [r3, #0]
 8000c30:	4a1d      	ldr	r2, [pc, #116]	; (8000ca8 <HAL_DMA_Abort_IT+0xdc>)
 8000c32:	4293      	cmp	r3, r2
 8000c34:	d012      	beq.n	8000c5c <HAL_DMA_Abort_IT+0x90>
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	681b      	ldr	r3, [r3, #0]
 8000c3a:	4a1c      	ldr	r2, [pc, #112]	; (8000cac <HAL_DMA_Abort_IT+0xe0>)
 8000c3c:	4293      	cmp	r3, r2
 8000c3e:	d00a      	beq.n	8000c56 <HAL_DMA_Abort_IT+0x8a>
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	681b      	ldr	r3, [r3, #0]
 8000c44:	4a1a      	ldr	r2, [pc, #104]	; (8000cb0 <HAL_DMA_Abort_IT+0xe4>)
 8000c46:	4293      	cmp	r3, r2
 8000c48:	d102      	bne.n	8000c50 <HAL_DMA_Abort_IT+0x84>
 8000c4a:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000c4e:	e00e      	b.n	8000c6e <HAL_DMA_Abort_IT+0xa2>
 8000c50:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000c54:	e00b      	b.n	8000c6e <HAL_DMA_Abort_IT+0xa2>
 8000c56:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000c5a:	e008      	b.n	8000c6e <HAL_DMA_Abort_IT+0xa2>
 8000c5c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c60:	e005      	b.n	8000c6e <HAL_DMA_Abort_IT+0xa2>
 8000c62:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000c66:	e002      	b.n	8000c6e <HAL_DMA_Abort_IT+0xa2>
 8000c68:	2310      	movs	r3, #16
 8000c6a:	e000      	b.n	8000c6e <HAL_DMA_Abort_IT+0xa2>
 8000c6c:	2301      	movs	r3, #1
 8000c6e:	4a11      	ldr	r2, [pc, #68]	; (8000cb4 <HAL_DMA_Abort_IT+0xe8>)
 8000c70:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	2201      	movs	r2, #1
 8000c76:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000c86:	2b00      	cmp	r3, #0
 8000c88:	d003      	beq.n	8000c92 <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000c8e:	6878      	ldr	r0, [r7, #4]
 8000c90:	4798      	blx	r3
    } 
  }
  return status;
 8000c92:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c94:	4618      	mov	r0, r3
 8000c96:	3710      	adds	r7, #16
 8000c98:	46bd      	mov	sp, r7
 8000c9a:	bd80      	pop	{r7, pc}
 8000c9c:	40020008 	.word	0x40020008
 8000ca0:	4002001c 	.word	0x4002001c
 8000ca4:	40020030 	.word	0x40020030
 8000ca8:	40020044 	.word	0x40020044
 8000cac:	40020058 	.word	0x40020058
 8000cb0:	4002006c 	.word	0x4002006c
 8000cb4:	40020000 	.word	0x40020000

08000cb8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000cb8:	b480      	push	{r7}
 8000cba:	b08b      	sub	sp, #44	; 0x2c
 8000cbc:	af00      	add	r7, sp, #0
 8000cbe:	6078      	str	r0, [r7, #4]
 8000cc0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000cca:	e169      	b.n	8000fa0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000ccc:	2201      	movs	r2, #1
 8000cce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cd0:	fa02 f303 	lsl.w	r3, r2, r3
 8000cd4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000cd6:	683b      	ldr	r3, [r7, #0]
 8000cd8:	681b      	ldr	r3, [r3, #0]
 8000cda:	69fa      	ldr	r2, [r7, #28]
 8000cdc:	4013      	ands	r3, r2
 8000cde:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000ce0:	69ba      	ldr	r2, [r7, #24]
 8000ce2:	69fb      	ldr	r3, [r7, #28]
 8000ce4:	429a      	cmp	r2, r3
 8000ce6:	f040 8158 	bne.w	8000f9a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000cea:	683b      	ldr	r3, [r7, #0]
 8000cec:	685b      	ldr	r3, [r3, #4]
 8000cee:	4a9a      	ldr	r2, [pc, #616]	; (8000f58 <HAL_GPIO_Init+0x2a0>)
 8000cf0:	4293      	cmp	r3, r2
 8000cf2:	d05e      	beq.n	8000db2 <HAL_GPIO_Init+0xfa>
 8000cf4:	4a98      	ldr	r2, [pc, #608]	; (8000f58 <HAL_GPIO_Init+0x2a0>)
 8000cf6:	4293      	cmp	r3, r2
 8000cf8:	d875      	bhi.n	8000de6 <HAL_GPIO_Init+0x12e>
 8000cfa:	4a98      	ldr	r2, [pc, #608]	; (8000f5c <HAL_GPIO_Init+0x2a4>)
 8000cfc:	4293      	cmp	r3, r2
 8000cfe:	d058      	beq.n	8000db2 <HAL_GPIO_Init+0xfa>
 8000d00:	4a96      	ldr	r2, [pc, #600]	; (8000f5c <HAL_GPIO_Init+0x2a4>)
 8000d02:	4293      	cmp	r3, r2
 8000d04:	d86f      	bhi.n	8000de6 <HAL_GPIO_Init+0x12e>
 8000d06:	4a96      	ldr	r2, [pc, #600]	; (8000f60 <HAL_GPIO_Init+0x2a8>)
 8000d08:	4293      	cmp	r3, r2
 8000d0a:	d052      	beq.n	8000db2 <HAL_GPIO_Init+0xfa>
 8000d0c:	4a94      	ldr	r2, [pc, #592]	; (8000f60 <HAL_GPIO_Init+0x2a8>)
 8000d0e:	4293      	cmp	r3, r2
 8000d10:	d869      	bhi.n	8000de6 <HAL_GPIO_Init+0x12e>
 8000d12:	4a94      	ldr	r2, [pc, #592]	; (8000f64 <HAL_GPIO_Init+0x2ac>)
 8000d14:	4293      	cmp	r3, r2
 8000d16:	d04c      	beq.n	8000db2 <HAL_GPIO_Init+0xfa>
 8000d18:	4a92      	ldr	r2, [pc, #584]	; (8000f64 <HAL_GPIO_Init+0x2ac>)
 8000d1a:	4293      	cmp	r3, r2
 8000d1c:	d863      	bhi.n	8000de6 <HAL_GPIO_Init+0x12e>
 8000d1e:	4a92      	ldr	r2, [pc, #584]	; (8000f68 <HAL_GPIO_Init+0x2b0>)
 8000d20:	4293      	cmp	r3, r2
 8000d22:	d046      	beq.n	8000db2 <HAL_GPIO_Init+0xfa>
 8000d24:	4a90      	ldr	r2, [pc, #576]	; (8000f68 <HAL_GPIO_Init+0x2b0>)
 8000d26:	4293      	cmp	r3, r2
 8000d28:	d85d      	bhi.n	8000de6 <HAL_GPIO_Init+0x12e>
 8000d2a:	2b12      	cmp	r3, #18
 8000d2c:	d82a      	bhi.n	8000d84 <HAL_GPIO_Init+0xcc>
 8000d2e:	2b12      	cmp	r3, #18
 8000d30:	d859      	bhi.n	8000de6 <HAL_GPIO_Init+0x12e>
 8000d32:	a201      	add	r2, pc, #4	; (adr r2, 8000d38 <HAL_GPIO_Init+0x80>)
 8000d34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d38:	08000db3 	.word	0x08000db3
 8000d3c:	08000d8d 	.word	0x08000d8d
 8000d40:	08000d9f 	.word	0x08000d9f
 8000d44:	08000de1 	.word	0x08000de1
 8000d48:	08000de7 	.word	0x08000de7
 8000d4c:	08000de7 	.word	0x08000de7
 8000d50:	08000de7 	.word	0x08000de7
 8000d54:	08000de7 	.word	0x08000de7
 8000d58:	08000de7 	.word	0x08000de7
 8000d5c:	08000de7 	.word	0x08000de7
 8000d60:	08000de7 	.word	0x08000de7
 8000d64:	08000de7 	.word	0x08000de7
 8000d68:	08000de7 	.word	0x08000de7
 8000d6c:	08000de7 	.word	0x08000de7
 8000d70:	08000de7 	.word	0x08000de7
 8000d74:	08000de7 	.word	0x08000de7
 8000d78:	08000de7 	.word	0x08000de7
 8000d7c:	08000d95 	.word	0x08000d95
 8000d80:	08000da9 	.word	0x08000da9
 8000d84:	4a79      	ldr	r2, [pc, #484]	; (8000f6c <HAL_GPIO_Init+0x2b4>)
 8000d86:	4293      	cmp	r3, r2
 8000d88:	d013      	beq.n	8000db2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000d8a:	e02c      	b.n	8000de6 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000d8c:	683b      	ldr	r3, [r7, #0]
 8000d8e:	68db      	ldr	r3, [r3, #12]
 8000d90:	623b      	str	r3, [r7, #32]
          break;
 8000d92:	e029      	b.n	8000de8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000d94:	683b      	ldr	r3, [r7, #0]
 8000d96:	68db      	ldr	r3, [r3, #12]
 8000d98:	3304      	adds	r3, #4
 8000d9a:	623b      	str	r3, [r7, #32]
          break;
 8000d9c:	e024      	b.n	8000de8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000d9e:	683b      	ldr	r3, [r7, #0]
 8000da0:	68db      	ldr	r3, [r3, #12]
 8000da2:	3308      	adds	r3, #8
 8000da4:	623b      	str	r3, [r7, #32]
          break;
 8000da6:	e01f      	b.n	8000de8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000da8:	683b      	ldr	r3, [r7, #0]
 8000daa:	68db      	ldr	r3, [r3, #12]
 8000dac:	330c      	adds	r3, #12
 8000dae:	623b      	str	r3, [r7, #32]
          break;
 8000db0:	e01a      	b.n	8000de8 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000db2:	683b      	ldr	r3, [r7, #0]
 8000db4:	689b      	ldr	r3, [r3, #8]
 8000db6:	2b00      	cmp	r3, #0
 8000db8:	d102      	bne.n	8000dc0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000dba:	2304      	movs	r3, #4
 8000dbc:	623b      	str	r3, [r7, #32]
          break;
 8000dbe:	e013      	b.n	8000de8 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000dc0:	683b      	ldr	r3, [r7, #0]
 8000dc2:	689b      	ldr	r3, [r3, #8]
 8000dc4:	2b01      	cmp	r3, #1
 8000dc6:	d105      	bne.n	8000dd4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000dc8:	2308      	movs	r3, #8
 8000dca:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	69fa      	ldr	r2, [r7, #28]
 8000dd0:	611a      	str	r2, [r3, #16]
          break;
 8000dd2:	e009      	b.n	8000de8 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000dd4:	2308      	movs	r3, #8
 8000dd6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	69fa      	ldr	r2, [r7, #28]
 8000ddc:	615a      	str	r2, [r3, #20]
          break;
 8000dde:	e003      	b.n	8000de8 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000de0:	2300      	movs	r3, #0
 8000de2:	623b      	str	r3, [r7, #32]
          break;
 8000de4:	e000      	b.n	8000de8 <HAL_GPIO_Init+0x130>
          break;
 8000de6:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000de8:	69bb      	ldr	r3, [r7, #24]
 8000dea:	2bff      	cmp	r3, #255	; 0xff
 8000dec:	d801      	bhi.n	8000df2 <HAL_GPIO_Init+0x13a>
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	e001      	b.n	8000df6 <HAL_GPIO_Init+0x13e>
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	3304      	adds	r3, #4
 8000df6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000df8:	69bb      	ldr	r3, [r7, #24]
 8000dfa:	2bff      	cmp	r3, #255	; 0xff
 8000dfc:	d802      	bhi.n	8000e04 <HAL_GPIO_Init+0x14c>
 8000dfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e00:	009b      	lsls	r3, r3, #2
 8000e02:	e002      	b.n	8000e0a <HAL_GPIO_Init+0x152>
 8000e04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e06:	3b08      	subs	r3, #8
 8000e08:	009b      	lsls	r3, r3, #2
 8000e0a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000e0c:	697b      	ldr	r3, [r7, #20]
 8000e0e:	681a      	ldr	r2, [r3, #0]
 8000e10:	210f      	movs	r1, #15
 8000e12:	693b      	ldr	r3, [r7, #16]
 8000e14:	fa01 f303 	lsl.w	r3, r1, r3
 8000e18:	43db      	mvns	r3, r3
 8000e1a:	401a      	ands	r2, r3
 8000e1c:	6a39      	ldr	r1, [r7, #32]
 8000e1e:	693b      	ldr	r3, [r7, #16]
 8000e20:	fa01 f303 	lsl.w	r3, r1, r3
 8000e24:	431a      	orrs	r2, r3
 8000e26:	697b      	ldr	r3, [r7, #20]
 8000e28:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000e2a:	683b      	ldr	r3, [r7, #0]
 8000e2c:	685b      	ldr	r3, [r3, #4]
 8000e2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e32:	2b00      	cmp	r3, #0
 8000e34:	f000 80b1 	beq.w	8000f9a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000e38:	4b4d      	ldr	r3, [pc, #308]	; (8000f70 <HAL_GPIO_Init+0x2b8>)
 8000e3a:	699b      	ldr	r3, [r3, #24]
 8000e3c:	4a4c      	ldr	r2, [pc, #304]	; (8000f70 <HAL_GPIO_Init+0x2b8>)
 8000e3e:	f043 0301 	orr.w	r3, r3, #1
 8000e42:	6193      	str	r3, [r2, #24]
 8000e44:	4b4a      	ldr	r3, [pc, #296]	; (8000f70 <HAL_GPIO_Init+0x2b8>)
 8000e46:	699b      	ldr	r3, [r3, #24]
 8000e48:	f003 0301 	and.w	r3, r3, #1
 8000e4c:	60bb      	str	r3, [r7, #8]
 8000e4e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000e50:	4a48      	ldr	r2, [pc, #288]	; (8000f74 <HAL_GPIO_Init+0x2bc>)
 8000e52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e54:	089b      	lsrs	r3, r3, #2
 8000e56:	3302      	adds	r3, #2
 8000e58:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e5c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000e5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e60:	f003 0303 	and.w	r3, r3, #3
 8000e64:	009b      	lsls	r3, r3, #2
 8000e66:	220f      	movs	r2, #15
 8000e68:	fa02 f303 	lsl.w	r3, r2, r3
 8000e6c:	43db      	mvns	r3, r3
 8000e6e:	68fa      	ldr	r2, [r7, #12]
 8000e70:	4013      	ands	r3, r2
 8000e72:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	4a40      	ldr	r2, [pc, #256]	; (8000f78 <HAL_GPIO_Init+0x2c0>)
 8000e78:	4293      	cmp	r3, r2
 8000e7a:	d013      	beq.n	8000ea4 <HAL_GPIO_Init+0x1ec>
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	4a3f      	ldr	r2, [pc, #252]	; (8000f7c <HAL_GPIO_Init+0x2c4>)
 8000e80:	4293      	cmp	r3, r2
 8000e82:	d00d      	beq.n	8000ea0 <HAL_GPIO_Init+0x1e8>
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	4a3e      	ldr	r2, [pc, #248]	; (8000f80 <HAL_GPIO_Init+0x2c8>)
 8000e88:	4293      	cmp	r3, r2
 8000e8a:	d007      	beq.n	8000e9c <HAL_GPIO_Init+0x1e4>
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	4a3d      	ldr	r2, [pc, #244]	; (8000f84 <HAL_GPIO_Init+0x2cc>)
 8000e90:	4293      	cmp	r3, r2
 8000e92:	d101      	bne.n	8000e98 <HAL_GPIO_Init+0x1e0>
 8000e94:	2303      	movs	r3, #3
 8000e96:	e006      	b.n	8000ea6 <HAL_GPIO_Init+0x1ee>
 8000e98:	2304      	movs	r3, #4
 8000e9a:	e004      	b.n	8000ea6 <HAL_GPIO_Init+0x1ee>
 8000e9c:	2302      	movs	r3, #2
 8000e9e:	e002      	b.n	8000ea6 <HAL_GPIO_Init+0x1ee>
 8000ea0:	2301      	movs	r3, #1
 8000ea2:	e000      	b.n	8000ea6 <HAL_GPIO_Init+0x1ee>
 8000ea4:	2300      	movs	r3, #0
 8000ea6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000ea8:	f002 0203 	and.w	r2, r2, #3
 8000eac:	0092      	lsls	r2, r2, #2
 8000eae:	4093      	lsls	r3, r2
 8000eb0:	68fa      	ldr	r2, [r7, #12]
 8000eb2:	4313      	orrs	r3, r2
 8000eb4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000eb6:	492f      	ldr	r1, [pc, #188]	; (8000f74 <HAL_GPIO_Init+0x2bc>)
 8000eb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000eba:	089b      	lsrs	r3, r3, #2
 8000ebc:	3302      	adds	r3, #2
 8000ebe:	68fa      	ldr	r2, [r7, #12]
 8000ec0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000ec4:	683b      	ldr	r3, [r7, #0]
 8000ec6:	685b      	ldr	r3, [r3, #4]
 8000ec8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000ecc:	2b00      	cmp	r3, #0
 8000ece:	d006      	beq.n	8000ede <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000ed0:	4b2d      	ldr	r3, [pc, #180]	; (8000f88 <HAL_GPIO_Init+0x2d0>)
 8000ed2:	681a      	ldr	r2, [r3, #0]
 8000ed4:	492c      	ldr	r1, [pc, #176]	; (8000f88 <HAL_GPIO_Init+0x2d0>)
 8000ed6:	69bb      	ldr	r3, [r7, #24]
 8000ed8:	4313      	orrs	r3, r2
 8000eda:	600b      	str	r3, [r1, #0]
 8000edc:	e006      	b.n	8000eec <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000ede:	4b2a      	ldr	r3, [pc, #168]	; (8000f88 <HAL_GPIO_Init+0x2d0>)
 8000ee0:	681a      	ldr	r2, [r3, #0]
 8000ee2:	69bb      	ldr	r3, [r7, #24]
 8000ee4:	43db      	mvns	r3, r3
 8000ee6:	4928      	ldr	r1, [pc, #160]	; (8000f88 <HAL_GPIO_Init+0x2d0>)
 8000ee8:	4013      	ands	r3, r2
 8000eea:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000eec:	683b      	ldr	r3, [r7, #0]
 8000eee:	685b      	ldr	r3, [r3, #4]
 8000ef0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	d006      	beq.n	8000f06 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000ef8:	4b23      	ldr	r3, [pc, #140]	; (8000f88 <HAL_GPIO_Init+0x2d0>)
 8000efa:	685a      	ldr	r2, [r3, #4]
 8000efc:	4922      	ldr	r1, [pc, #136]	; (8000f88 <HAL_GPIO_Init+0x2d0>)
 8000efe:	69bb      	ldr	r3, [r7, #24]
 8000f00:	4313      	orrs	r3, r2
 8000f02:	604b      	str	r3, [r1, #4]
 8000f04:	e006      	b.n	8000f14 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000f06:	4b20      	ldr	r3, [pc, #128]	; (8000f88 <HAL_GPIO_Init+0x2d0>)
 8000f08:	685a      	ldr	r2, [r3, #4]
 8000f0a:	69bb      	ldr	r3, [r7, #24]
 8000f0c:	43db      	mvns	r3, r3
 8000f0e:	491e      	ldr	r1, [pc, #120]	; (8000f88 <HAL_GPIO_Init+0x2d0>)
 8000f10:	4013      	ands	r3, r2
 8000f12:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000f14:	683b      	ldr	r3, [r7, #0]
 8000f16:	685b      	ldr	r3, [r3, #4]
 8000f18:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000f1c:	2b00      	cmp	r3, #0
 8000f1e:	d006      	beq.n	8000f2e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000f20:	4b19      	ldr	r3, [pc, #100]	; (8000f88 <HAL_GPIO_Init+0x2d0>)
 8000f22:	689a      	ldr	r2, [r3, #8]
 8000f24:	4918      	ldr	r1, [pc, #96]	; (8000f88 <HAL_GPIO_Init+0x2d0>)
 8000f26:	69bb      	ldr	r3, [r7, #24]
 8000f28:	4313      	orrs	r3, r2
 8000f2a:	608b      	str	r3, [r1, #8]
 8000f2c:	e006      	b.n	8000f3c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000f2e:	4b16      	ldr	r3, [pc, #88]	; (8000f88 <HAL_GPIO_Init+0x2d0>)
 8000f30:	689a      	ldr	r2, [r3, #8]
 8000f32:	69bb      	ldr	r3, [r7, #24]
 8000f34:	43db      	mvns	r3, r3
 8000f36:	4914      	ldr	r1, [pc, #80]	; (8000f88 <HAL_GPIO_Init+0x2d0>)
 8000f38:	4013      	ands	r3, r2
 8000f3a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000f3c:	683b      	ldr	r3, [r7, #0]
 8000f3e:	685b      	ldr	r3, [r3, #4]
 8000f40:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	d021      	beq.n	8000f8c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000f48:	4b0f      	ldr	r3, [pc, #60]	; (8000f88 <HAL_GPIO_Init+0x2d0>)
 8000f4a:	68da      	ldr	r2, [r3, #12]
 8000f4c:	490e      	ldr	r1, [pc, #56]	; (8000f88 <HAL_GPIO_Init+0x2d0>)
 8000f4e:	69bb      	ldr	r3, [r7, #24]
 8000f50:	4313      	orrs	r3, r2
 8000f52:	60cb      	str	r3, [r1, #12]
 8000f54:	e021      	b.n	8000f9a <HAL_GPIO_Init+0x2e2>
 8000f56:	bf00      	nop
 8000f58:	10320000 	.word	0x10320000
 8000f5c:	10310000 	.word	0x10310000
 8000f60:	10220000 	.word	0x10220000
 8000f64:	10210000 	.word	0x10210000
 8000f68:	10120000 	.word	0x10120000
 8000f6c:	10110000 	.word	0x10110000
 8000f70:	40021000 	.word	0x40021000
 8000f74:	40010000 	.word	0x40010000
 8000f78:	40010800 	.word	0x40010800
 8000f7c:	40010c00 	.word	0x40010c00
 8000f80:	40011000 	.word	0x40011000
 8000f84:	40011400 	.word	0x40011400
 8000f88:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000f8c:	4b0b      	ldr	r3, [pc, #44]	; (8000fbc <HAL_GPIO_Init+0x304>)
 8000f8e:	68da      	ldr	r2, [r3, #12]
 8000f90:	69bb      	ldr	r3, [r7, #24]
 8000f92:	43db      	mvns	r3, r3
 8000f94:	4909      	ldr	r1, [pc, #36]	; (8000fbc <HAL_GPIO_Init+0x304>)
 8000f96:	4013      	ands	r3, r2
 8000f98:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8000f9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f9c:	3301      	adds	r3, #1
 8000f9e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000fa0:	683b      	ldr	r3, [r7, #0]
 8000fa2:	681a      	ldr	r2, [r3, #0]
 8000fa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fa6:	fa22 f303 	lsr.w	r3, r2, r3
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	f47f ae8e 	bne.w	8000ccc <HAL_GPIO_Init+0x14>
  }
}
 8000fb0:	bf00      	nop
 8000fb2:	bf00      	nop
 8000fb4:	372c      	adds	r7, #44	; 0x2c
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	bc80      	pop	{r7}
 8000fba:	4770      	bx	lr
 8000fbc:	40010400 	.word	0x40010400

08000fc0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000fc0:	b480      	push	{r7}
 8000fc2:	b085      	sub	sp, #20
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	6078      	str	r0, [r7, #4]
 8000fc8:	460b      	mov	r3, r1
 8000fca:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	689a      	ldr	r2, [r3, #8]
 8000fd0:	887b      	ldrh	r3, [r7, #2]
 8000fd2:	4013      	ands	r3, r2
 8000fd4:	2b00      	cmp	r3, #0
 8000fd6:	d002      	beq.n	8000fde <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8000fd8:	2301      	movs	r3, #1
 8000fda:	73fb      	strb	r3, [r7, #15]
 8000fdc:	e001      	b.n	8000fe2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8000fde:	2300      	movs	r3, #0
 8000fe0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000fe2:	7bfb      	ldrb	r3, [r7, #15]
}
 8000fe4:	4618      	mov	r0, r3
 8000fe6:	3714      	adds	r7, #20
 8000fe8:	46bd      	mov	sp, r7
 8000fea:	bc80      	pop	{r7}
 8000fec:	4770      	bx	lr

08000fee <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000fee:	b480      	push	{r7}
 8000ff0:	b083      	sub	sp, #12
 8000ff2:	af00      	add	r7, sp, #0
 8000ff4:	6078      	str	r0, [r7, #4]
 8000ff6:	460b      	mov	r3, r1
 8000ff8:	807b      	strh	r3, [r7, #2]
 8000ffa:	4613      	mov	r3, r2
 8000ffc:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000ffe:	787b      	ldrb	r3, [r7, #1]
 8001000:	2b00      	cmp	r3, #0
 8001002:	d003      	beq.n	800100c <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001004:	887a      	ldrh	r2, [r7, #2]
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800100a:	e003      	b.n	8001014 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800100c:	887b      	ldrh	r3, [r7, #2]
 800100e:	041a      	lsls	r2, r3, #16
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	611a      	str	r2, [r3, #16]
}
 8001014:	bf00      	nop
 8001016:	370c      	adds	r7, #12
 8001018:	46bd      	mov	sp, r7
 800101a:	bc80      	pop	{r7}
 800101c:	4770      	bx	lr

0800101e <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800101e:	b480      	push	{r7}
 8001020:	b085      	sub	sp, #20
 8001022:	af00      	add	r7, sp, #0
 8001024:	6078      	str	r0, [r7, #4]
 8001026:	460b      	mov	r3, r1
 8001028:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	68db      	ldr	r3, [r3, #12]
 800102e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001030:	887a      	ldrh	r2, [r7, #2]
 8001032:	68fb      	ldr	r3, [r7, #12]
 8001034:	4013      	ands	r3, r2
 8001036:	041a      	lsls	r2, r3, #16
 8001038:	68fb      	ldr	r3, [r7, #12]
 800103a:	43d9      	mvns	r1, r3
 800103c:	887b      	ldrh	r3, [r7, #2]
 800103e:	400b      	ands	r3, r1
 8001040:	431a      	orrs	r2, r3
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	611a      	str	r2, [r3, #16]
}
 8001046:	bf00      	nop
 8001048:	3714      	adds	r7, #20
 800104a:	46bd      	mov	sp, r7
 800104c:	bc80      	pop	{r7}
 800104e:	4770      	bx	lr

08001050 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	b086      	sub	sp, #24
 8001054:	af00      	add	r7, sp, #0
 8001056:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	2b00      	cmp	r3, #0
 800105c:	d101      	bne.n	8001062 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800105e:	2301      	movs	r3, #1
 8001060:	e26c      	b.n	800153c <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	f003 0301 	and.w	r3, r3, #1
 800106a:	2b00      	cmp	r3, #0
 800106c:	f000 8087 	beq.w	800117e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001070:	4b92      	ldr	r3, [pc, #584]	; (80012bc <HAL_RCC_OscConfig+0x26c>)
 8001072:	685b      	ldr	r3, [r3, #4]
 8001074:	f003 030c 	and.w	r3, r3, #12
 8001078:	2b04      	cmp	r3, #4
 800107a:	d00c      	beq.n	8001096 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800107c:	4b8f      	ldr	r3, [pc, #572]	; (80012bc <HAL_RCC_OscConfig+0x26c>)
 800107e:	685b      	ldr	r3, [r3, #4]
 8001080:	f003 030c 	and.w	r3, r3, #12
 8001084:	2b08      	cmp	r3, #8
 8001086:	d112      	bne.n	80010ae <HAL_RCC_OscConfig+0x5e>
 8001088:	4b8c      	ldr	r3, [pc, #560]	; (80012bc <HAL_RCC_OscConfig+0x26c>)
 800108a:	685b      	ldr	r3, [r3, #4]
 800108c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001090:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001094:	d10b      	bne.n	80010ae <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001096:	4b89      	ldr	r3, [pc, #548]	; (80012bc <HAL_RCC_OscConfig+0x26c>)
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d06c      	beq.n	800117c <HAL_RCC_OscConfig+0x12c>
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	685b      	ldr	r3, [r3, #4]
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	d168      	bne.n	800117c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80010aa:	2301      	movs	r3, #1
 80010ac:	e246      	b.n	800153c <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	685b      	ldr	r3, [r3, #4]
 80010b2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80010b6:	d106      	bne.n	80010c6 <HAL_RCC_OscConfig+0x76>
 80010b8:	4b80      	ldr	r3, [pc, #512]	; (80012bc <HAL_RCC_OscConfig+0x26c>)
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	4a7f      	ldr	r2, [pc, #508]	; (80012bc <HAL_RCC_OscConfig+0x26c>)
 80010be:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80010c2:	6013      	str	r3, [r2, #0]
 80010c4:	e02e      	b.n	8001124 <HAL_RCC_OscConfig+0xd4>
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	685b      	ldr	r3, [r3, #4]
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d10c      	bne.n	80010e8 <HAL_RCC_OscConfig+0x98>
 80010ce:	4b7b      	ldr	r3, [pc, #492]	; (80012bc <HAL_RCC_OscConfig+0x26c>)
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	4a7a      	ldr	r2, [pc, #488]	; (80012bc <HAL_RCC_OscConfig+0x26c>)
 80010d4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80010d8:	6013      	str	r3, [r2, #0]
 80010da:	4b78      	ldr	r3, [pc, #480]	; (80012bc <HAL_RCC_OscConfig+0x26c>)
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	4a77      	ldr	r2, [pc, #476]	; (80012bc <HAL_RCC_OscConfig+0x26c>)
 80010e0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80010e4:	6013      	str	r3, [r2, #0]
 80010e6:	e01d      	b.n	8001124 <HAL_RCC_OscConfig+0xd4>
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	685b      	ldr	r3, [r3, #4]
 80010ec:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80010f0:	d10c      	bne.n	800110c <HAL_RCC_OscConfig+0xbc>
 80010f2:	4b72      	ldr	r3, [pc, #456]	; (80012bc <HAL_RCC_OscConfig+0x26c>)
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	4a71      	ldr	r2, [pc, #452]	; (80012bc <HAL_RCC_OscConfig+0x26c>)
 80010f8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80010fc:	6013      	str	r3, [r2, #0]
 80010fe:	4b6f      	ldr	r3, [pc, #444]	; (80012bc <HAL_RCC_OscConfig+0x26c>)
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	4a6e      	ldr	r2, [pc, #440]	; (80012bc <HAL_RCC_OscConfig+0x26c>)
 8001104:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001108:	6013      	str	r3, [r2, #0]
 800110a:	e00b      	b.n	8001124 <HAL_RCC_OscConfig+0xd4>
 800110c:	4b6b      	ldr	r3, [pc, #428]	; (80012bc <HAL_RCC_OscConfig+0x26c>)
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	4a6a      	ldr	r2, [pc, #424]	; (80012bc <HAL_RCC_OscConfig+0x26c>)
 8001112:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001116:	6013      	str	r3, [r2, #0]
 8001118:	4b68      	ldr	r3, [pc, #416]	; (80012bc <HAL_RCC_OscConfig+0x26c>)
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	4a67      	ldr	r2, [pc, #412]	; (80012bc <HAL_RCC_OscConfig+0x26c>)
 800111e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001122:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	685b      	ldr	r3, [r3, #4]
 8001128:	2b00      	cmp	r3, #0
 800112a:	d013      	beq.n	8001154 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800112c:	f7ff fc64 	bl	80009f8 <HAL_GetTick>
 8001130:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001132:	e008      	b.n	8001146 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001134:	f7ff fc60 	bl	80009f8 <HAL_GetTick>
 8001138:	4602      	mov	r2, r0
 800113a:	693b      	ldr	r3, [r7, #16]
 800113c:	1ad3      	subs	r3, r2, r3
 800113e:	2b64      	cmp	r3, #100	; 0x64
 8001140:	d901      	bls.n	8001146 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001142:	2303      	movs	r3, #3
 8001144:	e1fa      	b.n	800153c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001146:	4b5d      	ldr	r3, [pc, #372]	; (80012bc <HAL_RCC_OscConfig+0x26c>)
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800114e:	2b00      	cmp	r3, #0
 8001150:	d0f0      	beq.n	8001134 <HAL_RCC_OscConfig+0xe4>
 8001152:	e014      	b.n	800117e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001154:	f7ff fc50 	bl	80009f8 <HAL_GetTick>
 8001158:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800115a:	e008      	b.n	800116e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800115c:	f7ff fc4c 	bl	80009f8 <HAL_GetTick>
 8001160:	4602      	mov	r2, r0
 8001162:	693b      	ldr	r3, [r7, #16]
 8001164:	1ad3      	subs	r3, r2, r3
 8001166:	2b64      	cmp	r3, #100	; 0x64
 8001168:	d901      	bls.n	800116e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800116a:	2303      	movs	r3, #3
 800116c:	e1e6      	b.n	800153c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800116e:	4b53      	ldr	r3, [pc, #332]	; (80012bc <HAL_RCC_OscConfig+0x26c>)
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001176:	2b00      	cmp	r3, #0
 8001178:	d1f0      	bne.n	800115c <HAL_RCC_OscConfig+0x10c>
 800117a:	e000      	b.n	800117e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800117c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	f003 0302 	and.w	r3, r3, #2
 8001186:	2b00      	cmp	r3, #0
 8001188:	d063      	beq.n	8001252 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800118a:	4b4c      	ldr	r3, [pc, #304]	; (80012bc <HAL_RCC_OscConfig+0x26c>)
 800118c:	685b      	ldr	r3, [r3, #4]
 800118e:	f003 030c 	and.w	r3, r3, #12
 8001192:	2b00      	cmp	r3, #0
 8001194:	d00b      	beq.n	80011ae <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001196:	4b49      	ldr	r3, [pc, #292]	; (80012bc <HAL_RCC_OscConfig+0x26c>)
 8001198:	685b      	ldr	r3, [r3, #4]
 800119a:	f003 030c 	and.w	r3, r3, #12
 800119e:	2b08      	cmp	r3, #8
 80011a0:	d11c      	bne.n	80011dc <HAL_RCC_OscConfig+0x18c>
 80011a2:	4b46      	ldr	r3, [pc, #280]	; (80012bc <HAL_RCC_OscConfig+0x26c>)
 80011a4:	685b      	ldr	r3, [r3, #4]
 80011a6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d116      	bne.n	80011dc <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80011ae:	4b43      	ldr	r3, [pc, #268]	; (80012bc <HAL_RCC_OscConfig+0x26c>)
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	f003 0302 	and.w	r3, r3, #2
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d005      	beq.n	80011c6 <HAL_RCC_OscConfig+0x176>
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	691b      	ldr	r3, [r3, #16]
 80011be:	2b01      	cmp	r3, #1
 80011c0:	d001      	beq.n	80011c6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80011c2:	2301      	movs	r3, #1
 80011c4:	e1ba      	b.n	800153c <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80011c6:	4b3d      	ldr	r3, [pc, #244]	; (80012bc <HAL_RCC_OscConfig+0x26c>)
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	695b      	ldr	r3, [r3, #20]
 80011d2:	00db      	lsls	r3, r3, #3
 80011d4:	4939      	ldr	r1, [pc, #228]	; (80012bc <HAL_RCC_OscConfig+0x26c>)
 80011d6:	4313      	orrs	r3, r2
 80011d8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80011da:	e03a      	b.n	8001252 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	691b      	ldr	r3, [r3, #16]
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d020      	beq.n	8001226 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80011e4:	4b36      	ldr	r3, [pc, #216]	; (80012c0 <HAL_RCC_OscConfig+0x270>)
 80011e6:	2201      	movs	r2, #1
 80011e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011ea:	f7ff fc05 	bl	80009f8 <HAL_GetTick>
 80011ee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80011f0:	e008      	b.n	8001204 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80011f2:	f7ff fc01 	bl	80009f8 <HAL_GetTick>
 80011f6:	4602      	mov	r2, r0
 80011f8:	693b      	ldr	r3, [r7, #16]
 80011fa:	1ad3      	subs	r3, r2, r3
 80011fc:	2b02      	cmp	r3, #2
 80011fe:	d901      	bls.n	8001204 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001200:	2303      	movs	r3, #3
 8001202:	e19b      	b.n	800153c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001204:	4b2d      	ldr	r3, [pc, #180]	; (80012bc <HAL_RCC_OscConfig+0x26c>)
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	f003 0302 	and.w	r3, r3, #2
 800120c:	2b00      	cmp	r3, #0
 800120e:	d0f0      	beq.n	80011f2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001210:	4b2a      	ldr	r3, [pc, #168]	; (80012bc <HAL_RCC_OscConfig+0x26c>)
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	695b      	ldr	r3, [r3, #20]
 800121c:	00db      	lsls	r3, r3, #3
 800121e:	4927      	ldr	r1, [pc, #156]	; (80012bc <HAL_RCC_OscConfig+0x26c>)
 8001220:	4313      	orrs	r3, r2
 8001222:	600b      	str	r3, [r1, #0]
 8001224:	e015      	b.n	8001252 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001226:	4b26      	ldr	r3, [pc, #152]	; (80012c0 <HAL_RCC_OscConfig+0x270>)
 8001228:	2200      	movs	r2, #0
 800122a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800122c:	f7ff fbe4 	bl	80009f8 <HAL_GetTick>
 8001230:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001232:	e008      	b.n	8001246 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001234:	f7ff fbe0 	bl	80009f8 <HAL_GetTick>
 8001238:	4602      	mov	r2, r0
 800123a:	693b      	ldr	r3, [r7, #16]
 800123c:	1ad3      	subs	r3, r2, r3
 800123e:	2b02      	cmp	r3, #2
 8001240:	d901      	bls.n	8001246 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001242:	2303      	movs	r3, #3
 8001244:	e17a      	b.n	800153c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001246:	4b1d      	ldr	r3, [pc, #116]	; (80012bc <HAL_RCC_OscConfig+0x26c>)
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	f003 0302 	and.w	r3, r3, #2
 800124e:	2b00      	cmp	r3, #0
 8001250:	d1f0      	bne.n	8001234 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	f003 0308 	and.w	r3, r3, #8
 800125a:	2b00      	cmp	r3, #0
 800125c:	d03a      	beq.n	80012d4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	699b      	ldr	r3, [r3, #24]
 8001262:	2b00      	cmp	r3, #0
 8001264:	d019      	beq.n	800129a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001266:	4b17      	ldr	r3, [pc, #92]	; (80012c4 <HAL_RCC_OscConfig+0x274>)
 8001268:	2201      	movs	r2, #1
 800126a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800126c:	f7ff fbc4 	bl	80009f8 <HAL_GetTick>
 8001270:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001272:	e008      	b.n	8001286 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001274:	f7ff fbc0 	bl	80009f8 <HAL_GetTick>
 8001278:	4602      	mov	r2, r0
 800127a:	693b      	ldr	r3, [r7, #16]
 800127c:	1ad3      	subs	r3, r2, r3
 800127e:	2b02      	cmp	r3, #2
 8001280:	d901      	bls.n	8001286 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001282:	2303      	movs	r3, #3
 8001284:	e15a      	b.n	800153c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001286:	4b0d      	ldr	r3, [pc, #52]	; (80012bc <HAL_RCC_OscConfig+0x26c>)
 8001288:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800128a:	f003 0302 	and.w	r3, r3, #2
 800128e:	2b00      	cmp	r3, #0
 8001290:	d0f0      	beq.n	8001274 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001292:	2001      	movs	r0, #1
 8001294:	f000 fb08 	bl	80018a8 <RCC_Delay>
 8001298:	e01c      	b.n	80012d4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800129a:	4b0a      	ldr	r3, [pc, #40]	; (80012c4 <HAL_RCC_OscConfig+0x274>)
 800129c:	2200      	movs	r2, #0
 800129e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80012a0:	f7ff fbaa 	bl	80009f8 <HAL_GetTick>
 80012a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80012a6:	e00f      	b.n	80012c8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80012a8:	f7ff fba6 	bl	80009f8 <HAL_GetTick>
 80012ac:	4602      	mov	r2, r0
 80012ae:	693b      	ldr	r3, [r7, #16]
 80012b0:	1ad3      	subs	r3, r2, r3
 80012b2:	2b02      	cmp	r3, #2
 80012b4:	d908      	bls.n	80012c8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80012b6:	2303      	movs	r3, #3
 80012b8:	e140      	b.n	800153c <HAL_RCC_OscConfig+0x4ec>
 80012ba:	bf00      	nop
 80012bc:	40021000 	.word	0x40021000
 80012c0:	42420000 	.word	0x42420000
 80012c4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80012c8:	4b9e      	ldr	r3, [pc, #632]	; (8001544 <HAL_RCC_OscConfig+0x4f4>)
 80012ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012cc:	f003 0302 	and.w	r3, r3, #2
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d1e9      	bne.n	80012a8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	f003 0304 	and.w	r3, r3, #4
 80012dc:	2b00      	cmp	r3, #0
 80012de:	f000 80a6 	beq.w	800142e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80012e2:	2300      	movs	r3, #0
 80012e4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80012e6:	4b97      	ldr	r3, [pc, #604]	; (8001544 <HAL_RCC_OscConfig+0x4f4>)
 80012e8:	69db      	ldr	r3, [r3, #28]
 80012ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d10d      	bne.n	800130e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80012f2:	4b94      	ldr	r3, [pc, #592]	; (8001544 <HAL_RCC_OscConfig+0x4f4>)
 80012f4:	69db      	ldr	r3, [r3, #28]
 80012f6:	4a93      	ldr	r2, [pc, #588]	; (8001544 <HAL_RCC_OscConfig+0x4f4>)
 80012f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80012fc:	61d3      	str	r3, [r2, #28]
 80012fe:	4b91      	ldr	r3, [pc, #580]	; (8001544 <HAL_RCC_OscConfig+0x4f4>)
 8001300:	69db      	ldr	r3, [r3, #28]
 8001302:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001306:	60bb      	str	r3, [r7, #8]
 8001308:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800130a:	2301      	movs	r3, #1
 800130c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800130e:	4b8e      	ldr	r3, [pc, #568]	; (8001548 <HAL_RCC_OscConfig+0x4f8>)
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001316:	2b00      	cmp	r3, #0
 8001318:	d118      	bne.n	800134c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800131a:	4b8b      	ldr	r3, [pc, #556]	; (8001548 <HAL_RCC_OscConfig+0x4f8>)
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	4a8a      	ldr	r2, [pc, #552]	; (8001548 <HAL_RCC_OscConfig+0x4f8>)
 8001320:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001324:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001326:	f7ff fb67 	bl	80009f8 <HAL_GetTick>
 800132a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800132c:	e008      	b.n	8001340 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800132e:	f7ff fb63 	bl	80009f8 <HAL_GetTick>
 8001332:	4602      	mov	r2, r0
 8001334:	693b      	ldr	r3, [r7, #16]
 8001336:	1ad3      	subs	r3, r2, r3
 8001338:	2b64      	cmp	r3, #100	; 0x64
 800133a:	d901      	bls.n	8001340 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800133c:	2303      	movs	r3, #3
 800133e:	e0fd      	b.n	800153c <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001340:	4b81      	ldr	r3, [pc, #516]	; (8001548 <HAL_RCC_OscConfig+0x4f8>)
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001348:	2b00      	cmp	r3, #0
 800134a:	d0f0      	beq.n	800132e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	68db      	ldr	r3, [r3, #12]
 8001350:	2b01      	cmp	r3, #1
 8001352:	d106      	bne.n	8001362 <HAL_RCC_OscConfig+0x312>
 8001354:	4b7b      	ldr	r3, [pc, #492]	; (8001544 <HAL_RCC_OscConfig+0x4f4>)
 8001356:	6a1b      	ldr	r3, [r3, #32]
 8001358:	4a7a      	ldr	r2, [pc, #488]	; (8001544 <HAL_RCC_OscConfig+0x4f4>)
 800135a:	f043 0301 	orr.w	r3, r3, #1
 800135e:	6213      	str	r3, [r2, #32]
 8001360:	e02d      	b.n	80013be <HAL_RCC_OscConfig+0x36e>
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	68db      	ldr	r3, [r3, #12]
 8001366:	2b00      	cmp	r3, #0
 8001368:	d10c      	bne.n	8001384 <HAL_RCC_OscConfig+0x334>
 800136a:	4b76      	ldr	r3, [pc, #472]	; (8001544 <HAL_RCC_OscConfig+0x4f4>)
 800136c:	6a1b      	ldr	r3, [r3, #32]
 800136e:	4a75      	ldr	r2, [pc, #468]	; (8001544 <HAL_RCC_OscConfig+0x4f4>)
 8001370:	f023 0301 	bic.w	r3, r3, #1
 8001374:	6213      	str	r3, [r2, #32]
 8001376:	4b73      	ldr	r3, [pc, #460]	; (8001544 <HAL_RCC_OscConfig+0x4f4>)
 8001378:	6a1b      	ldr	r3, [r3, #32]
 800137a:	4a72      	ldr	r2, [pc, #456]	; (8001544 <HAL_RCC_OscConfig+0x4f4>)
 800137c:	f023 0304 	bic.w	r3, r3, #4
 8001380:	6213      	str	r3, [r2, #32]
 8001382:	e01c      	b.n	80013be <HAL_RCC_OscConfig+0x36e>
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	68db      	ldr	r3, [r3, #12]
 8001388:	2b05      	cmp	r3, #5
 800138a:	d10c      	bne.n	80013a6 <HAL_RCC_OscConfig+0x356>
 800138c:	4b6d      	ldr	r3, [pc, #436]	; (8001544 <HAL_RCC_OscConfig+0x4f4>)
 800138e:	6a1b      	ldr	r3, [r3, #32]
 8001390:	4a6c      	ldr	r2, [pc, #432]	; (8001544 <HAL_RCC_OscConfig+0x4f4>)
 8001392:	f043 0304 	orr.w	r3, r3, #4
 8001396:	6213      	str	r3, [r2, #32]
 8001398:	4b6a      	ldr	r3, [pc, #424]	; (8001544 <HAL_RCC_OscConfig+0x4f4>)
 800139a:	6a1b      	ldr	r3, [r3, #32]
 800139c:	4a69      	ldr	r2, [pc, #420]	; (8001544 <HAL_RCC_OscConfig+0x4f4>)
 800139e:	f043 0301 	orr.w	r3, r3, #1
 80013a2:	6213      	str	r3, [r2, #32]
 80013a4:	e00b      	b.n	80013be <HAL_RCC_OscConfig+0x36e>
 80013a6:	4b67      	ldr	r3, [pc, #412]	; (8001544 <HAL_RCC_OscConfig+0x4f4>)
 80013a8:	6a1b      	ldr	r3, [r3, #32]
 80013aa:	4a66      	ldr	r2, [pc, #408]	; (8001544 <HAL_RCC_OscConfig+0x4f4>)
 80013ac:	f023 0301 	bic.w	r3, r3, #1
 80013b0:	6213      	str	r3, [r2, #32]
 80013b2:	4b64      	ldr	r3, [pc, #400]	; (8001544 <HAL_RCC_OscConfig+0x4f4>)
 80013b4:	6a1b      	ldr	r3, [r3, #32]
 80013b6:	4a63      	ldr	r2, [pc, #396]	; (8001544 <HAL_RCC_OscConfig+0x4f4>)
 80013b8:	f023 0304 	bic.w	r3, r3, #4
 80013bc:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	68db      	ldr	r3, [r3, #12]
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d015      	beq.n	80013f2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80013c6:	f7ff fb17 	bl	80009f8 <HAL_GetTick>
 80013ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80013cc:	e00a      	b.n	80013e4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80013ce:	f7ff fb13 	bl	80009f8 <HAL_GetTick>
 80013d2:	4602      	mov	r2, r0
 80013d4:	693b      	ldr	r3, [r7, #16]
 80013d6:	1ad3      	subs	r3, r2, r3
 80013d8:	f241 3288 	movw	r2, #5000	; 0x1388
 80013dc:	4293      	cmp	r3, r2
 80013de:	d901      	bls.n	80013e4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80013e0:	2303      	movs	r3, #3
 80013e2:	e0ab      	b.n	800153c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80013e4:	4b57      	ldr	r3, [pc, #348]	; (8001544 <HAL_RCC_OscConfig+0x4f4>)
 80013e6:	6a1b      	ldr	r3, [r3, #32]
 80013e8:	f003 0302 	and.w	r3, r3, #2
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d0ee      	beq.n	80013ce <HAL_RCC_OscConfig+0x37e>
 80013f0:	e014      	b.n	800141c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80013f2:	f7ff fb01 	bl	80009f8 <HAL_GetTick>
 80013f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80013f8:	e00a      	b.n	8001410 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80013fa:	f7ff fafd 	bl	80009f8 <HAL_GetTick>
 80013fe:	4602      	mov	r2, r0
 8001400:	693b      	ldr	r3, [r7, #16]
 8001402:	1ad3      	subs	r3, r2, r3
 8001404:	f241 3288 	movw	r2, #5000	; 0x1388
 8001408:	4293      	cmp	r3, r2
 800140a:	d901      	bls.n	8001410 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800140c:	2303      	movs	r3, #3
 800140e:	e095      	b.n	800153c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001410:	4b4c      	ldr	r3, [pc, #304]	; (8001544 <HAL_RCC_OscConfig+0x4f4>)
 8001412:	6a1b      	ldr	r3, [r3, #32]
 8001414:	f003 0302 	and.w	r3, r3, #2
 8001418:	2b00      	cmp	r3, #0
 800141a:	d1ee      	bne.n	80013fa <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800141c:	7dfb      	ldrb	r3, [r7, #23]
 800141e:	2b01      	cmp	r3, #1
 8001420:	d105      	bne.n	800142e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001422:	4b48      	ldr	r3, [pc, #288]	; (8001544 <HAL_RCC_OscConfig+0x4f4>)
 8001424:	69db      	ldr	r3, [r3, #28]
 8001426:	4a47      	ldr	r2, [pc, #284]	; (8001544 <HAL_RCC_OscConfig+0x4f4>)
 8001428:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800142c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	69db      	ldr	r3, [r3, #28]
 8001432:	2b00      	cmp	r3, #0
 8001434:	f000 8081 	beq.w	800153a <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001438:	4b42      	ldr	r3, [pc, #264]	; (8001544 <HAL_RCC_OscConfig+0x4f4>)
 800143a:	685b      	ldr	r3, [r3, #4]
 800143c:	f003 030c 	and.w	r3, r3, #12
 8001440:	2b08      	cmp	r3, #8
 8001442:	d061      	beq.n	8001508 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	69db      	ldr	r3, [r3, #28]
 8001448:	2b02      	cmp	r3, #2
 800144a:	d146      	bne.n	80014da <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800144c:	4b3f      	ldr	r3, [pc, #252]	; (800154c <HAL_RCC_OscConfig+0x4fc>)
 800144e:	2200      	movs	r2, #0
 8001450:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001452:	f7ff fad1 	bl	80009f8 <HAL_GetTick>
 8001456:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001458:	e008      	b.n	800146c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800145a:	f7ff facd 	bl	80009f8 <HAL_GetTick>
 800145e:	4602      	mov	r2, r0
 8001460:	693b      	ldr	r3, [r7, #16]
 8001462:	1ad3      	subs	r3, r2, r3
 8001464:	2b02      	cmp	r3, #2
 8001466:	d901      	bls.n	800146c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001468:	2303      	movs	r3, #3
 800146a:	e067      	b.n	800153c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800146c:	4b35      	ldr	r3, [pc, #212]	; (8001544 <HAL_RCC_OscConfig+0x4f4>)
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001474:	2b00      	cmp	r3, #0
 8001476:	d1f0      	bne.n	800145a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	6a1b      	ldr	r3, [r3, #32]
 800147c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001480:	d108      	bne.n	8001494 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001482:	4b30      	ldr	r3, [pc, #192]	; (8001544 <HAL_RCC_OscConfig+0x4f4>)
 8001484:	685b      	ldr	r3, [r3, #4]
 8001486:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	689b      	ldr	r3, [r3, #8]
 800148e:	492d      	ldr	r1, [pc, #180]	; (8001544 <HAL_RCC_OscConfig+0x4f4>)
 8001490:	4313      	orrs	r3, r2
 8001492:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001494:	4b2b      	ldr	r3, [pc, #172]	; (8001544 <HAL_RCC_OscConfig+0x4f4>)
 8001496:	685b      	ldr	r3, [r3, #4]
 8001498:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	6a19      	ldr	r1, [r3, #32]
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014a4:	430b      	orrs	r3, r1
 80014a6:	4927      	ldr	r1, [pc, #156]	; (8001544 <HAL_RCC_OscConfig+0x4f4>)
 80014a8:	4313      	orrs	r3, r2
 80014aa:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80014ac:	4b27      	ldr	r3, [pc, #156]	; (800154c <HAL_RCC_OscConfig+0x4fc>)
 80014ae:	2201      	movs	r2, #1
 80014b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014b2:	f7ff faa1 	bl	80009f8 <HAL_GetTick>
 80014b6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80014b8:	e008      	b.n	80014cc <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80014ba:	f7ff fa9d 	bl	80009f8 <HAL_GetTick>
 80014be:	4602      	mov	r2, r0
 80014c0:	693b      	ldr	r3, [r7, #16]
 80014c2:	1ad3      	subs	r3, r2, r3
 80014c4:	2b02      	cmp	r3, #2
 80014c6:	d901      	bls.n	80014cc <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80014c8:	2303      	movs	r3, #3
 80014ca:	e037      	b.n	800153c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80014cc:	4b1d      	ldr	r3, [pc, #116]	; (8001544 <HAL_RCC_OscConfig+0x4f4>)
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d0f0      	beq.n	80014ba <HAL_RCC_OscConfig+0x46a>
 80014d8:	e02f      	b.n	800153a <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80014da:	4b1c      	ldr	r3, [pc, #112]	; (800154c <HAL_RCC_OscConfig+0x4fc>)
 80014dc:	2200      	movs	r2, #0
 80014de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014e0:	f7ff fa8a 	bl	80009f8 <HAL_GetTick>
 80014e4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80014e6:	e008      	b.n	80014fa <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80014e8:	f7ff fa86 	bl	80009f8 <HAL_GetTick>
 80014ec:	4602      	mov	r2, r0
 80014ee:	693b      	ldr	r3, [r7, #16]
 80014f0:	1ad3      	subs	r3, r2, r3
 80014f2:	2b02      	cmp	r3, #2
 80014f4:	d901      	bls.n	80014fa <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80014f6:	2303      	movs	r3, #3
 80014f8:	e020      	b.n	800153c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80014fa:	4b12      	ldr	r3, [pc, #72]	; (8001544 <HAL_RCC_OscConfig+0x4f4>)
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001502:	2b00      	cmp	r3, #0
 8001504:	d1f0      	bne.n	80014e8 <HAL_RCC_OscConfig+0x498>
 8001506:	e018      	b.n	800153a <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	69db      	ldr	r3, [r3, #28]
 800150c:	2b01      	cmp	r3, #1
 800150e:	d101      	bne.n	8001514 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001510:	2301      	movs	r3, #1
 8001512:	e013      	b.n	800153c <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001514:	4b0b      	ldr	r3, [pc, #44]	; (8001544 <HAL_RCC_OscConfig+0x4f4>)
 8001516:	685b      	ldr	r3, [r3, #4]
 8001518:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800151a:	68fb      	ldr	r3, [r7, #12]
 800151c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	6a1b      	ldr	r3, [r3, #32]
 8001524:	429a      	cmp	r2, r3
 8001526:	d106      	bne.n	8001536 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001528:	68fb      	ldr	r3, [r7, #12]
 800152a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001532:	429a      	cmp	r2, r3
 8001534:	d001      	beq.n	800153a <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8001536:	2301      	movs	r3, #1
 8001538:	e000      	b.n	800153c <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 800153a:	2300      	movs	r3, #0
}
 800153c:	4618      	mov	r0, r3
 800153e:	3718      	adds	r7, #24
 8001540:	46bd      	mov	sp, r7
 8001542:	bd80      	pop	{r7, pc}
 8001544:	40021000 	.word	0x40021000
 8001548:	40007000 	.word	0x40007000
 800154c:	42420060 	.word	0x42420060

08001550 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001550:	b580      	push	{r7, lr}
 8001552:	b084      	sub	sp, #16
 8001554:	af00      	add	r7, sp, #0
 8001556:	6078      	str	r0, [r7, #4]
 8001558:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	2b00      	cmp	r3, #0
 800155e:	d101      	bne.n	8001564 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001560:	2301      	movs	r3, #1
 8001562:	e0d0      	b.n	8001706 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001564:	4b6a      	ldr	r3, [pc, #424]	; (8001710 <HAL_RCC_ClockConfig+0x1c0>)
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	f003 0307 	and.w	r3, r3, #7
 800156c:	683a      	ldr	r2, [r7, #0]
 800156e:	429a      	cmp	r2, r3
 8001570:	d910      	bls.n	8001594 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001572:	4b67      	ldr	r3, [pc, #412]	; (8001710 <HAL_RCC_ClockConfig+0x1c0>)
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	f023 0207 	bic.w	r2, r3, #7
 800157a:	4965      	ldr	r1, [pc, #404]	; (8001710 <HAL_RCC_ClockConfig+0x1c0>)
 800157c:	683b      	ldr	r3, [r7, #0]
 800157e:	4313      	orrs	r3, r2
 8001580:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001582:	4b63      	ldr	r3, [pc, #396]	; (8001710 <HAL_RCC_ClockConfig+0x1c0>)
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	f003 0307 	and.w	r3, r3, #7
 800158a:	683a      	ldr	r2, [r7, #0]
 800158c:	429a      	cmp	r2, r3
 800158e:	d001      	beq.n	8001594 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001590:	2301      	movs	r3, #1
 8001592:	e0b8      	b.n	8001706 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	f003 0302 	and.w	r3, r3, #2
 800159c:	2b00      	cmp	r3, #0
 800159e:	d020      	beq.n	80015e2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	f003 0304 	and.w	r3, r3, #4
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d005      	beq.n	80015b8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80015ac:	4b59      	ldr	r3, [pc, #356]	; (8001714 <HAL_RCC_ClockConfig+0x1c4>)
 80015ae:	685b      	ldr	r3, [r3, #4]
 80015b0:	4a58      	ldr	r2, [pc, #352]	; (8001714 <HAL_RCC_ClockConfig+0x1c4>)
 80015b2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80015b6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	f003 0308 	and.w	r3, r3, #8
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d005      	beq.n	80015d0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80015c4:	4b53      	ldr	r3, [pc, #332]	; (8001714 <HAL_RCC_ClockConfig+0x1c4>)
 80015c6:	685b      	ldr	r3, [r3, #4]
 80015c8:	4a52      	ldr	r2, [pc, #328]	; (8001714 <HAL_RCC_ClockConfig+0x1c4>)
 80015ca:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80015ce:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80015d0:	4b50      	ldr	r3, [pc, #320]	; (8001714 <HAL_RCC_ClockConfig+0x1c4>)
 80015d2:	685b      	ldr	r3, [r3, #4]
 80015d4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	689b      	ldr	r3, [r3, #8]
 80015dc:	494d      	ldr	r1, [pc, #308]	; (8001714 <HAL_RCC_ClockConfig+0x1c4>)
 80015de:	4313      	orrs	r3, r2
 80015e0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	f003 0301 	and.w	r3, r3, #1
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d040      	beq.n	8001670 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	685b      	ldr	r3, [r3, #4]
 80015f2:	2b01      	cmp	r3, #1
 80015f4:	d107      	bne.n	8001606 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80015f6:	4b47      	ldr	r3, [pc, #284]	; (8001714 <HAL_RCC_ClockConfig+0x1c4>)
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d115      	bne.n	800162e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001602:	2301      	movs	r3, #1
 8001604:	e07f      	b.n	8001706 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	685b      	ldr	r3, [r3, #4]
 800160a:	2b02      	cmp	r3, #2
 800160c:	d107      	bne.n	800161e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800160e:	4b41      	ldr	r3, [pc, #260]	; (8001714 <HAL_RCC_ClockConfig+0x1c4>)
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001616:	2b00      	cmp	r3, #0
 8001618:	d109      	bne.n	800162e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800161a:	2301      	movs	r3, #1
 800161c:	e073      	b.n	8001706 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800161e:	4b3d      	ldr	r3, [pc, #244]	; (8001714 <HAL_RCC_ClockConfig+0x1c4>)
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	f003 0302 	and.w	r3, r3, #2
 8001626:	2b00      	cmp	r3, #0
 8001628:	d101      	bne.n	800162e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800162a:	2301      	movs	r3, #1
 800162c:	e06b      	b.n	8001706 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800162e:	4b39      	ldr	r3, [pc, #228]	; (8001714 <HAL_RCC_ClockConfig+0x1c4>)
 8001630:	685b      	ldr	r3, [r3, #4]
 8001632:	f023 0203 	bic.w	r2, r3, #3
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	685b      	ldr	r3, [r3, #4]
 800163a:	4936      	ldr	r1, [pc, #216]	; (8001714 <HAL_RCC_ClockConfig+0x1c4>)
 800163c:	4313      	orrs	r3, r2
 800163e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001640:	f7ff f9da 	bl	80009f8 <HAL_GetTick>
 8001644:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001646:	e00a      	b.n	800165e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001648:	f7ff f9d6 	bl	80009f8 <HAL_GetTick>
 800164c:	4602      	mov	r2, r0
 800164e:	68fb      	ldr	r3, [r7, #12]
 8001650:	1ad3      	subs	r3, r2, r3
 8001652:	f241 3288 	movw	r2, #5000	; 0x1388
 8001656:	4293      	cmp	r3, r2
 8001658:	d901      	bls.n	800165e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800165a:	2303      	movs	r3, #3
 800165c:	e053      	b.n	8001706 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800165e:	4b2d      	ldr	r3, [pc, #180]	; (8001714 <HAL_RCC_ClockConfig+0x1c4>)
 8001660:	685b      	ldr	r3, [r3, #4]
 8001662:	f003 020c 	and.w	r2, r3, #12
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	685b      	ldr	r3, [r3, #4]
 800166a:	009b      	lsls	r3, r3, #2
 800166c:	429a      	cmp	r2, r3
 800166e:	d1eb      	bne.n	8001648 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001670:	4b27      	ldr	r3, [pc, #156]	; (8001710 <HAL_RCC_ClockConfig+0x1c0>)
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	f003 0307 	and.w	r3, r3, #7
 8001678:	683a      	ldr	r2, [r7, #0]
 800167a:	429a      	cmp	r2, r3
 800167c:	d210      	bcs.n	80016a0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800167e:	4b24      	ldr	r3, [pc, #144]	; (8001710 <HAL_RCC_ClockConfig+0x1c0>)
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	f023 0207 	bic.w	r2, r3, #7
 8001686:	4922      	ldr	r1, [pc, #136]	; (8001710 <HAL_RCC_ClockConfig+0x1c0>)
 8001688:	683b      	ldr	r3, [r7, #0]
 800168a:	4313      	orrs	r3, r2
 800168c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800168e:	4b20      	ldr	r3, [pc, #128]	; (8001710 <HAL_RCC_ClockConfig+0x1c0>)
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	f003 0307 	and.w	r3, r3, #7
 8001696:	683a      	ldr	r2, [r7, #0]
 8001698:	429a      	cmp	r2, r3
 800169a:	d001      	beq.n	80016a0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800169c:	2301      	movs	r3, #1
 800169e:	e032      	b.n	8001706 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	f003 0304 	and.w	r3, r3, #4
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d008      	beq.n	80016be <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80016ac:	4b19      	ldr	r3, [pc, #100]	; (8001714 <HAL_RCC_ClockConfig+0x1c4>)
 80016ae:	685b      	ldr	r3, [r3, #4]
 80016b0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	68db      	ldr	r3, [r3, #12]
 80016b8:	4916      	ldr	r1, [pc, #88]	; (8001714 <HAL_RCC_ClockConfig+0x1c4>)
 80016ba:	4313      	orrs	r3, r2
 80016bc:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	f003 0308 	and.w	r3, r3, #8
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d009      	beq.n	80016de <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80016ca:	4b12      	ldr	r3, [pc, #72]	; (8001714 <HAL_RCC_ClockConfig+0x1c4>)
 80016cc:	685b      	ldr	r3, [r3, #4]
 80016ce:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	691b      	ldr	r3, [r3, #16]
 80016d6:	00db      	lsls	r3, r3, #3
 80016d8:	490e      	ldr	r1, [pc, #56]	; (8001714 <HAL_RCC_ClockConfig+0x1c4>)
 80016da:	4313      	orrs	r3, r2
 80016dc:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80016de:	f000 f821 	bl	8001724 <HAL_RCC_GetSysClockFreq>
 80016e2:	4602      	mov	r2, r0
 80016e4:	4b0b      	ldr	r3, [pc, #44]	; (8001714 <HAL_RCC_ClockConfig+0x1c4>)
 80016e6:	685b      	ldr	r3, [r3, #4]
 80016e8:	091b      	lsrs	r3, r3, #4
 80016ea:	f003 030f 	and.w	r3, r3, #15
 80016ee:	490a      	ldr	r1, [pc, #40]	; (8001718 <HAL_RCC_ClockConfig+0x1c8>)
 80016f0:	5ccb      	ldrb	r3, [r1, r3]
 80016f2:	fa22 f303 	lsr.w	r3, r2, r3
 80016f6:	4a09      	ldr	r2, [pc, #36]	; (800171c <HAL_RCC_ClockConfig+0x1cc>)
 80016f8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80016fa:	4b09      	ldr	r3, [pc, #36]	; (8001720 <HAL_RCC_ClockConfig+0x1d0>)
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	4618      	mov	r0, r3
 8001700:	f7ff f89a 	bl	8000838 <HAL_InitTick>

  return HAL_OK;
 8001704:	2300      	movs	r3, #0
}
 8001706:	4618      	mov	r0, r3
 8001708:	3710      	adds	r7, #16
 800170a:	46bd      	mov	sp, r7
 800170c:	bd80      	pop	{r7, pc}
 800170e:	bf00      	nop
 8001710:	40022000 	.word	0x40022000
 8001714:	40021000 	.word	0x40021000
 8001718:	0800430c 	.word	0x0800430c
 800171c:	20000000 	.word	0x20000000
 8001720:	20000004 	.word	0x20000004

08001724 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001724:	b490      	push	{r4, r7}
 8001726:	b08a      	sub	sp, #40	; 0x28
 8001728:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800172a:	4b2a      	ldr	r3, [pc, #168]	; (80017d4 <HAL_RCC_GetSysClockFreq+0xb0>)
 800172c:	1d3c      	adds	r4, r7, #4
 800172e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001730:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001734:	f240 2301 	movw	r3, #513	; 0x201
 8001738:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800173a:	2300      	movs	r3, #0
 800173c:	61fb      	str	r3, [r7, #28]
 800173e:	2300      	movs	r3, #0
 8001740:	61bb      	str	r3, [r7, #24]
 8001742:	2300      	movs	r3, #0
 8001744:	627b      	str	r3, [r7, #36]	; 0x24
 8001746:	2300      	movs	r3, #0
 8001748:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800174a:	2300      	movs	r3, #0
 800174c:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800174e:	4b22      	ldr	r3, [pc, #136]	; (80017d8 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001750:	685b      	ldr	r3, [r3, #4]
 8001752:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001754:	69fb      	ldr	r3, [r7, #28]
 8001756:	f003 030c 	and.w	r3, r3, #12
 800175a:	2b04      	cmp	r3, #4
 800175c:	d002      	beq.n	8001764 <HAL_RCC_GetSysClockFreq+0x40>
 800175e:	2b08      	cmp	r3, #8
 8001760:	d003      	beq.n	800176a <HAL_RCC_GetSysClockFreq+0x46>
 8001762:	e02d      	b.n	80017c0 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001764:	4b1d      	ldr	r3, [pc, #116]	; (80017dc <HAL_RCC_GetSysClockFreq+0xb8>)
 8001766:	623b      	str	r3, [r7, #32]
      break;
 8001768:	e02d      	b.n	80017c6 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800176a:	69fb      	ldr	r3, [r7, #28]
 800176c:	0c9b      	lsrs	r3, r3, #18
 800176e:	f003 030f 	and.w	r3, r3, #15
 8001772:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001776:	4413      	add	r3, r2
 8001778:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800177c:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800177e:	69fb      	ldr	r3, [r7, #28]
 8001780:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001784:	2b00      	cmp	r3, #0
 8001786:	d013      	beq.n	80017b0 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001788:	4b13      	ldr	r3, [pc, #76]	; (80017d8 <HAL_RCC_GetSysClockFreq+0xb4>)
 800178a:	685b      	ldr	r3, [r3, #4]
 800178c:	0c5b      	lsrs	r3, r3, #17
 800178e:	f003 0301 	and.w	r3, r3, #1
 8001792:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001796:	4413      	add	r3, r2
 8001798:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800179c:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800179e:	697b      	ldr	r3, [r7, #20]
 80017a0:	4a0e      	ldr	r2, [pc, #56]	; (80017dc <HAL_RCC_GetSysClockFreq+0xb8>)
 80017a2:	fb02 f203 	mul.w	r2, r2, r3
 80017a6:	69bb      	ldr	r3, [r7, #24]
 80017a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80017ac:	627b      	str	r3, [r7, #36]	; 0x24
 80017ae:	e004      	b.n	80017ba <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80017b0:	697b      	ldr	r3, [r7, #20]
 80017b2:	4a0b      	ldr	r2, [pc, #44]	; (80017e0 <HAL_RCC_GetSysClockFreq+0xbc>)
 80017b4:	fb02 f303 	mul.w	r3, r2, r3
 80017b8:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80017ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017bc:	623b      	str	r3, [r7, #32]
      break;
 80017be:	e002      	b.n	80017c6 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80017c0:	4b06      	ldr	r3, [pc, #24]	; (80017dc <HAL_RCC_GetSysClockFreq+0xb8>)
 80017c2:	623b      	str	r3, [r7, #32]
      break;
 80017c4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80017c6:	6a3b      	ldr	r3, [r7, #32]
}
 80017c8:	4618      	mov	r0, r3
 80017ca:	3728      	adds	r7, #40	; 0x28
 80017cc:	46bd      	mov	sp, r7
 80017ce:	bc90      	pop	{r4, r7}
 80017d0:	4770      	bx	lr
 80017d2:	bf00      	nop
 80017d4:	080042f4 	.word	0x080042f4
 80017d8:	40021000 	.word	0x40021000
 80017dc:	007a1200 	.word	0x007a1200
 80017e0:	003d0900 	.word	0x003d0900

080017e4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80017e4:	b480      	push	{r7}
 80017e6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80017e8:	4b02      	ldr	r3, [pc, #8]	; (80017f4 <HAL_RCC_GetHCLKFreq+0x10>)
 80017ea:	681b      	ldr	r3, [r3, #0]
}
 80017ec:	4618      	mov	r0, r3
 80017ee:	46bd      	mov	sp, r7
 80017f0:	bc80      	pop	{r7}
 80017f2:	4770      	bx	lr
 80017f4:	20000000 	.word	0x20000000

080017f8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80017f8:	b580      	push	{r7, lr}
 80017fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80017fc:	f7ff fff2 	bl	80017e4 <HAL_RCC_GetHCLKFreq>
 8001800:	4602      	mov	r2, r0
 8001802:	4b05      	ldr	r3, [pc, #20]	; (8001818 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001804:	685b      	ldr	r3, [r3, #4]
 8001806:	0a1b      	lsrs	r3, r3, #8
 8001808:	f003 0307 	and.w	r3, r3, #7
 800180c:	4903      	ldr	r1, [pc, #12]	; (800181c <HAL_RCC_GetPCLK1Freq+0x24>)
 800180e:	5ccb      	ldrb	r3, [r1, r3]
 8001810:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001814:	4618      	mov	r0, r3
 8001816:	bd80      	pop	{r7, pc}
 8001818:	40021000 	.word	0x40021000
 800181c:	0800431c 	.word	0x0800431c

08001820 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001820:	b580      	push	{r7, lr}
 8001822:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001824:	f7ff ffde 	bl	80017e4 <HAL_RCC_GetHCLKFreq>
 8001828:	4602      	mov	r2, r0
 800182a:	4b05      	ldr	r3, [pc, #20]	; (8001840 <HAL_RCC_GetPCLK2Freq+0x20>)
 800182c:	685b      	ldr	r3, [r3, #4]
 800182e:	0adb      	lsrs	r3, r3, #11
 8001830:	f003 0307 	and.w	r3, r3, #7
 8001834:	4903      	ldr	r1, [pc, #12]	; (8001844 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001836:	5ccb      	ldrb	r3, [r1, r3]
 8001838:	fa22 f303 	lsr.w	r3, r2, r3
}
 800183c:	4618      	mov	r0, r3
 800183e:	bd80      	pop	{r7, pc}
 8001840:	40021000 	.word	0x40021000
 8001844:	0800431c 	.word	0x0800431c

08001848 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001848:	b480      	push	{r7}
 800184a:	b083      	sub	sp, #12
 800184c:	af00      	add	r7, sp, #0
 800184e:	6078      	str	r0, [r7, #4]
 8001850:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	220f      	movs	r2, #15
 8001856:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001858:	4b11      	ldr	r3, [pc, #68]	; (80018a0 <HAL_RCC_GetClockConfig+0x58>)
 800185a:	685b      	ldr	r3, [r3, #4]
 800185c:	f003 0203 	and.w	r2, r3, #3
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001864:	4b0e      	ldr	r3, [pc, #56]	; (80018a0 <HAL_RCC_GetClockConfig+0x58>)
 8001866:	685b      	ldr	r3, [r3, #4]
 8001868:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001870:	4b0b      	ldr	r3, [pc, #44]	; (80018a0 <HAL_RCC_GetClockConfig+0x58>)
 8001872:	685b      	ldr	r3, [r3, #4]
 8001874:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 800187c:	4b08      	ldr	r3, [pc, #32]	; (80018a0 <HAL_RCC_GetClockConfig+0x58>)
 800187e:	685b      	ldr	r3, [r3, #4]
 8001880:	08db      	lsrs	r3, r3, #3
 8001882:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800188a:	4b06      	ldr	r3, [pc, #24]	; (80018a4 <HAL_RCC_GetClockConfig+0x5c>)
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	f003 0207 	and.w	r2, r3, #7
 8001892:	683b      	ldr	r3, [r7, #0]
 8001894:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 8001896:	bf00      	nop
 8001898:	370c      	adds	r7, #12
 800189a:	46bd      	mov	sp, r7
 800189c:	bc80      	pop	{r7}
 800189e:	4770      	bx	lr
 80018a0:	40021000 	.word	0x40021000
 80018a4:	40022000 	.word	0x40022000

080018a8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80018a8:	b480      	push	{r7}
 80018aa:	b085      	sub	sp, #20
 80018ac:	af00      	add	r7, sp, #0
 80018ae:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80018b0:	4b0a      	ldr	r3, [pc, #40]	; (80018dc <RCC_Delay+0x34>)
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	4a0a      	ldr	r2, [pc, #40]	; (80018e0 <RCC_Delay+0x38>)
 80018b6:	fba2 2303 	umull	r2, r3, r2, r3
 80018ba:	0a5b      	lsrs	r3, r3, #9
 80018bc:	687a      	ldr	r2, [r7, #4]
 80018be:	fb02 f303 	mul.w	r3, r2, r3
 80018c2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80018c4:	bf00      	nop
  }
  while (Delay --);
 80018c6:	68fb      	ldr	r3, [r7, #12]
 80018c8:	1e5a      	subs	r2, r3, #1
 80018ca:	60fa      	str	r2, [r7, #12]
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d1f9      	bne.n	80018c4 <RCC_Delay+0x1c>
}
 80018d0:	bf00      	nop
 80018d2:	bf00      	nop
 80018d4:	3714      	adds	r7, #20
 80018d6:	46bd      	mov	sp, r7
 80018d8:	bc80      	pop	{r7}
 80018da:	4770      	bx	lr
 80018dc:	20000000 	.word	0x20000000
 80018e0:	10624dd3 	.word	0x10624dd3

080018e4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80018e4:	b580      	push	{r7, lr}
 80018e6:	b082      	sub	sp, #8
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d101      	bne.n	80018f6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80018f2:	2301      	movs	r3, #1
 80018f4:	e041      	b.n	800197a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80018fc:	b2db      	uxtb	r3, r3
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d106      	bne.n	8001910 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	2200      	movs	r2, #0
 8001906:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800190a:	6878      	ldr	r0, [r7, #4]
 800190c:	f000 f839 	bl	8001982 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	2202      	movs	r2, #2
 8001914:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	681a      	ldr	r2, [r3, #0]
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	3304      	adds	r3, #4
 8001920:	4619      	mov	r1, r3
 8001922:	4610      	mov	r0, r2
 8001924:	f000 f9b4 	bl	8001c90 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	2201      	movs	r2, #1
 800192c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	2201      	movs	r2, #1
 8001934:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	2201      	movs	r2, #1
 800193c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	2201      	movs	r2, #1
 8001944:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	2201      	movs	r2, #1
 800194c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	2201      	movs	r2, #1
 8001954:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	2201      	movs	r2, #1
 800195c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	2201      	movs	r2, #1
 8001964:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	2201      	movs	r2, #1
 800196c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	2201      	movs	r2, #1
 8001974:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001978:	2300      	movs	r3, #0
}
 800197a:	4618      	mov	r0, r3
 800197c:	3708      	adds	r7, #8
 800197e:	46bd      	mov	sp, r7
 8001980:	bd80      	pop	{r7, pc}

08001982 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001982:	b480      	push	{r7}
 8001984:	b083      	sub	sp, #12
 8001986:	af00      	add	r7, sp, #0
 8001988:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800198a:	bf00      	nop
 800198c:	370c      	adds	r7, #12
 800198e:	46bd      	mov	sp, r7
 8001990:	bc80      	pop	{r7}
 8001992:	4770      	bx	lr

08001994 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001994:	b480      	push	{r7}
 8001996:	b085      	sub	sp, #20
 8001998:	af00      	add	r7, sp, #0
 800199a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80019a2:	b2db      	uxtb	r3, r3
 80019a4:	2b01      	cmp	r3, #1
 80019a6:	d001      	beq.n	80019ac <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80019a8:	2301      	movs	r3, #1
 80019aa:	e03a      	b.n	8001a22 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	2202      	movs	r2, #2
 80019b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	68da      	ldr	r2, [r3, #12]
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	f042 0201 	orr.w	r2, r2, #1
 80019c2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	4a18      	ldr	r2, [pc, #96]	; (8001a2c <HAL_TIM_Base_Start_IT+0x98>)
 80019ca:	4293      	cmp	r3, r2
 80019cc:	d00e      	beq.n	80019ec <HAL_TIM_Base_Start_IT+0x58>
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80019d6:	d009      	beq.n	80019ec <HAL_TIM_Base_Start_IT+0x58>
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	4a14      	ldr	r2, [pc, #80]	; (8001a30 <HAL_TIM_Base_Start_IT+0x9c>)
 80019de:	4293      	cmp	r3, r2
 80019e0:	d004      	beq.n	80019ec <HAL_TIM_Base_Start_IT+0x58>
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	4a13      	ldr	r2, [pc, #76]	; (8001a34 <HAL_TIM_Base_Start_IT+0xa0>)
 80019e8:	4293      	cmp	r3, r2
 80019ea:	d111      	bne.n	8001a10 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	689b      	ldr	r3, [r3, #8]
 80019f2:	f003 0307 	and.w	r3, r3, #7
 80019f6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80019f8:	68fb      	ldr	r3, [r7, #12]
 80019fa:	2b06      	cmp	r3, #6
 80019fc:	d010      	beq.n	8001a20 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	681a      	ldr	r2, [r3, #0]
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	f042 0201 	orr.w	r2, r2, #1
 8001a0c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001a0e:	e007      	b.n	8001a20 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	681a      	ldr	r2, [r3, #0]
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	f042 0201 	orr.w	r2, r2, #1
 8001a1e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001a20:	2300      	movs	r3, #0
}
 8001a22:	4618      	mov	r0, r3
 8001a24:	3714      	adds	r7, #20
 8001a26:	46bd      	mov	sp, r7
 8001a28:	bc80      	pop	{r7}
 8001a2a:	4770      	bx	lr
 8001a2c:	40012c00 	.word	0x40012c00
 8001a30:	40000400 	.word	0x40000400
 8001a34:	40000800 	.word	0x40000800

08001a38 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	b082      	sub	sp, #8
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	691b      	ldr	r3, [r3, #16]
 8001a46:	f003 0302 	and.w	r3, r3, #2
 8001a4a:	2b02      	cmp	r3, #2
 8001a4c:	d122      	bne.n	8001a94 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	68db      	ldr	r3, [r3, #12]
 8001a54:	f003 0302 	and.w	r3, r3, #2
 8001a58:	2b02      	cmp	r3, #2
 8001a5a:	d11b      	bne.n	8001a94 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	f06f 0202 	mvn.w	r2, #2
 8001a64:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	2201      	movs	r2, #1
 8001a6a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	699b      	ldr	r3, [r3, #24]
 8001a72:	f003 0303 	and.w	r3, r3, #3
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d003      	beq.n	8001a82 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001a7a:	6878      	ldr	r0, [r7, #4]
 8001a7c:	f000 f8ed 	bl	8001c5a <HAL_TIM_IC_CaptureCallback>
 8001a80:	e005      	b.n	8001a8e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001a82:	6878      	ldr	r0, [r7, #4]
 8001a84:	f000 f8e0 	bl	8001c48 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001a88:	6878      	ldr	r0, [r7, #4]
 8001a8a:	f000 f8ef 	bl	8001c6c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	2200      	movs	r2, #0
 8001a92:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	691b      	ldr	r3, [r3, #16]
 8001a9a:	f003 0304 	and.w	r3, r3, #4
 8001a9e:	2b04      	cmp	r3, #4
 8001aa0:	d122      	bne.n	8001ae8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	68db      	ldr	r3, [r3, #12]
 8001aa8:	f003 0304 	and.w	r3, r3, #4
 8001aac:	2b04      	cmp	r3, #4
 8001aae:	d11b      	bne.n	8001ae8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	f06f 0204 	mvn.w	r2, #4
 8001ab8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	2202      	movs	r2, #2
 8001abe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	699b      	ldr	r3, [r3, #24]
 8001ac6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d003      	beq.n	8001ad6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001ace:	6878      	ldr	r0, [r7, #4]
 8001ad0:	f000 f8c3 	bl	8001c5a <HAL_TIM_IC_CaptureCallback>
 8001ad4:	e005      	b.n	8001ae2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001ad6:	6878      	ldr	r0, [r7, #4]
 8001ad8:	f000 f8b6 	bl	8001c48 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001adc:	6878      	ldr	r0, [r7, #4]
 8001ade:	f000 f8c5 	bl	8001c6c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	2200      	movs	r2, #0
 8001ae6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	691b      	ldr	r3, [r3, #16]
 8001aee:	f003 0308 	and.w	r3, r3, #8
 8001af2:	2b08      	cmp	r3, #8
 8001af4:	d122      	bne.n	8001b3c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	68db      	ldr	r3, [r3, #12]
 8001afc:	f003 0308 	and.w	r3, r3, #8
 8001b00:	2b08      	cmp	r3, #8
 8001b02:	d11b      	bne.n	8001b3c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	f06f 0208 	mvn.w	r2, #8
 8001b0c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	2204      	movs	r2, #4
 8001b12:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	69db      	ldr	r3, [r3, #28]
 8001b1a:	f003 0303 	and.w	r3, r3, #3
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d003      	beq.n	8001b2a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001b22:	6878      	ldr	r0, [r7, #4]
 8001b24:	f000 f899 	bl	8001c5a <HAL_TIM_IC_CaptureCallback>
 8001b28:	e005      	b.n	8001b36 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001b2a:	6878      	ldr	r0, [r7, #4]
 8001b2c:	f000 f88c 	bl	8001c48 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001b30:	6878      	ldr	r0, [r7, #4]
 8001b32:	f000 f89b 	bl	8001c6c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	2200      	movs	r2, #0
 8001b3a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	691b      	ldr	r3, [r3, #16]
 8001b42:	f003 0310 	and.w	r3, r3, #16
 8001b46:	2b10      	cmp	r3, #16
 8001b48:	d122      	bne.n	8001b90 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	68db      	ldr	r3, [r3, #12]
 8001b50:	f003 0310 	and.w	r3, r3, #16
 8001b54:	2b10      	cmp	r3, #16
 8001b56:	d11b      	bne.n	8001b90 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	f06f 0210 	mvn.w	r2, #16
 8001b60:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	2208      	movs	r2, #8
 8001b66:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	69db      	ldr	r3, [r3, #28]
 8001b6e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d003      	beq.n	8001b7e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001b76:	6878      	ldr	r0, [r7, #4]
 8001b78:	f000 f86f 	bl	8001c5a <HAL_TIM_IC_CaptureCallback>
 8001b7c:	e005      	b.n	8001b8a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001b7e:	6878      	ldr	r0, [r7, #4]
 8001b80:	f000 f862 	bl	8001c48 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001b84:	6878      	ldr	r0, [r7, #4]
 8001b86:	f000 f871 	bl	8001c6c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	2200      	movs	r2, #0
 8001b8e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	691b      	ldr	r3, [r3, #16]
 8001b96:	f003 0301 	and.w	r3, r3, #1
 8001b9a:	2b01      	cmp	r3, #1
 8001b9c:	d10e      	bne.n	8001bbc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	68db      	ldr	r3, [r3, #12]
 8001ba4:	f003 0301 	and.w	r3, r3, #1
 8001ba8:	2b01      	cmp	r3, #1
 8001baa:	d107      	bne.n	8001bbc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	f06f 0201 	mvn.w	r2, #1
 8001bb4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001bb6:	6878      	ldr	r0, [r7, #4]
 8001bb8:	f7fe fd64 	bl	8000684 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	691b      	ldr	r3, [r3, #16]
 8001bc2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001bc6:	2b80      	cmp	r3, #128	; 0x80
 8001bc8:	d10e      	bne.n	8001be8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	68db      	ldr	r3, [r3, #12]
 8001bd0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001bd4:	2b80      	cmp	r3, #128	; 0x80
 8001bd6:	d107      	bne.n	8001be8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001be0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001be2:	6878      	ldr	r0, [r7, #4]
 8001be4:	f000 f8bf 	bl	8001d66 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	691b      	ldr	r3, [r3, #16]
 8001bee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001bf2:	2b40      	cmp	r3, #64	; 0x40
 8001bf4:	d10e      	bne.n	8001c14 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	68db      	ldr	r3, [r3, #12]
 8001bfc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001c00:	2b40      	cmp	r3, #64	; 0x40
 8001c02:	d107      	bne.n	8001c14 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001c0c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001c0e:	6878      	ldr	r0, [r7, #4]
 8001c10:	f000 f835 	bl	8001c7e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	691b      	ldr	r3, [r3, #16]
 8001c1a:	f003 0320 	and.w	r3, r3, #32
 8001c1e:	2b20      	cmp	r3, #32
 8001c20:	d10e      	bne.n	8001c40 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	68db      	ldr	r3, [r3, #12]
 8001c28:	f003 0320 	and.w	r3, r3, #32
 8001c2c:	2b20      	cmp	r3, #32
 8001c2e:	d107      	bne.n	8001c40 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	f06f 0220 	mvn.w	r2, #32
 8001c38:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001c3a:	6878      	ldr	r0, [r7, #4]
 8001c3c:	f000 f88a 	bl	8001d54 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001c40:	bf00      	nop
 8001c42:	3708      	adds	r7, #8
 8001c44:	46bd      	mov	sp, r7
 8001c46:	bd80      	pop	{r7, pc}

08001c48 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001c48:	b480      	push	{r7}
 8001c4a:	b083      	sub	sp, #12
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001c50:	bf00      	nop
 8001c52:	370c      	adds	r7, #12
 8001c54:	46bd      	mov	sp, r7
 8001c56:	bc80      	pop	{r7}
 8001c58:	4770      	bx	lr

08001c5a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001c5a:	b480      	push	{r7}
 8001c5c:	b083      	sub	sp, #12
 8001c5e:	af00      	add	r7, sp, #0
 8001c60:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001c62:	bf00      	nop
 8001c64:	370c      	adds	r7, #12
 8001c66:	46bd      	mov	sp, r7
 8001c68:	bc80      	pop	{r7}
 8001c6a:	4770      	bx	lr

08001c6c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001c6c:	b480      	push	{r7}
 8001c6e:	b083      	sub	sp, #12
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001c74:	bf00      	nop
 8001c76:	370c      	adds	r7, #12
 8001c78:	46bd      	mov	sp, r7
 8001c7a:	bc80      	pop	{r7}
 8001c7c:	4770      	bx	lr

08001c7e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001c7e:	b480      	push	{r7}
 8001c80:	b083      	sub	sp, #12
 8001c82:	af00      	add	r7, sp, #0
 8001c84:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001c86:	bf00      	nop
 8001c88:	370c      	adds	r7, #12
 8001c8a:	46bd      	mov	sp, r7
 8001c8c:	bc80      	pop	{r7}
 8001c8e:	4770      	bx	lr

08001c90 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001c90:	b480      	push	{r7}
 8001c92:	b085      	sub	sp, #20
 8001c94:	af00      	add	r7, sp, #0
 8001c96:	6078      	str	r0, [r7, #4]
 8001c98:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	4a29      	ldr	r2, [pc, #164]	; (8001d48 <TIM_Base_SetConfig+0xb8>)
 8001ca4:	4293      	cmp	r3, r2
 8001ca6:	d00b      	beq.n	8001cc0 <TIM_Base_SetConfig+0x30>
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001cae:	d007      	beq.n	8001cc0 <TIM_Base_SetConfig+0x30>
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	4a26      	ldr	r2, [pc, #152]	; (8001d4c <TIM_Base_SetConfig+0xbc>)
 8001cb4:	4293      	cmp	r3, r2
 8001cb6:	d003      	beq.n	8001cc0 <TIM_Base_SetConfig+0x30>
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	4a25      	ldr	r2, [pc, #148]	; (8001d50 <TIM_Base_SetConfig+0xc0>)
 8001cbc:	4293      	cmp	r3, r2
 8001cbe:	d108      	bne.n	8001cd2 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001cc6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001cc8:	683b      	ldr	r3, [r7, #0]
 8001cca:	685b      	ldr	r3, [r3, #4]
 8001ccc:	68fa      	ldr	r2, [r7, #12]
 8001cce:	4313      	orrs	r3, r2
 8001cd0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	4a1c      	ldr	r2, [pc, #112]	; (8001d48 <TIM_Base_SetConfig+0xb8>)
 8001cd6:	4293      	cmp	r3, r2
 8001cd8:	d00b      	beq.n	8001cf2 <TIM_Base_SetConfig+0x62>
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001ce0:	d007      	beq.n	8001cf2 <TIM_Base_SetConfig+0x62>
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	4a19      	ldr	r2, [pc, #100]	; (8001d4c <TIM_Base_SetConfig+0xbc>)
 8001ce6:	4293      	cmp	r3, r2
 8001ce8:	d003      	beq.n	8001cf2 <TIM_Base_SetConfig+0x62>
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	4a18      	ldr	r2, [pc, #96]	; (8001d50 <TIM_Base_SetConfig+0xc0>)
 8001cee:	4293      	cmp	r3, r2
 8001cf0:	d108      	bne.n	8001d04 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001cf8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001cfa:	683b      	ldr	r3, [r7, #0]
 8001cfc:	68db      	ldr	r3, [r3, #12]
 8001cfe:	68fa      	ldr	r2, [r7, #12]
 8001d00:	4313      	orrs	r3, r2
 8001d02:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001d0a:	683b      	ldr	r3, [r7, #0]
 8001d0c:	695b      	ldr	r3, [r3, #20]
 8001d0e:	4313      	orrs	r3, r2
 8001d10:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	68fa      	ldr	r2, [r7, #12]
 8001d16:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001d18:	683b      	ldr	r3, [r7, #0]
 8001d1a:	689a      	ldr	r2, [r3, #8]
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001d20:	683b      	ldr	r3, [r7, #0]
 8001d22:	681a      	ldr	r2, [r3, #0]
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	4a07      	ldr	r2, [pc, #28]	; (8001d48 <TIM_Base_SetConfig+0xb8>)
 8001d2c:	4293      	cmp	r3, r2
 8001d2e:	d103      	bne.n	8001d38 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001d30:	683b      	ldr	r3, [r7, #0]
 8001d32:	691a      	ldr	r2, [r3, #16]
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	2201      	movs	r2, #1
 8001d3c:	615a      	str	r2, [r3, #20]
}
 8001d3e:	bf00      	nop
 8001d40:	3714      	adds	r7, #20
 8001d42:	46bd      	mov	sp, r7
 8001d44:	bc80      	pop	{r7}
 8001d46:	4770      	bx	lr
 8001d48:	40012c00 	.word	0x40012c00
 8001d4c:	40000400 	.word	0x40000400
 8001d50:	40000800 	.word	0x40000800

08001d54 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001d54:	b480      	push	{r7}
 8001d56:	b083      	sub	sp, #12
 8001d58:	af00      	add	r7, sp, #0
 8001d5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001d5c:	bf00      	nop
 8001d5e:	370c      	adds	r7, #12
 8001d60:	46bd      	mov	sp, r7
 8001d62:	bc80      	pop	{r7}
 8001d64:	4770      	bx	lr

08001d66 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001d66:	b480      	push	{r7}
 8001d68:	b083      	sub	sp, #12
 8001d6a:	af00      	add	r7, sp, #0
 8001d6c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001d6e:	bf00      	nop
 8001d70:	370c      	adds	r7, #12
 8001d72:	46bd      	mov	sp, r7
 8001d74:	bc80      	pop	{r7}
 8001d76:	4770      	bx	lr

08001d78 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001d78:	b580      	push	{r7, lr}
 8001d7a:	b082      	sub	sp, #8
 8001d7c:	af00      	add	r7, sp, #0
 8001d7e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d101      	bne.n	8001d8a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001d86:	2301      	movs	r3, #1
 8001d88:	e03f      	b.n	8001e0a <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001d90:	b2db      	uxtb	r3, r3
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d106      	bne.n	8001da4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	2200      	movs	r2, #0
 8001d9a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001d9e:	6878      	ldr	r0, [r7, #4]
 8001da0:	f7fe fcb6 	bl	8000710 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	2224      	movs	r2, #36	; 0x24
 8001da8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	68da      	ldr	r2, [r3, #12]
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001dba:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001dbc:	6878      	ldr	r0, [r7, #4]
 8001dbe:	f000 fb83 	bl	80024c8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	691a      	ldr	r2, [r3, #16]
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001dd0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	695a      	ldr	r2, [r3, #20]
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001de0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	68da      	ldr	r2, [r3, #12]
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001df0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	2200      	movs	r2, #0
 8001df6:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	2220      	movs	r2, #32
 8001dfc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	2220      	movs	r2, #32
 8001e04:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8001e08:	2300      	movs	r3, #0
}
 8001e0a:	4618      	mov	r0, r3
 8001e0c:	3708      	adds	r7, #8
 8001e0e:	46bd      	mov	sp, r7
 8001e10:	bd80      	pop	{r7, pc}

08001e12 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001e12:	b580      	push	{r7, lr}
 8001e14:	b08a      	sub	sp, #40	; 0x28
 8001e16:	af02      	add	r7, sp, #8
 8001e18:	60f8      	str	r0, [r7, #12]
 8001e1a:	60b9      	str	r1, [r7, #8]
 8001e1c:	603b      	str	r3, [r7, #0]
 8001e1e:	4613      	mov	r3, r2
 8001e20:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8001e22:	2300      	movs	r3, #0
 8001e24:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001e2c:	b2db      	uxtb	r3, r3
 8001e2e:	2b20      	cmp	r3, #32
 8001e30:	d17c      	bne.n	8001f2c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8001e32:	68bb      	ldr	r3, [r7, #8]
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d002      	beq.n	8001e3e <HAL_UART_Transmit+0x2c>
 8001e38:	88fb      	ldrh	r3, [r7, #6]
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d101      	bne.n	8001e42 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8001e3e:	2301      	movs	r3, #1
 8001e40:	e075      	b.n	8001f2e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001e48:	2b01      	cmp	r3, #1
 8001e4a:	d101      	bne.n	8001e50 <HAL_UART_Transmit+0x3e>
 8001e4c:	2302      	movs	r3, #2
 8001e4e:	e06e      	b.n	8001f2e <HAL_UART_Transmit+0x11c>
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	2201      	movs	r2, #1
 8001e54:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	2200      	movs	r2, #0
 8001e5c:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	2221      	movs	r2, #33	; 0x21
 8001e62:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8001e66:	f7fe fdc7 	bl	80009f8 <HAL_GetTick>
 8001e6a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	88fa      	ldrh	r2, [r7, #6]
 8001e70:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	88fa      	ldrh	r2, [r7, #6]
 8001e76:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	689b      	ldr	r3, [r3, #8]
 8001e7c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001e80:	d108      	bne.n	8001e94 <HAL_UART_Transmit+0x82>
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	691b      	ldr	r3, [r3, #16]
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d104      	bne.n	8001e94 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8001e8a:	2300      	movs	r3, #0
 8001e8c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8001e8e:	68bb      	ldr	r3, [r7, #8]
 8001e90:	61bb      	str	r3, [r7, #24]
 8001e92:	e003      	b.n	8001e9c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8001e94:	68bb      	ldr	r3, [r7, #8]
 8001e96:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001e98:	2300      	movs	r3, #0
 8001e9a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	2200      	movs	r2, #0
 8001ea0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8001ea4:	e02a      	b.n	8001efc <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001ea6:	683b      	ldr	r3, [r7, #0]
 8001ea8:	9300      	str	r3, [sp, #0]
 8001eaa:	697b      	ldr	r3, [r7, #20]
 8001eac:	2200      	movs	r2, #0
 8001eae:	2180      	movs	r1, #128	; 0x80
 8001eb0:	68f8      	ldr	r0, [r7, #12]
 8001eb2:	f000 f9a7 	bl	8002204 <UART_WaitOnFlagUntilTimeout>
 8001eb6:	4603      	mov	r3, r0
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d001      	beq.n	8001ec0 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8001ebc:	2303      	movs	r3, #3
 8001ebe:	e036      	b.n	8001f2e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8001ec0:	69fb      	ldr	r3, [r7, #28]
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d10b      	bne.n	8001ede <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001ec6:	69bb      	ldr	r3, [r7, #24]
 8001ec8:	881b      	ldrh	r3, [r3, #0]
 8001eca:	461a      	mov	r2, r3
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001ed4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8001ed6:	69bb      	ldr	r3, [r7, #24]
 8001ed8:	3302      	adds	r3, #2
 8001eda:	61bb      	str	r3, [r7, #24]
 8001edc:	e007      	b.n	8001eee <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8001ede:	69fb      	ldr	r3, [r7, #28]
 8001ee0:	781a      	ldrb	r2, [r3, #0]
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8001ee8:	69fb      	ldr	r3, [r7, #28]
 8001eea:	3301      	adds	r3, #1
 8001eec:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001ef2:	b29b      	uxth	r3, r3
 8001ef4:	3b01      	subs	r3, #1
 8001ef6:	b29a      	uxth	r2, r3
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001f00:	b29b      	uxth	r3, r3
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d1cf      	bne.n	8001ea6 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001f06:	683b      	ldr	r3, [r7, #0]
 8001f08:	9300      	str	r3, [sp, #0]
 8001f0a:	697b      	ldr	r3, [r7, #20]
 8001f0c:	2200      	movs	r2, #0
 8001f0e:	2140      	movs	r1, #64	; 0x40
 8001f10:	68f8      	ldr	r0, [r7, #12]
 8001f12:	f000 f977 	bl	8002204 <UART_WaitOnFlagUntilTimeout>
 8001f16:	4603      	mov	r3, r0
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d001      	beq.n	8001f20 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8001f1c:	2303      	movs	r3, #3
 8001f1e:	e006      	b.n	8001f2e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	2220      	movs	r2, #32
 8001f24:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8001f28:	2300      	movs	r3, #0
 8001f2a:	e000      	b.n	8001f2e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8001f2c:	2302      	movs	r3, #2
  }
}
 8001f2e:	4618      	mov	r0, r3
 8001f30:	3720      	adds	r7, #32
 8001f32:	46bd      	mov	sp, r7
 8001f34:	bd80      	pop	{r7, pc}

08001f36 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8001f36:	b480      	push	{r7}
 8001f38:	b085      	sub	sp, #20
 8001f3a:	af00      	add	r7, sp, #0
 8001f3c:	60f8      	str	r0, [r7, #12]
 8001f3e:	60b9      	str	r1, [r7, #8]
 8001f40:	4613      	mov	r3, r2
 8001f42:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8001f4a:	b2db      	uxtb	r3, r3
 8001f4c:	2b20      	cmp	r3, #32
 8001f4e:	d140      	bne.n	8001fd2 <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 8001f50:	68bb      	ldr	r3, [r7, #8]
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d002      	beq.n	8001f5c <HAL_UART_Receive_IT+0x26>
 8001f56:	88fb      	ldrh	r3, [r7, #6]
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d101      	bne.n	8001f60 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8001f5c:	2301      	movs	r3, #1
 8001f5e:	e039      	b.n	8001fd4 <HAL_UART_Receive_IT+0x9e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001f66:	2b01      	cmp	r3, #1
 8001f68:	d101      	bne.n	8001f6e <HAL_UART_Receive_IT+0x38>
 8001f6a:	2302      	movs	r3, #2
 8001f6c:	e032      	b.n	8001fd4 <HAL_UART_Receive_IT+0x9e>
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	2201      	movs	r2, #1
 8001f72:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	68ba      	ldr	r2, [r7, #8]
 8001f7a:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	88fa      	ldrh	r2, [r7, #6]
 8001f80:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	88fa      	ldrh	r2, [r7, #6]
 8001f86:	85da      	strh	r2, [r3, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	2200      	movs	r2, #0
 8001f8c:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	2222      	movs	r2, #34	; 0x22
 8001f92:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	2200      	movs	r2, #0
 8001f9a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	68da      	ldr	r2, [r3, #12]
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001fac:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	695a      	ldr	r2, [r3, #20]
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	f042 0201 	orr.w	r2, r2, #1
 8001fbc:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	68da      	ldr	r2, [r3, #12]
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	f042 0220 	orr.w	r2, r2, #32
 8001fcc:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8001fce:	2300      	movs	r3, #0
 8001fd0:	e000      	b.n	8001fd4 <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8001fd2:	2302      	movs	r3, #2
  }
}
 8001fd4:	4618      	mov	r0, r3
 8001fd6:	3714      	adds	r7, #20
 8001fd8:	46bd      	mov	sp, r7
 8001fda:	bc80      	pop	{r7}
 8001fdc:	4770      	bx	lr
	...

08001fe0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8001fe0:	b580      	push	{r7, lr}
 8001fe2:	b088      	sub	sp, #32
 8001fe4:	af00      	add	r7, sp, #0
 8001fe6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	68db      	ldr	r3, [r3, #12]
 8001ff6:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	695b      	ldr	r3, [r3, #20]
 8001ffe:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8002000:	2300      	movs	r3, #0
 8002002:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8002004:	2300      	movs	r3, #0
 8002006:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002008:	69fb      	ldr	r3, [r7, #28]
 800200a:	f003 030f 	and.w	r3, r3, #15
 800200e:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8002010:	693b      	ldr	r3, [r7, #16]
 8002012:	2b00      	cmp	r3, #0
 8002014:	d10d      	bne.n	8002032 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002016:	69fb      	ldr	r3, [r7, #28]
 8002018:	f003 0320 	and.w	r3, r3, #32
 800201c:	2b00      	cmp	r3, #0
 800201e:	d008      	beq.n	8002032 <HAL_UART_IRQHandler+0x52>
 8002020:	69bb      	ldr	r3, [r7, #24]
 8002022:	f003 0320 	and.w	r3, r3, #32
 8002026:	2b00      	cmp	r3, #0
 8002028:	d003      	beq.n	8002032 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 800202a:	6878      	ldr	r0, [r7, #4]
 800202c:	f000 f9cc 	bl	80023c8 <UART_Receive_IT>
      return;
 8002030:	e0d0      	b.n	80021d4 <HAL_UART_IRQHandler+0x1f4>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002032:	693b      	ldr	r3, [r7, #16]
 8002034:	2b00      	cmp	r3, #0
 8002036:	f000 80b0 	beq.w	800219a <HAL_UART_IRQHandler+0x1ba>
 800203a:	697b      	ldr	r3, [r7, #20]
 800203c:	f003 0301 	and.w	r3, r3, #1
 8002040:	2b00      	cmp	r3, #0
 8002042:	d105      	bne.n	8002050 <HAL_UART_IRQHandler+0x70>
 8002044:	69bb      	ldr	r3, [r7, #24]
 8002046:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800204a:	2b00      	cmp	r3, #0
 800204c:	f000 80a5 	beq.w	800219a <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002050:	69fb      	ldr	r3, [r7, #28]
 8002052:	f003 0301 	and.w	r3, r3, #1
 8002056:	2b00      	cmp	r3, #0
 8002058:	d00a      	beq.n	8002070 <HAL_UART_IRQHandler+0x90>
 800205a:	69bb      	ldr	r3, [r7, #24]
 800205c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002060:	2b00      	cmp	r3, #0
 8002062:	d005      	beq.n	8002070 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002068:	f043 0201 	orr.w	r2, r3, #1
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002070:	69fb      	ldr	r3, [r7, #28]
 8002072:	f003 0304 	and.w	r3, r3, #4
 8002076:	2b00      	cmp	r3, #0
 8002078:	d00a      	beq.n	8002090 <HAL_UART_IRQHandler+0xb0>
 800207a:	697b      	ldr	r3, [r7, #20]
 800207c:	f003 0301 	and.w	r3, r3, #1
 8002080:	2b00      	cmp	r3, #0
 8002082:	d005      	beq.n	8002090 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002088:	f043 0202 	orr.w	r2, r3, #2
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002090:	69fb      	ldr	r3, [r7, #28]
 8002092:	f003 0302 	and.w	r3, r3, #2
 8002096:	2b00      	cmp	r3, #0
 8002098:	d00a      	beq.n	80020b0 <HAL_UART_IRQHandler+0xd0>
 800209a:	697b      	ldr	r3, [r7, #20]
 800209c:	f003 0301 	and.w	r3, r3, #1
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d005      	beq.n	80020b0 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80020a8:	f043 0204 	orr.w	r2, r3, #4
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 80020b0:	69fb      	ldr	r3, [r7, #28]
 80020b2:	f003 0308 	and.w	r3, r3, #8
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d00f      	beq.n	80020da <HAL_UART_IRQHandler+0xfa>
 80020ba:	69bb      	ldr	r3, [r7, #24]
 80020bc:	f003 0320 	and.w	r3, r3, #32
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d104      	bne.n	80020ce <HAL_UART_IRQHandler+0xee>
 80020c4:	697b      	ldr	r3, [r7, #20]
 80020c6:	f003 0301 	and.w	r3, r3, #1
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d005      	beq.n	80020da <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80020d2:	f043 0208 	orr.w	r2, r3, #8
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d077      	beq.n	80021d2 <HAL_UART_IRQHandler+0x1f2>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80020e2:	69fb      	ldr	r3, [r7, #28]
 80020e4:	f003 0320 	and.w	r3, r3, #32
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d007      	beq.n	80020fc <HAL_UART_IRQHandler+0x11c>
 80020ec:	69bb      	ldr	r3, [r7, #24]
 80020ee:	f003 0320 	and.w	r3, r3, #32
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d002      	beq.n	80020fc <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 80020f6:	6878      	ldr	r0, [r7, #4]
 80020f8:	f000 f966 	bl	80023c8 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	695b      	ldr	r3, [r3, #20]
 8002102:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002106:	2b00      	cmp	r3, #0
 8002108:	bf14      	ite	ne
 800210a:	2301      	movne	r3, #1
 800210c:	2300      	moveq	r3, #0
 800210e:	b2db      	uxtb	r3, r3
 8002110:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002116:	f003 0308 	and.w	r3, r3, #8
 800211a:	2b00      	cmp	r3, #0
 800211c:	d102      	bne.n	8002124 <HAL_UART_IRQHandler+0x144>
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	2b00      	cmp	r3, #0
 8002122:	d031      	beq.n	8002188 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002124:	6878      	ldr	r0, [r7, #4]
 8002126:	f000 f8b7 	bl	8002298 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	695b      	ldr	r3, [r3, #20]
 8002130:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002134:	2b00      	cmp	r3, #0
 8002136:	d023      	beq.n	8002180 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	695a      	ldr	r2, [r3, #20]
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002146:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800214c:	2b00      	cmp	r3, #0
 800214e:	d013      	beq.n	8002178 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002154:	4a21      	ldr	r2, [pc, #132]	; (80021dc <HAL_UART_IRQHandler+0x1fc>)
 8002156:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800215c:	4618      	mov	r0, r3
 800215e:	f7fe fd35 	bl	8000bcc <HAL_DMA_Abort_IT>
 8002162:	4603      	mov	r3, r0
 8002164:	2b00      	cmp	r3, #0
 8002166:	d016      	beq.n	8002196 <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800216c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800216e:	687a      	ldr	r2, [r7, #4]
 8002170:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002172:	4610      	mov	r0, r2
 8002174:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002176:	e00e      	b.n	8002196 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002178:	6878      	ldr	r0, [r7, #4]
 800217a:	f000 f83a 	bl	80021f2 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800217e:	e00a      	b.n	8002196 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002180:	6878      	ldr	r0, [r7, #4]
 8002182:	f000 f836 	bl	80021f2 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002186:	e006      	b.n	8002196 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002188:	6878      	ldr	r0, [r7, #4]
 800218a:	f000 f832 	bl	80021f2 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	2200      	movs	r2, #0
 8002192:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8002194:	e01d      	b.n	80021d2 <HAL_UART_IRQHandler+0x1f2>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002196:	bf00      	nop
    return;
 8002198:	e01b      	b.n	80021d2 <HAL_UART_IRQHandler+0x1f2>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800219a:	69fb      	ldr	r3, [r7, #28]
 800219c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d008      	beq.n	80021b6 <HAL_UART_IRQHandler+0x1d6>
 80021a4:	69bb      	ldr	r3, [r7, #24]
 80021a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d003      	beq.n	80021b6 <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 80021ae:	6878      	ldr	r0, [r7, #4]
 80021b0:	f000 f8a3 	bl	80022fa <UART_Transmit_IT>
    return;
 80021b4:	e00e      	b.n	80021d4 <HAL_UART_IRQHandler+0x1f4>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80021b6:	69fb      	ldr	r3, [r7, #28]
 80021b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d009      	beq.n	80021d4 <HAL_UART_IRQHandler+0x1f4>
 80021c0:	69bb      	ldr	r3, [r7, #24]
 80021c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d004      	beq.n	80021d4 <HAL_UART_IRQHandler+0x1f4>
  {
    UART_EndTransmit_IT(huart);
 80021ca:	6878      	ldr	r0, [r7, #4]
 80021cc:	f000 f8e4 	bl	8002398 <UART_EndTransmit_IT>
    return;
 80021d0:	e000      	b.n	80021d4 <HAL_UART_IRQHandler+0x1f4>
    return;
 80021d2:	bf00      	nop
  }
}
 80021d4:	3720      	adds	r7, #32
 80021d6:	46bd      	mov	sp, r7
 80021d8:	bd80      	pop	{r7, pc}
 80021da:	bf00      	nop
 80021dc:	080022d3 	.word	0x080022d3

080021e0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80021e0:	b480      	push	{r7}
 80021e2:	b083      	sub	sp, #12
 80021e4:	af00      	add	r7, sp, #0
 80021e6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80021e8:	bf00      	nop
 80021ea:	370c      	adds	r7, #12
 80021ec:	46bd      	mov	sp, r7
 80021ee:	bc80      	pop	{r7}
 80021f0:	4770      	bx	lr

080021f2 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80021f2:	b480      	push	{r7}
 80021f4:	b083      	sub	sp, #12
 80021f6:	af00      	add	r7, sp, #0
 80021f8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80021fa:	bf00      	nop
 80021fc:	370c      	adds	r7, #12
 80021fe:	46bd      	mov	sp, r7
 8002200:	bc80      	pop	{r7}
 8002202:	4770      	bx	lr

08002204 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8002204:	b580      	push	{r7, lr}
 8002206:	b084      	sub	sp, #16
 8002208:	af00      	add	r7, sp, #0
 800220a:	60f8      	str	r0, [r7, #12]
 800220c:	60b9      	str	r1, [r7, #8]
 800220e:	603b      	str	r3, [r7, #0]
 8002210:	4613      	mov	r3, r2
 8002212:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002214:	e02c      	b.n	8002270 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002216:	69bb      	ldr	r3, [r7, #24]
 8002218:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800221c:	d028      	beq.n	8002270 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800221e:	69bb      	ldr	r3, [r7, #24]
 8002220:	2b00      	cmp	r3, #0
 8002222:	d007      	beq.n	8002234 <UART_WaitOnFlagUntilTimeout+0x30>
 8002224:	f7fe fbe8 	bl	80009f8 <HAL_GetTick>
 8002228:	4602      	mov	r2, r0
 800222a:	683b      	ldr	r3, [r7, #0]
 800222c:	1ad3      	subs	r3, r2, r3
 800222e:	69ba      	ldr	r2, [r7, #24]
 8002230:	429a      	cmp	r2, r3
 8002232:	d21d      	bcs.n	8002270 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	68da      	ldr	r2, [r3, #12]
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002242:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	695a      	ldr	r2, [r3, #20]
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	f022 0201 	bic.w	r2, r2, #1
 8002252:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	2220      	movs	r2, #32
 8002258:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	2220      	movs	r2, #32
 8002260:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	2200      	movs	r2, #0
 8002268:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 800226c:	2303      	movs	r3, #3
 800226e:	e00f      	b.n	8002290 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	681a      	ldr	r2, [r3, #0]
 8002276:	68bb      	ldr	r3, [r7, #8]
 8002278:	4013      	ands	r3, r2
 800227a:	68ba      	ldr	r2, [r7, #8]
 800227c:	429a      	cmp	r2, r3
 800227e:	bf0c      	ite	eq
 8002280:	2301      	moveq	r3, #1
 8002282:	2300      	movne	r3, #0
 8002284:	b2db      	uxtb	r3, r3
 8002286:	461a      	mov	r2, r3
 8002288:	79fb      	ldrb	r3, [r7, #7]
 800228a:	429a      	cmp	r2, r3
 800228c:	d0c3      	beq.n	8002216 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800228e:	2300      	movs	r3, #0
}
 8002290:	4618      	mov	r0, r3
 8002292:	3710      	adds	r7, #16
 8002294:	46bd      	mov	sp, r7
 8002296:	bd80      	pop	{r7, pc}

08002298 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002298:	b480      	push	{r7}
 800229a:	b083      	sub	sp, #12
 800229c:	af00      	add	r7, sp, #0
 800229e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	68da      	ldr	r2, [r3, #12]
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80022ae:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	695a      	ldr	r2, [r3, #20]
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	f022 0201 	bic.w	r2, r2, #1
 80022be:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	2220      	movs	r2, #32
 80022c4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 80022c8:	bf00      	nop
 80022ca:	370c      	adds	r7, #12
 80022cc:	46bd      	mov	sp, r7
 80022ce:	bc80      	pop	{r7}
 80022d0:	4770      	bx	lr

080022d2 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80022d2:	b580      	push	{r7, lr}
 80022d4:	b084      	sub	sp, #16
 80022d6:	af00      	add	r7, sp, #0
 80022d8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022de:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	2200      	movs	r2, #0
 80022e4:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	2200      	movs	r2, #0
 80022ea:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80022ec:	68f8      	ldr	r0, [r7, #12]
 80022ee:	f7ff ff80 	bl	80021f2 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80022f2:	bf00      	nop
 80022f4:	3710      	adds	r7, #16
 80022f6:	46bd      	mov	sp, r7
 80022f8:	bd80      	pop	{r7, pc}

080022fa <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80022fa:	b480      	push	{r7}
 80022fc:	b085      	sub	sp, #20
 80022fe:	af00      	add	r7, sp, #0
 8002300:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002308:	b2db      	uxtb	r3, r3
 800230a:	2b21      	cmp	r3, #33	; 0x21
 800230c:	d13e      	bne.n	800238c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	689b      	ldr	r3, [r3, #8]
 8002312:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002316:	d114      	bne.n	8002342 <UART_Transmit_IT+0x48>
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	691b      	ldr	r3, [r3, #16]
 800231c:	2b00      	cmp	r3, #0
 800231e:	d110      	bne.n	8002342 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	6a1b      	ldr	r3, [r3, #32]
 8002324:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	881b      	ldrh	r3, [r3, #0]
 800232a:	461a      	mov	r2, r3
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002334:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	6a1b      	ldr	r3, [r3, #32]
 800233a:	1c9a      	adds	r2, r3, #2
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	621a      	str	r2, [r3, #32]
 8002340:	e008      	b.n	8002354 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	6a1b      	ldr	r3, [r3, #32]
 8002346:	1c59      	adds	r1, r3, #1
 8002348:	687a      	ldr	r2, [r7, #4]
 800234a:	6211      	str	r1, [r2, #32]
 800234c:	781a      	ldrb	r2, [r3, #0]
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002358:	b29b      	uxth	r3, r3
 800235a:	3b01      	subs	r3, #1
 800235c:	b29b      	uxth	r3, r3
 800235e:	687a      	ldr	r2, [r7, #4]
 8002360:	4619      	mov	r1, r3
 8002362:	84d1      	strh	r1, [r2, #38]	; 0x26
 8002364:	2b00      	cmp	r3, #0
 8002366:	d10f      	bne.n	8002388 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	68da      	ldr	r2, [r3, #12]
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002376:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	68da      	ldr	r2, [r3, #12]
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002386:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8002388:	2300      	movs	r3, #0
 800238a:	e000      	b.n	800238e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800238c:	2302      	movs	r3, #2
  }
}
 800238e:	4618      	mov	r0, r3
 8002390:	3714      	adds	r7, #20
 8002392:	46bd      	mov	sp, r7
 8002394:	bc80      	pop	{r7}
 8002396:	4770      	bx	lr

08002398 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002398:	b580      	push	{r7, lr}
 800239a:	b082      	sub	sp, #8
 800239c:	af00      	add	r7, sp, #0
 800239e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	68da      	ldr	r2, [r3, #12]
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80023ae:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	2220      	movs	r2, #32
 80023b4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80023b8:	6878      	ldr	r0, [r7, #4]
 80023ba:	f7ff ff11 	bl	80021e0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80023be:	2300      	movs	r3, #0
}
 80023c0:	4618      	mov	r0, r3
 80023c2:	3708      	adds	r7, #8
 80023c4:	46bd      	mov	sp, r7
 80023c6:	bd80      	pop	{r7, pc}

080023c8 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80023c8:	b580      	push	{r7, lr}
 80023ca:	b084      	sub	sp, #16
 80023cc:	af00      	add	r7, sp, #0
 80023ce:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80023d6:	b2db      	uxtb	r3, r3
 80023d8:	2b22      	cmp	r3, #34	; 0x22
 80023da:	d170      	bne.n	80024be <UART_Receive_IT+0xf6>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	689b      	ldr	r3, [r3, #8]
 80023e0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80023e4:	d117      	bne.n	8002416 <UART_Receive_IT+0x4e>
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	691b      	ldr	r3, [r3, #16]
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d113      	bne.n	8002416 <UART_Receive_IT+0x4e>
    {
      pdata8bits  = NULL;
 80023ee:	2300      	movs	r3, #0
 80023f0:	60fb      	str	r3, [r7, #12]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023f6:	60bb      	str	r3, [r7, #8]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	685b      	ldr	r3, [r3, #4]
 80023fe:	b29b      	uxth	r3, r3
 8002400:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002404:	b29a      	uxth	r2, r3
 8002406:	68bb      	ldr	r3, [r7, #8]
 8002408:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800240e:	1c9a      	adds	r2, r3, #2
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	629a      	str	r2, [r3, #40]	; 0x28
 8002414:	e026      	b.n	8002464 <UART_Receive_IT+0x9c>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800241a:	60fb      	str	r3, [r7, #12]
      pdata16bits  = NULL;
 800241c:	2300      	movs	r3, #0
 800241e:	60bb      	str	r3, [r7, #8]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	689b      	ldr	r3, [r3, #8]
 8002424:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002428:	d007      	beq.n	800243a <UART_Receive_IT+0x72>
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	689b      	ldr	r3, [r3, #8]
 800242e:	2b00      	cmp	r3, #0
 8002430:	d10a      	bne.n	8002448 <UART_Receive_IT+0x80>
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	691b      	ldr	r3, [r3, #16]
 8002436:	2b00      	cmp	r3, #0
 8002438:	d106      	bne.n	8002448 <UART_Receive_IT+0x80>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	685b      	ldr	r3, [r3, #4]
 8002440:	b2da      	uxtb	r2, r3
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	701a      	strb	r2, [r3, #0]
 8002446:	e008      	b.n	800245a <UART_Receive_IT+0x92>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	685b      	ldr	r3, [r3, #4]
 800244e:	b2db      	uxtb	r3, r3
 8002450:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002454:	b2da      	uxtb	r2, r3
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800245e:	1c5a      	adds	r2, r3, #1
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002468:	b29b      	uxth	r3, r3
 800246a:	3b01      	subs	r3, #1
 800246c:	b29b      	uxth	r3, r3
 800246e:	687a      	ldr	r2, [r7, #4]
 8002470:	4619      	mov	r1, r3
 8002472:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8002474:	2b00      	cmp	r3, #0
 8002476:	d120      	bne.n	80024ba <UART_Receive_IT+0xf2>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	68da      	ldr	r2, [r3, #12]
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	f022 0220 	bic.w	r2, r2, #32
 8002486:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	68da      	ldr	r2, [r3, #12]
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002496:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	695a      	ldr	r2, [r3, #20]
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	f022 0201 	bic.w	r2, r2, #1
 80024a6:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	2220      	movs	r2, #32
 80024ac:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 80024b0:	6878      	ldr	r0, [r7, #4]
 80024b2:	f7fd ffa5 	bl	8000400 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 80024b6:	2300      	movs	r3, #0
 80024b8:	e002      	b.n	80024c0 <UART_Receive_IT+0xf8>
    }
    return HAL_OK;
 80024ba:	2300      	movs	r3, #0
 80024bc:	e000      	b.n	80024c0 <UART_Receive_IT+0xf8>
  }
  else
  {
    return HAL_BUSY;
 80024be:	2302      	movs	r3, #2
  }
}
 80024c0:	4618      	mov	r0, r3
 80024c2:	3710      	adds	r7, #16
 80024c4:	46bd      	mov	sp, r7
 80024c6:	bd80      	pop	{r7, pc}

080024c8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80024c8:	b580      	push	{r7, lr}
 80024ca:	b084      	sub	sp, #16
 80024cc:	af00      	add	r7, sp, #0
 80024ce:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	691b      	ldr	r3, [r3, #16]
 80024d6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	68da      	ldr	r2, [r3, #12]
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	430a      	orrs	r2, r1
 80024e4:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	689a      	ldr	r2, [r3, #8]
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	691b      	ldr	r3, [r3, #16]
 80024ee:	431a      	orrs	r2, r3
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	695b      	ldr	r3, [r3, #20]
 80024f4:	4313      	orrs	r3, r2
 80024f6:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	68db      	ldr	r3, [r3, #12]
 80024fe:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8002502:	f023 030c 	bic.w	r3, r3, #12
 8002506:	687a      	ldr	r2, [r7, #4]
 8002508:	6812      	ldr	r2, [r2, #0]
 800250a:	68b9      	ldr	r1, [r7, #8]
 800250c:	430b      	orrs	r3, r1
 800250e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	695b      	ldr	r3, [r3, #20]
 8002516:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	699a      	ldr	r2, [r3, #24]
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	430a      	orrs	r2, r1
 8002524:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	4a2c      	ldr	r2, [pc, #176]	; (80025dc <UART_SetConfig+0x114>)
 800252c:	4293      	cmp	r3, r2
 800252e:	d103      	bne.n	8002538 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002530:	f7ff f976 	bl	8001820 <HAL_RCC_GetPCLK2Freq>
 8002534:	60f8      	str	r0, [r7, #12]
 8002536:	e002      	b.n	800253e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8002538:	f7ff f95e 	bl	80017f8 <HAL_RCC_GetPCLK1Freq>
 800253c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800253e:	68fa      	ldr	r2, [r7, #12]
 8002540:	4613      	mov	r3, r2
 8002542:	009b      	lsls	r3, r3, #2
 8002544:	4413      	add	r3, r2
 8002546:	009a      	lsls	r2, r3, #2
 8002548:	441a      	add	r2, r3
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	685b      	ldr	r3, [r3, #4]
 800254e:	009b      	lsls	r3, r3, #2
 8002550:	fbb2 f3f3 	udiv	r3, r2, r3
 8002554:	4a22      	ldr	r2, [pc, #136]	; (80025e0 <UART_SetConfig+0x118>)
 8002556:	fba2 2303 	umull	r2, r3, r2, r3
 800255a:	095b      	lsrs	r3, r3, #5
 800255c:	0119      	lsls	r1, r3, #4
 800255e:	68fa      	ldr	r2, [r7, #12]
 8002560:	4613      	mov	r3, r2
 8002562:	009b      	lsls	r3, r3, #2
 8002564:	4413      	add	r3, r2
 8002566:	009a      	lsls	r2, r3, #2
 8002568:	441a      	add	r2, r3
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	685b      	ldr	r3, [r3, #4]
 800256e:	009b      	lsls	r3, r3, #2
 8002570:	fbb2 f2f3 	udiv	r2, r2, r3
 8002574:	4b1a      	ldr	r3, [pc, #104]	; (80025e0 <UART_SetConfig+0x118>)
 8002576:	fba3 0302 	umull	r0, r3, r3, r2
 800257a:	095b      	lsrs	r3, r3, #5
 800257c:	2064      	movs	r0, #100	; 0x64
 800257e:	fb00 f303 	mul.w	r3, r0, r3
 8002582:	1ad3      	subs	r3, r2, r3
 8002584:	011b      	lsls	r3, r3, #4
 8002586:	3332      	adds	r3, #50	; 0x32
 8002588:	4a15      	ldr	r2, [pc, #84]	; (80025e0 <UART_SetConfig+0x118>)
 800258a:	fba2 2303 	umull	r2, r3, r2, r3
 800258e:	095b      	lsrs	r3, r3, #5
 8002590:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002594:	4419      	add	r1, r3
 8002596:	68fa      	ldr	r2, [r7, #12]
 8002598:	4613      	mov	r3, r2
 800259a:	009b      	lsls	r3, r3, #2
 800259c:	4413      	add	r3, r2
 800259e:	009a      	lsls	r2, r3, #2
 80025a0:	441a      	add	r2, r3
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	685b      	ldr	r3, [r3, #4]
 80025a6:	009b      	lsls	r3, r3, #2
 80025a8:	fbb2 f2f3 	udiv	r2, r2, r3
 80025ac:	4b0c      	ldr	r3, [pc, #48]	; (80025e0 <UART_SetConfig+0x118>)
 80025ae:	fba3 0302 	umull	r0, r3, r3, r2
 80025b2:	095b      	lsrs	r3, r3, #5
 80025b4:	2064      	movs	r0, #100	; 0x64
 80025b6:	fb00 f303 	mul.w	r3, r0, r3
 80025ba:	1ad3      	subs	r3, r2, r3
 80025bc:	011b      	lsls	r3, r3, #4
 80025be:	3332      	adds	r3, #50	; 0x32
 80025c0:	4a07      	ldr	r2, [pc, #28]	; (80025e0 <UART_SetConfig+0x118>)
 80025c2:	fba2 2303 	umull	r2, r3, r2, r3
 80025c6:	095b      	lsrs	r3, r3, #5
 80025c8:	f003 020f 	and.w	r2, r3, #15
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	440a      	add	r2, r1
 80025d2:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80025d4:	bf00      	nop
 80025d6:	3710      	adds	r7, #16
 80025d8:	46bd      	mov	sp, r7
 80025da:	bd80      	pop	{r7, pc}
 80025dc:	40013800 	.word	0x40013800
 80025e0:	51eb851f 	.word	0x51eb851f

080025e4 <InitADS1110>:
#include "ads1110.h"

struct I2C_Pins ads1110[4];

void InitADS1110(void)
{
 80025e4:	b580      	push	{r7, lr}
 80025e6:	b082      	sub	sp, #8
 80025e8:	af00      	add	r7, sp, #0
	uint8_t i;
    uint8_t config = 0x8F;
 80025ea:	238f      	movs	r3, #143	; 0x8f
 80025ec:	71bb      	strb	r3, [r7, #6]

    ads1110[0].dev_addr = 0x49;
 80025ee:	4b35      	ldr	r3, [pc, #212]	; (80026c4 <InitADS1110+0xe0>)
 80025f0:	2249      	movs	r2, #73	; 0x49
 80025f2:	701a      	strb	r2, [r3, #0]
    ads1110[0].SDA_GPIOx = SDA1_GPIO_Port;
 80025f4:	4b33      	ldr	r3, [pc, #204]	; (80026c4 <InitADS1110+0xe0>)
 80025f6:	4a34      	ldr	r2, [pc, #208]	; (80026c8 <InitADS1110+0xe4>)
 80025f8:	605a      	str	r2, [r3, #4]
    ads1110[0].SDA_GPIO_Pin = SDA1_Pin;
 80025fa:	4b32      	ldr	r3, [pc, #200]	; (80026c4 <InitADS1110+0xe0>)
 80025fc:	2201      	movs	r2, #1
 80025fe:	811a      	strh	r2, [r3, #8]
    ads1110[0].SCK_GPIOx = SCL1_GPIO_Port;
 8002600:	4b30      	ldr	r3, [pc, #192]	; (80026c4 <InitADS1110+0xe0>)
 8002602:	4a31      	ldr	r2, [pc, #196]	; (80026c8 <InitADS1110+0xe4>)
 8002604:	60da      	str	r2, [r3, #12]
    ads1110[0].SCK_GPIO_Pin = SCL1_Pin;
 8002606:	4b2f      	ldr	r3, [pc, #188]	; (80026c4 <InitADS1110+0xe0>)
 8002608:	2202      	movs	r2, #2
 800260a:	821a      	strh	r2, [r3, #16]

    ads1110[1].dev_addr = 0x49;
 800260c:	4b2d      	ldr	r3, [pc, #180]	; (80026c4 <InitADS1110+0xe0>)
 800260e:	2249      	movs	r2, #73	; 0x49
 8002610:	751a      	strb	r2, [r3, #20]
    ads1110[1].SDA_GPIOx = SDA2_GPIO_Port;
 8002612:	4b2c      	ldr	r3, [pc, #176]	; (80026c4 <InitADS1110+0xe0>)
 8002614:	4a2c      	ldr	r2, [pc, #176]	; (80026c8 <InitADS1110+0xe4>)
 8002616:	619a      	str	r2, [r3, #24]
    ads1110[1].SDA_GPIO_Pin = SDA2_Pin;
 8002618:	4b2a      	ldr	r3, [pc, #168]	; (80026c4 <InitADS1110+0xe0>)
 800261a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800261e:	839a      	strh	r2, [r3, #28]
    ads1110[1].SCK_GPIOx = SCL2_GPIO_Port;
 8002620:	4b28      	ldr	r3, [pc, #160]	; (80026c4 <InitADS1110+0xe0>)
 8002622:	4a29      	ldr	r2, [pc, #164]	; (80026c8 <InitADS1110+0xe4>)
 8002624:	621a      	str	r2, [r3, #32]
    ads1110[1].SCK_GPIO_Pin = SCL2_Pin;
 8002626:	4b27      	ldr	r3, [pc, #156]	; (80026c4 <InitADS1110+0xe0>)
 8002628:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800262c:	849a      	strh	r2, [r3, #36]	; 0x24

    ads1110[2].dev_addr = 0x49;
 800262e:	4b25      	ldr	r3, [pc, #148]	; (80026c4 <InitADS1110+0xe0>)
 8002630:	2249      	movs	r2, #73	; 0x49
 8002632:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    ads1110[2].SDA_GPIOx = SDA3_GPIO_Port;
 8002636:	4b23      	ldr	r3, [pc, #140]	; (80026c4 <InitADS1110+0xe0>)
 8002638:	4a23      	ldr	r2, [pc, #140]	; (80026c8 <InitADS1110+0xe4>)
 800263a:	62da      	str	r2, [r3, #44]	; 0x2c
    ads1110[2].SDA_GPIO_Pin = SDA3_Pin;
 800263c:	4b21      	ldr	r3, [pc, #132]	; (80026c4 <InitADS1110+0xe0>)
 800263e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002642:	861a      	strh	r2, [r3, #48]	; 0x30
    ads1110[2].SCK_GPIOx = SCL3_GPIO_Port;
 8002644:	4b1f      	ldr	r3, [pc, #124]	; (80026c4 <InitADS1110+0xe0>)
 8002646:	4a20      	ldr	r2, [pc, #128]	; (80026c8 <InitADS1110+0xe4>)
 8002648:	635a      	str	r2, [r3, #52]	; 0x34
    ads1110[2].SCK_GPIO_Pin = SCL3_Pin;
 800264a:	4b1e      	ldr	r3, [pc, #120]	; (80026c4 <InitADS1110+0xe0>)
 800264c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002650:	871a      	strh	r2, [r3, #56]	; 0x38

    ads1110[3].dev_addr = 0x49;
 8002652:	4b1c      	ldr	r3, [pc, #112]	; (80026c4 <InitADS1110+0xe0>)
 8002654:	2249      	movs	r2, #73	; 0x49
 8002656:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    ads1110[3].SDA_GPIOx = SDA4_GPIO_Port;
 800265a:	4b1a      	ldr	r3, [pc, #104]	; (80026c4 <InitADS1110+0xe0>)
 800265c:	4a1a      	ldr	r2, [pc, #104]	; (80026c8 <InitADS1110+0xe4>)
 800265e:	641a      	str	r2, [r3, #64]	; 0x40
    ads1110[3].SDA_GPIO_Pin = SDA4_Pin;
 8002660:	4b18      	ldr	r3, [pc, #96]	; (80026c4 <InitADS1110+0xe0>)
 8002662:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002666:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    ads1110[3].SCK_GPIOx = SCL4_GPIO_Port;
 800266a:	4b16      	ldr	r3, [pc, #88]	; (80026c4 <InitADS1110+0xe0>)
 800266c:	4a16      	ldr	r2, [pc, #88]	; (80026c8 <InitADS1110+0xe4>)
 800266e:	649a      	str	r2, [r3, #72]	; 0x48
    ads1110[3].SCK_GPIO_Pin = SCL4_Pin;
 8002670:	4b14      	ldr	r3, [pc, #80]	; (80026c4 <InitADS1110+0xe0>)
 8002672:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8002676:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

    for (i = 0; i < 4; i++)
 800267a:	2300      	movs	r3, #0
 800267c:	71fb      	strb	r3, [r7, #7]
 800267e:	e018      	b.n	80026b2 <InitADS1110+0xce>
    {
		I2C_Open(&ads1110[i]);
 8002680:	79fa      	ldrb	r2, [r7, #7]
 8002682:	4613      	mov	r3, r2
 8002684:	009b      	lsls	r3, r3, #2
 8002686:	4413      	add	r3, r2
 8002688:	009b      	lsls	r3, r3, #2
 800268a:	4a0e      	ldr	r2, [pc, #56]	; (80026c4 <InitADS1110+0xe0>)
 800268c:	4413      	add	r3, r2
 800268e:	4618      	mov	r0, r3
 8002690:	f000 f8da 	bl	8002848 <I2C_Open>
		I2C_WriteBytesNoAddr(&ads1110[i], &config, 1);
 8002694:	79fa      	ldrb	r2, [r7, #7]
 8002696:	4613      	mov	r3, r2
 8002698:	009b      	lsls	r3, r3, #2
 800269a:	4413      	add	r3, r2
 800269c:	009b      	lsls	r3, r3, #2
 800269e:	4a09      	ldr	r2, [pc, #36]	; (80026c4 <InitADS1110+0xe0>)
 80026a0:	4413      	add	r3, r2
 80026a2:	1db9      	adds	r1, r7, #6
 80026a4:	2201      	movs	r2, #1
 80026a6:	4618      	mov	r0, r3
 80026a8:	f000 fb96 	bl	8002dd8 <I2C_WriteBytesNoAddr>
    for (i = 0; i < 4; i++)
 80026ac:	79fb      	ldrb	r3, [r7, #7]
 80026ae:	3301      	adds	r3, #1
 80026b0:	71fb      	strb	r3, [r7, #7]
 80026b2:	79fb      	ldrb	r3, [r7, #7]
 80026b4:	2b03      	cmp	r3, #3
 80026b6:	d9e3      	bls.n	8002680 <InitADS1110+0x9c>
    }
}
 80026b8:	bf00      	nop
 80026ba:	bf00      	nop
 80026bc:	3708      	adds	r7, #8
 80026be:	46bd      	mov	sp, r7
 80026c0:	bd80      	pop	{r7, pc}
 80026c2:	bf00      	nop
 80026c4:	20001170 	.word	0x20001170
 80026c8:	40010c00 	.word	0x40010c00

080026cc <ReadAD>:

int ReadAD(uint8_t adc_idx)
{
 80026cc:	b580      	push	{r7, lr}
 80026ce:	b084      	sub	sp, #16
 80026d0:	af00      	add	r7, sp, #0
 80026d2:	4603      	mov	r3, r0
 80026d4:	71fb      	strb	r3, [r7, #7]
	int val;
	uint16_t count;
    uint8_t data[2];
    while (1)
    {
        I2C_ReadBytesNoAddr(&ads1110[adc_idx], 2, data);
 80026d6:	79fa      	ldrb	r2, [r7, #7]
 80026d8:	4613      	mov	r3, r2
 80026da:	009b      	lsls	r3, r3, #2
 80026dc:	4413      	add	r3, r2
 80026de:	009b      	lsls	r3, r3, #2
 80026e0:	4a14      	ldr	r2, [pc, #80]	; (8002734 <ReadAD+0x68>)
 80026e2:	4413      	add	r3, r2
 80026e4:	f107 0208 	add.w	r2, r7, #8
 80026e8:	2102      	movs	r1, #2
 80026ea:	4618      	mov	r0, r3
 80026ec:	f000 fb9e 	bl	8002e2c <I2C_ReadBytesNoAddr>
        count = data[0];
 80026f0:	7a3b      	ldrb	r3, [r7, #8]
 80026f2:	817b      	strh	r3, [r7, #10]
        count <<= 8;
 80026f4:	897b      	ldrh	r3, [r7, #10]
 80026f6:	021b      	lsls	r3, r3, #8
 80026f8:	817b      	strh	r3, [r7, #10]
        count += data[1];
 80026fa:	7a7b      	ldrb	r3, [r7, #9]
 80026fc:	b29a      	uxth	r2, r3
 80026fe:	897b      	ldrh	r3, [r7, #10]
 8002700:	4413      	add	r3, r2
 8002702:	817b      	strh	r3, [r7, #10]
        if (data[0] != 0xFF || data[1] != 0xFF)
 8002704:	7a3b      	ldrb	r3, [r7, #8]
 8002706:	2bff      	cmp	r3, #255	; 0xff
 8002708:	d103      	bne.n	8002712 <ReadAD+0x46>
 800270a:	7a7b      	ldrb	r3, [r7, #9]
 800270c:	2bff      	cmp	r3, #255	; 0xff
 800270e:	d100      	bne.n	8002712 <ReadAD+0x46>
        I2C_ReadBytesNoAddr(&ads1110[adc_idx], 2, data);
 8002710:	e7e1      	b.n	80026d6 <ReadAD+0xa>
            break;
    }

	if ((count & 0x8000) == 0x000000)
 8002712:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8002716:	2b00      	cmp	r3, #0
 8002718:	db02      	blt.n	8002720 <ReadAD+0x54>
	{
		val = count;
 800271a:	897b      	ldrh	r3, [r7, #10]
 800271c:	60fb      	str	r3, [r7, #12]
 800271e:	e003      	b.n	8002728 <ReadAD+0x5c>
	}
	else
	{
		val = (int32_t)count - (int32_t)0xFFFF - 1;
 8002720:	897b      	ldrh	r3, [r7, #10]
 8002722:	f5a3 3380 	sub.w	r3, r3, #65536	; 0x10000
 8002726:	60fb      	str	r3, [r7, #12]
	}

    return val;
 8002728:	68fb      	ldr	r3, [r7, #12]
}
 800272a:	4618      	mov	r0, r3
 800272c:	3710      	adds	r7, #16
 800272e:	46bd      	mov	sp, r7
 8002730:	bd80      	pop	{r7, pc}
 8002732:	bf00      	nop
 8002734:	20001170 	.word	0x20001170

08002738 <my_delay_count>:
 *      Author: lzm_mac
 */
#include "my_delay.h"

void my_delay_count(uint16_t cnt)
{
 8002738:	b480      	push	{r7}
 800273a:	b085      	sub	sp, #20
 800273c:	af00      	add	r7, sp, #0
 800273e:	4603      	mov	r3, r0
 8002740:	80fb      	strh	r3, [r7, #6]
	volatile uint16_t i;
	for (i = 0; i < cnt; i++);
 8002742:	2300      	movs	r3, #0
 8002744:	81fb      	strh	r3, [r7, #14]
 8002746:	e004      	b.n	8002752 <my_delay_count+0x1a>
 8002748:	89fb      	ldrh	r3, [r7, #14]
 800274a:	b29b      	uxth	r3, r3
 800274c:	3301      	adds	r3, #1
 800274e:	b29b      	uxth	r3, r3
 8002750:	81fb      	strh	r3, [r7, #14]
 8002752:	89fb      	ldrh	r3, [r7, #14]
 8002754:	b29b      	uxth	r3, r3
 8002756:	88fa      	ldrh	r2, [r7, #6]
 8002758:	429a      	cmp	r2, r3
 800275a:	d8f5      	bhi.n	8002748 <my_delay_count+0x10>
}
 800275c:	bf00      	nop
 800275e:	bf00      	nop
 8002760:	3714      	adds	r7, #20
 8002762:	46bd      	mov	sp, r7
 8002764:	bc80      	pop	{r7}
 8002766:	4770      	bx	lr

08002768 <PowerOn>:
 */

#include "peripherial.h"

void PowerOn(void)
{
 8002768:	b580      	push	{r7, lr}
 800276a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(POWER_CON_GPIO_Port, POWER_CON_Pin, GPIO_PIN_SET);
 800276c:	2201      	movs	r2, #1
 800276e:	2110      	movs	r1, #16
 8002770:	4802      	ldr	r0, [pc, #8]	; (800277c <PowerOn+0x14>)
 8002772:	f7fe fc3c 	bl	8000fee <HAL_GPIO_WritePin>
}
 8002776:	bf00      	nop
 8002778:	bd80      	pop	{r7, pc}
 800277a:	bf00      	nop
 800277c:	40010800 	.word	0x40010800

08002780 <PowerOff>:

void PowerOff(void)
{
 8002780:	b580      	push	{r7, lr}
 8002782:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(POWER_CON_GPIO_Port, POWER_CON_Pin, GPIO_PIN_RESET);
 8002784:	2200      	movs	r2, #0
 8002786:	2110      	movs	r1, #16
 8002788:	4802      	ldr	r0, [pc, #8]	; (8002794 <PowerOff+0x14>)
 800278a:	f7fe fc30 	bl	8000fee <HAL_GPIO_WritePin>
}
 800278e:	bf00      	nop
 8002790:	bd80      	pop	{r7, pc}
 8002792:	bf00      	nop
 8002794:	40010800 	.word	0x40010800

08002798 <TurnOnPowerLED>:

void TurnOnPowerLED(void)
{
 8002798:	b580      	push	{r7, lr}
 800279a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_GPIO3_GPIO_Port, LED_GPIO3_Pin, GPIO_PIN_SET);
 800279c:	2201      	movs	r2, #1
 800279e:	2180      	movs	r1, #128	; 0x80
 80027a0:	4802      	ldr	r0, [pc, #8]	; (80027ac <TurnOnPowerLED+0x14>)
 80027a2:	f7fe fc24 	bl	8000fee <HAL_GPIO_WritePin>
}
 80027a6:	bf00      	nop
 80027a8:	bd80      	pop	{r7, pc}
 80027aa:	bf00      	nop
 80027ac:	40010c00 	.word	0x40010c00

080027b0 <TurnOnBoardLED>:
{
	HAL_GPIO_WritePin(LED_GPIO3_GPIO_Port, LED_GPIO3_Pin, GPIO_PIN_RESET);
}

void TurnOnBoardLED(uint8_t idx)
{
 80027b0:	b580      	push	{r7, lr}
 80027b2:	b082      	sub	sp, #8
 80027b4:	af00      	add	r7, sp, #0
 80027b6:	4603      	mov	r3, r0
 80027b8:	71fb      	strb	r3, [r7, #7]
	if (idx == 0)
 80027ba:	79fb      	ldrb	r3, [r7, #7]
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d105      	bne.n	80027cc <TurnOnBoardLED+0x1c>
		HAL_GPIO_WritePin(LED_GPIO5_GPIO_Port, LED_GPIO5_Pin, GPIO_PIN_SET);
 80027c0:	2201      	movs	r2, #1
 80027c2:	2140      	movs	r1, #64	; 0x40
 80027c4:	4806      	ldr	r0, [pc, #24]	; (80027e0 <TurnOnBoardLED+0x30>)
 80027c6:	f7fe fc12 	bl	8000fee <HAL_GPIO_WritePin>
	else
		HAL_GPIO_WritePin(LED_GPIO1_GPIO_Port, LED_GPIO1_Pin, GPIO_PIN_SET);
}
 80027ca:	e004      	b.n	80027d6 <TurnOnBoardLED+0x26>
		HAL_GPIO_WritePin(LED_GPIO1_GPIO_Port, LED_GPIO1_Pin, GPIO_PIN_SET);
 80027cc:	2201      	movs	r2, #1
 80027ce:	2120      	movs	r1, #32
 80027d0:	4803      	ldr	r0, [pc, #12]	; (80027e0 <TurnOnBoardLED+0x30>)
 80027d2:	f7fe fc0c 	bl	8000fee <HAL_GPIO_WritePin>
}
 80027d6:	bf00      	nop
 80027d8:	3708      	adds	r7, #8
 80027da:	46bd      	mov	sp, r7
 80027dc:	bd80      	pop	{r7, pc}
 80027de:	bf00      	nop
 80027e0:	40010c00 	.word	0x40010c00

080027e4 <TurnOffBoardLED>:

void TurnOffBoardLED(uint8_t idx)
{
 80027e4:	b580      	push	{r7, lr}
 80027e6:	b082      	sub	sp, #8
 80027e8:	af00      	add	r7, sp, #0
 80027ea:	4603      	mov	r3, r0
 80027ec:	71fb      	strb	r3, [r7, #7]
	if (idx == 0)
 80027ee:	79fb      	ldrb	r3, [r7, #7]
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d105      	bne.n	8002800 <TurnOffBoardLED+0x1c>
		HAL_GPIO_WritePin(LED_GPIO5_GPIO_Port, LED_GPIO5_Pin, GPIO_PIN_RESET);
 80027f4:	2200      	movs	r2, #0
 80027f6:	2140      	movs	r1, #64	; 0x40
 80027f8:	4806      	ldr	r0, [pc, #24]	; (8002814 <TurnOffBoardLED+0x30>)
 80027fa:	f7fe fbf8 	bl	8000fee <HAL_GPIO_WritePin>
	else
		HAL_GPIO_WritePin(LED_GPIO1_GPIO_Port, LED_GPIO1_Pin, GPIO_PIN_RESET);
}
 80027fe:	e004      	b.n	800280a <TurnOffBoardLED+0x26>
		HAL_GPIO_WritePin(LED_GPIO1_GPIO_Port, LED_GPIO1_Pin, GPIO_PIN_RESET);
 8002800:	2200      	movs	r2, #0
 8002802:	2120      	movs	r1, #32
 8002804:	4803      	ldr	r0, [pc, #12]	; (8002814 <TurnOffBoardLED+0x30>)
 8002806:	f7fe fbf2 	bl	8000fee <HAL_GPIO_WritePin>
}
 800280a:	bf00      	nop
 800280c:	3708      	adds	r7, #8
 800280e:	46bd      	mov	sp, r7
 8002810:	bd80      	pop	{r7, pc}
 8002812:	bf00      	nop
 8002814:	40010c00 	.word	0x40010c00

08002818 <ToggleBoardLED>:

void ToggleBoardLED(uint8_t idx)
{
 8002818:	b580      	push	{r7, lr}
 800281a:	b082      	sub	sp, #8
 800281c:	af00      	add	r7, sp, #0
 800281e:	4603      	mov	r3, r0
 8002820:	71fb      	strb	r3, [r7, #7]
	if (idx == 0)
 8002822:	79fb      	ldrb	r3, [r7, #7]
 8002824:	2b00      	cmp	r3, #0
 8002826:	d104      	bne.n	8002832 <ToggleBoardLED+0x1a>
		HAL_GPIO_TogglePin(LED_GPIO5_GPIO_Port, LED_GPIO5_Pin);
 8002828:	2140      	movs	r1, #64	; 0x40
 800282a:	4806      	ldr	r0, [pc, #24]	; (8002844 <ToggleBoardLED+0x2c>)
 800282c:	f7fe fbf7 	bl	800101e <HAL_GPIO_TogglePin>
	else
		HAL_GPIO_TogglePin(LED_GPIO1_GPIO_Port, LED_GPIO1_Pin);
}
 8002830:	e003      	b.n	800283a <ToggleBoardLED+0x22>
		HAL_GPIO_TogglePin(LED_GPIO1_GPIO_Port, LED_GPIO1_Pin);
 8002832:	2120      	movs	r1, #32
 8002834:	4803      	ldr	r0, [pc, #12]	; (8002844 <ToggleBoardLED+0x2c>)
 8002836:	f7fe fbf2 	bl	800101e <HAL_GPIO_TogglePin>
}
 800283a:	bf00      	nop
 800283c:	3708      	adds	r7, #8
 800283e:	46bd      	mov	sp, r7
 8002840:	bd80      	pop	{r7, pc}
 8002842:	bf00      	nop
 8002844:	40010c00 	.word	0x40010c00

08002848 <I2C_Open>:
#include "stm32_i2c.h"
#include "my_delay.h"

int I2C_Open(struct I2C_Pins *i2c)
{
 8002848:	b580      	push	{r7, lr}
 800284a:	b086      	sub	sp, #24
 800284c:	af00      	add	r7, sp, #0
 800284e:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef GPIO_Out_InitStruct = {0};
 8002850:	f107 0308 	add.w	r3, r7, #8
 8002854:	2200      	movs	r2, #0
 8002856:	601a      	str	r2, [r3, #0]
 8002858:	605a      	str	r2, [r3, #4]
 800285a:	609a      	str	r2, [r3, #8]
 800285c:	60da      	str	r2, [r3, #12]

	GPIO_Out_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800285e:	2301      	movs	r3, #1
 8002860:	60fb      	str	r3, [r7, #12]
	GPIO_Out_InitStruct.Pull = GPIO_NOPULL;
 8002862:	2300      	movs	r3, #0
 8002864:	613b      	str	r3, [r7, #16]
	GPIO_Out_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002866:	2302      	movs	r3, #2
 8002868:	617b      	str	r3, [r7, #20]

	GPIO_Out_InitStruct.Pin = i2c->SCK_GPIO_Pin;
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	8a1b      	ldrh	r3, [r3, #16]
 800286e:	60bb      	str	r3, [r7, #8]
	HAL_GPIO_Init(i2c->SCK_GPIOx, &GPIO_Out_InitStruct);
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	68db      	ldr	r3, [r3, #12]
 8002874:	f107 0208 	add.w	r2, r7, #8
 8002878:	4611      	mov	r1, r2
 800287a:	4618      	mov	r0, r3
 800287c:	f7fe fa1c 	bl	8000cb8 <HAL_GPIO_Init>
	GPIO_Out_InitStruct.Pin = i2c->SDA_GPIO_Pin;
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	891b      	ldrh	r3, [r3, #8]
 8002884:	60bb      	str	r3, [r7, #8]
    HAL_GPIO_Init(i2c->SDA_GPIOx, &GPIO_Out_InitStruct);
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	685b      	ldr	r3, [r3, #4]
 800288a:	f107 0208 	add.w	r2, r7, #8
 800288e:	4611      	mov	r1, r2
 8002890:	4618      	mov	r0, r3
 8002892:	f7fe fa11 	bl	8000cb8 <HAL_GPIO_Init>

    HAL_GPIO_WritePin(i2c->SCK_GPIOx, i2c->SCK_GPIO_Pin, GPIO_PIN_SET);
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	68d8      	ldr	r0, [r3, #12]
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	8a1b      	ldrh	r3, [r3, #16]
 800289e:	2201      	movs	r2, #1
 80028a0:	4619      	mov	r1, r3
 80028a2:	f7fe fba4 	bl	8000fee <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(i2c->SDA_GPIOx, i2c->SDA_GPIO_Pin, GPIO_PIN_SET);
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	6858      	ldr	r0, [r3, #4]
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	891b      	ldrh	r3, [r3, #8]
 80028ae:	2201      	movs	r2, #1
 80028b0:	4619      	mov	r1, r3
 80028b2:	f7fe fb9c 	bl	8000fee <HAL_GPIO_WritePin>
    my_delay_count(10);
 80028b6:	200a      	movs	r0, #10
 80028b8:	f7ff ff3e 	bl	8002738 <my_delay_count>
    HAL_GPIO_WritePin(i2c->SCK_GPIOx, i2c->SCK_GPIO_Pin, GPIO_PIN_RESET);
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	68d8      	ldr	r0, [r3, #12]
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	8a1b      	ldrh	r3, [r3, #16]
 80028c4:	2200      	movs	r2, #0
 80028c6:	4619      	mov	r1, r3
 80028c8:	f7fe fb91 	bl	8000fee <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(i2c->SDA_GPIOx, i2c->SDA_GPIO_Pin, GPIO_PIN_RESET);
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	6858      	ldr	r0, [r3, #4]
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	891b      	ldrh	r3, [r3, #8]
 80028d4:	2200      	movs	r2, #0
 80028d6:	4619      	mov	r1, r3
 80028d8:	f7fe fb89 	bl	8000fee <HAL_GPIO_WritePin>
	my_delay_count(10);
 80028dc:	200a      	movs	r0, #10
 80028de:	f7ff ff2b 	bl	8002738 <my_delay_count>
    HAL_GPIO_WritePin(i2c->SCK_GPIOx, i2c->SCK_GPIO_Pin, GPIO_PIN_SET);
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	68d8      	ldr	r0, [r3, #12]
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	8a1b      	ldrh	r3, [r3, #16]
 80028ea:	2201      	movs	r2, #1
 80028ec:	4619      	mov	r1, r3
 80028ee:	f7fe fb7e 	bl	8000fee <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(i2c->SDA_GPIOx, i2c->SDA_GPIO_Pin, GPIO_PIN_SET);
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	6858      	ldr	r0, [r3, #4]
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	891b      	ldrh	r3, [r3, #8]
 80028fa:	2201      	movs	r2, #1
 80028fc:	4619      	mov	r1, r3
 80028fe:	f7fe fb76 	bl	8000fee <HAL_GPIO_WritePin>
    my_delay_count(20);
 8002902:	2014      	movs	r0, #20
 8002904:	f7ff ff18 	bl	8002738 <my_delay_count>
    return 0;
 8002908:	2300      	movs	r3, #0
}
 800290a:	4618      	mov	r0, r3
 800290c:	3718      	adds	r7, #24
 800290e:	46bd      	mov	sp, r7
 8002910:	bd80      	pop	{r7, pc}

08002912 <I2C_SendStart>:

void I2C_SendStart(struct I2C_Pins *i2c)
{
 8002912:	b580      	push	{r7, lr}
 8002914:	b086      	sub	sp, #24
 8002916:	af00      	add	r7, sp, #0
 8002918:	6078      	str	r0, [r7, #4]
    // Assert start bit
	GPIO_InitTypeDef GPIO_Out_InitStruct = {0};
 800291a:	f107 0308 	add.w	r3, r7, #8
 800291e:	2200      	movs	r2, #0
 8002920:	601a      	str	r2, [r3, #0]
 8002922:	605a      	str	r2, [r3, #4]
 8002924:	609a      	str	r2, [r3, #8]
 8002926:	60da      	str	r2, [r3, #12]
	GPIO_Out_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002928:	2301      	movs	r3, #1
 800292a:	60fb      	str	r3, [r7, #12]
	GPIO_Out_InitStruct.Pull = GPIO_NOPULL;
 800292c:	2300      	movs	r3, #0
 800292e:	613b      	str	r3, [r7, #16]
	GPIO_Out_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002930:	2302      	movs	r3, #2
 8002932:	617b      	str	r3, [r7, #20]
	GPIO_Out_InitStruct.Pin = i2c->SDA_GPIO_Pin;
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	891b      	ldrh	r3, [r3, #8]
 8002938:	60bb      	str	r3, [r7, #8]
	HAL_GPIO_Init(i2c->SDA_GPIOx, &GPIO_Out_InitStruct);
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	685b      	ldr	r3, [r3, #4]
 800293e:	f107 0208 	add.w	r2, r7, #8
 8002942:	4611      	mov	r1, r2
 8002944:	4618      	mov	r0, r3
 8002946:	f7fe f9b7 	bl	8000cb8 <HAL_GPIO_Init>
	HAL_GPIO_WritePin(i2c->SDA_GPIOx, i2c->SDA_GPIO_Pin, GPIO_PIN_SET);
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	6858      	ldr	r0, [r3, #4]
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	891b      	ldrh	r3, [r3, #8]
 8002952:	2201      	movs	r2, #1
 8002954:	4619      	mov	r1, r3
 8002956:	f7fe fb4a 	bl	8000fee <HAL_GPIO_WritePin>
	my_delay_count(5);
 800295a:	2005      	movs	r0, #5
 800295c:	f7ff feec 	bl	8002738 <my_delay_count>
	HAL_GPIO_WritePin(i2c->SCK_GPIOx, i2c->SCK_GPIO_Pin, GPIO_PIN_SET);
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	68d8      	ldr	r0, [r3, #12]
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	8a1b      	ldrh	r3, [r3, #16]
 8002968:	2201      	movs	r2, #1
 800296a:	4619      	mov	r1, r3
 800296c:	f7fe fb3f 	bl	8000fee <HAL_GPIO_WritePin>
	my_delay_count(5);
 8002970:	2005      	movs	r0, #5
 8002972:	f7ff fee1 	bl	8002738 <my_delay_count>
	HAL_GPIO_WritePin(i2c->SDA_GPIOx, i2c->SDA_GPIO_Pin, GPIO_PIN_RESET);
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	6858      	ldr	r0, [r3, #4]
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	891b      	ldrh	r3, [r3, #8]
 800297e:	2200      	movs	r2, #0
 8002980:	4619      	mov	r1, r3
 8002982:	f7fe fb34 	bl	8000fee <HAL_GPIO_WritePin>
	my_delay_count(5);
 8002986:	2005      	movs	r0, #5
 8002988:	f7ff fed6 	bl	8002738 <my_delay_count>
	HAL_GPIO_WritePin(i2c->SCK_GPIOx, i2c->SCK_GPIO_Pin, GPIO_PIN_RESET);
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	68d8      	ldr	r0, [r3, #12]
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	8a1b      	ldrh	r3, [r3, #16]
 8002994:	2200      	movs	r2, #0
 8002996:	4619      	mov	r1, r3
 8002998:	f7fe fb29 	bl	8000fee <HAL_GPIO_WritePin>
	my_delay_count(5);
 800299c:	2005      	movs	r0, #5
 800299e:	f7ff fecb 	bl	8002738 <my_delay_count>
}
 80029a2:	bf00      	nop
 80029a4:	3718      	adds	r7, #24
 80029a6:	46bd      	mov	sp, r7
 80029a8:	bd80      	pop	{r7, pc}

080029aa <I2C_Stop>:

void I2C_Stop(struct I2C_Pins *i2c)
{
 80029aa:	b580      	push	{r7, lr}
 80029ac:	b086      	sub	sp, #24
 80029ae:	af00      	add	r7, sp, #0
 80029b0:	6078      	str	r0, [r7, #4]
    my_delay_count(5);
 80029b2:	2005      	movs	r0, #5
 80029b4:	f7ff fec0 	bl	8002738 <my_delay_count>
	GPIO_InitTypeDef GPIO_Out_InitStruct = {0};
 80029b8:	f107 0308 	add.w	r3, r7, #8
 80029bc:	2200      	movs	r2, #0
 80029be:	601a      	str	r2, [r3, #0]
 80029c0:	605a      	str	r2, [r3, #4]
 80029c2:	609a      	str	r2, [r3, #8]
 80029c4:	60da      	str	r2, [r3, #12]
	GPIO_Out_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80029c6:	2301      	movs	r3, #1
 80029c8:	60fb      	str	r3, [r7, #12]
	GPIO_Out_InitStruct.Pull = GPIO_NOPULL;
 80029ca:	2300      	movs	r3, #0
 80029cc:	613b      	str	r3, [r7, #16]
	GPIO_Out_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029ce:	2302      	movs	r3, #2
 80029d0:	617b      	str	r3, [r7, #20]
	GPIO_Out_InitStruct.Pin = i2c->SDA_GPIO_Pin;
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	891b      	ldrh	r3, [r3, #8]
 80029d6:	60bb      	str	r3, [r7, #8]
    HAL_GPIO_Init(i2c->SDA_GPIOx, &GPIO_Out_InitStruct);
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	685b      	ldr	r3, [r3, #4]
 80029dc:	f107 0208 	add.w	r2, r7, #8
 80029e0:	4611      	mov	r1, r2
 80029e2:	4618      	mov	r0, r3
 80029e4:	f7fe f968 	bl	8000cb8 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(i2c->SDA_GPIOx, i2c->SDA_GPIO_Pin, GPIO_PIN_RESET);
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	6858      	ldr	r0, [r3, #4]
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	891b      	ldrh	r3, [r3, #8]
 80029f0:	2200      	movs	r2, #0
 80029f2:	4619      	mov	r1, r3
 80029f4:	f7fe fafb 	bl	8000fee <HAL_GPIO_WritePin>
	my_delay_count(5);
 80029f8:	2005      	movs	r0, #5
 80029fa:	f7ff fe9d 	bl	8002738 <my_delay_count>
    HAL_GPIO_WritePin(i2c->SCK_GPIOx, i2c->SCK_GPIO_Pin, GPIO_PIN_SET);
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	68d8      	ldr	r0, [r3, #12]
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	8a1b      	ldrh	r3, [r3, #16]
 8002a06:	2201      	movs	r2, #1
 8002a08:	4619      	mov	r1, r3
 8002a0a:	f7fe faf0 	bl	8000fee <HAL_GPIO_WritePin>
	my_delay_count(5);
 8002a0e:	2005      	movs	r0, #5
 8002a10:	f7ff fe92 	bl	8002738 <my_delay_count>
    HAL_GPIO_WritePin(i2c->SDA_GPIOx, i2c->SDA_GPIO_Pin, GPIO_PIN_SET);
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	6858      	ldr	r0, [r3, #4]
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	891b      	ldrh	r3, [r3, #8]
 8002a1c:	2201      	movs	r2, #1
 8002a1e:	4619      	mov	r1, r3
 8002a20:	f7fe fae5 	bl	8000fee <HAL_GPIO_WritePin>
	my_delay_count(5);
 8002a24:	2005      	movs	r0, #5
 8002a26:	f7ff fe87 	bl	8002738 <my_delay_count>
}
 8002a2a:	bf00      	nop
 8002a2c:	3718      	adds	r7, #24
 8002a2e:	46bd      	mov	sp, r7
 8002a30:	bd80      	pop	{r7, pc}

08002a32 <I2C_Ack>:

void I2C_Ack(struct I2C_Pins *i2c)
{
 8002a32:	b580      	push	{r7, lr}
 8002a34:	b086      	sub	sp, #24
 8002a36:	af00      	add	r7, sp, #0
 8002a38:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(i2c->SCK_GPIOx, i2c->SCK_GPIO_Pin, GPIO_PIN_RESET);
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	68d8      	ldr	r0, [r3, #12]
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	8a1b      	ldrh	r3, [r3, #16]
 8002a42:	2200      	movs	r2, #0
 8002a44:	4619      	mov	r1, r3
 8002a46:	f7fe fad2 	bl	8000fee <HAL_GPIO_WritePin>
	GPIO_InitTypeDef GPIO_Out_InitStruct = {0};
 8002a4a:	f107 0308 	add.w	r3, r7, #8
 8002a4e:	2200      	movs	r2, #0
 8002a50:	601a      	str	r2, [r3, #0]
 8002a52:	605a      	str	r2, [r3, #4]
 8002a54:	609a      	str	r2, [r3, #8]
 8002a56:	60da      	str	r2, [r3, #12]
	GPIO_Out_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002a58:	2301      	movs	r3, #1
 8002a5a:	60fb      	str	r3, [r7, #12]
	GPIO_Out_InitStruct.Pull = GPIO_NOPULL;
 8002a5c:	2300      	movs	r3, #0
 8002a5e:	613b      	str	r3, [r7, #16]
	GPIO_Out_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a60:	2302      	movs	r3, #2
 8002a62:	617b      	str	r3, [r7, #20]
	GPIO_Out_InitStruct.Pin = i2c->SDA_GPIO_Pin;
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	891b      	ldrh	r3, [r3, #8]
 8002a68:	60bb      	str	r3, [r7, #8]
	HAL_GPIO_Init(i2c->SDA_GPIOx, &GPIO_Out_InitStruct);
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	685b      	ldr	r3, [r3, #4]
 8002a6e:	f107 0208 	add.w	r2, r7, #8
 8002a72:	4611      	mov	r1, r2
 8002a74:	4618      	mov	r0, r3
 8002a76:	f7fe f91f 	bl	8000cb8 <HAL_GPIO_Init>
	my_delay_count(5);
 8002a7a:	2005      	movs	r0, #5
 8002a7c:	f7ff fe5c 	bl	8002738 <my_delay_count>
	HAL_GPIO_WritePin(i2c->SDA_GPIOx, i2c->SDA_GPIO_Pin, GPIO_PIN_RESET);
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	6858      	ldr	r0, [r3, #4]
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	891b      	ldrh	r3, [r3, #8]
 8002a88:	2200      	movs	r2, #0
 8002a8a:	4619      	mov	r1, r3
 8002a8c:	f7fe faaf 	bl	8000fee <HAL_GPIO_WritePin>
	my_delay_count(5);
 8002a90:	2005      	movs	r0, #5
 8002a92:	f7ff fe51 	bl	8002738 <my_delay_count>
	HAL_GPIO_WritePin(i2c->SCK_GPIOx, i2c->SCK_GPIO_Pin, GPIO_PIN_SET);
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	68d8      	ldr	r0, [r3, #12]
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	8a1b      	ldrh	r3, [r3, #16]
 8002a9e:	2201      	movs	r2, #1
 8002aa0:	4619      	mov	r1, r3
 8002aa2:	f7fe faa4 	bl	8000fee <HAL_GPIO_WritePin>
	my_delay_count(5);
 8002aa6:	2005      	movs	r0, #5
 8002aa8:	f7ff fe46 	bl	8002738 <my_delay_count>
	HAL_GPIO_WritePin(i2c->SCK_GPIOx, i2c->SCK_GPIO_Pin, GPIO_PIN_RESET);
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	68d8      	ldr	r0, [r3, #12]
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	8a1b      	ldrh	r3, [r3, #16]
 8002ab4:	2200      	movs	r2, #0
 8002ab6:	4619      	mov	r1, r3
 8002ab8:	f7fe fa99 	bl	8000fee <HAL_GPIO_WritePin>
	my_delay_count(5);
 8002abc:	2005      	movs	r0, #5
 8002abe:	f7ff fe3b 	bl	8002738 <my_delay_count>
}
 8002ac2:	bf00      	nop
 8002ac4:	3718      	adds	r7, #24
 8002ac6:	46bd      	mov	sp, r7
 8002ac8:	bd80      	pop	{r7, pc}

08002aca <I2C_NAck>:

void I2C_NAck(struct I2C_Pins *i2c)
{
 8002aca:	b580      	push	{r7, lr}
 8002acc:	b086      	sub	sp, #24
 8002ace:	af00      	add	r7, sp, #0
 8002ad0:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(i2c->SCK_GPIOx, i2c->SCK_GPIO_Pin, GPIO_PIN_RESET);
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	68d8      	ldr	r0, [r3, #12]
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	8a1b      	ldrh	r3, [r3, #16]
 8002ada:	2200      	movs	r2, #0
 8002adc:	4619      	mov	r1, r3
 8002ade:	f7fe fa86 	bl	8000fee <HAL_GPIO_WritePin>
	GPIO_InitTypeDef GPIO_Out_InitStruct = {0};
 8002ae2:	f107 0308 	add.w	r3, r7, #8
 8002ae6:	2200      	movs	r2, #0
 8002ae8:	601a      	str	r2, [r3, #0]
 8002aea:	605a      	str	r2, [r3, #4]
 8002aec:	609a      	str	r2, [r3, #8]
 8002aee:	60da      	str	r2, [r3, #12]
	GPIO_Out_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002af0:	2301      	movs	r3, #1
 8002af2:	60fb      	str	r3, [r7, #12]
	GPIO_Out_InitStruct.Pull = GPIO_NOPULL;
 8002af4:	2300      	movs	r3, #0
 8002af6:	613b      	str	r3, [r7, #16]
	GPIO_Out_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002af8:	2302      	movs	r3, #2
 8002afa:	617b      	str	r3, [r7, #20]
	GPIO_Out_InitStruct.Pin = i2c->SDA_GPIO_Pin;
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	891b      	ldrh	r3, [r3, #8]
 8002b00:	60bb      	str	r3, [r7, #8]
	HAL_GPIO_Init(i2c->SDA_GPIOx, &GPIO_Out_InitStruct);
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	685b      	ldr	r3, [r3, #4]
 8002b06:	f107 0208 	add.w	r2, r7, #8
 8002b0a:	4611      	mov	r1, r2
 8002b0c:	4618      	mov	r0, r3
 8002b0e:	f7fe f8d3 	bl	8000cb8 <HAL_GPIO_Init>
	my_delay_count(5);
 8002b12:	2005      	movs	r0, #5
 8002b14:	f7ff fe10 	bl	8002738 <my_delay_count>
	HAL_GPIO_WritePin(i2c->SDA_GPIOx, i2c->SDA_GPIO_Pin, GPIO_PIN_SET);
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	6858      	ldr	r0, [r3, #4]
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	891b      	ldrh	r3, [r3, #8]
 8002b20:	2201      	movs	r2, #1
 8002b22:	4619      	mov	r1, r3
 8002b24:	f7fe fa63 	bl	8000fee <HAL_GPIO_WritePin>
	my_delay_count(5);
 8002b28:	2005      	movs	r0, #5
 8002b2a:	f7ff fe05 	bl	8002738 <my_delay_count>
	HAL_GPIO_WritePin(i2c->SCK_GPIOx, i2c->SCK_GPIO_Pin, GPIO_PIN_SET);
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	68d8      	ldr	r0, [r3, #12]
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	8a1b      	ldrh	r3, [r3, #16]
 8002b36:	2201      	movs	r2, #1
 8002b38:	4619      	mov	r1, r3
 8002b3a:	f7fe fa58 	bl	8000fee <HAL_GPIO_WritePin>
	my_delay_count(5);
 8002b3e:	2005      	movs	r0, #5
 8002b40:	f7ff fdfa 	bl	8002738 <my_delay_count>
	HAL_GPIO_WritePin(i2c->SCK_GPIOx, i2c->SCK_GPIO_Pin, GPIO_PIN_RESET);
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	68d8      	ldr	r0, [r3, #12]
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	8a1b      	ldrh	r3, [r3, #16]
 8002b4c:	2200      	movs	r2, #0
 8002b4e:	4619      	mov	r1, r3
 8002b50:	f7fe fa4d 	bl	8000fee <HAL_GPIO_WritePin>
	my_delay_count(5);
 8002b54:	2005      	movs	r0, #5
 8002b56:	f7ff fdef 	bl	8002738 <my_delay_count>
}
 8002b5a:	bf00      	nop
 8002b5c:	3718      	adds	r7, #24
 8002b5e:	46bd      	mov	sp, r7
 8002b60:	bd80      	pop	{r7, pc}

08002b62 <I2C_Wait_Ack>:

uint8_t I2C_Wait_Ack(struct I2C_Pins *i2c)
{
 8002b62:	b580      	push	{r7, lr}
 8002b64:	b088      	sub	sp, #32
 8002b66:	af00      	add	r7, sp, #0
 8002b68:	6078      	str	r0, [r7, #4]
	uint8_t bit;
	uint8_t ucErrTime = 0;
 8002b6a:	2300      	movs	r3, #0
 8002b6c:	77bb      	strb	r3, [r7, #30]
	GPIO_InitTypeDef GPIO_In_InitStruct = {0};
 8002b6e:	f107 030c 	add.w	r3, r7, #12
 8002b72:	2200      	movs	r2, #0
 8002b74:	601a      	str	r2, [r3, #0]
 8002b76:	605a      	str	r2, [r3, #4]
 8002b78:	609a      	str	r2, [r3, #8]
 8002b7a:	60da      	str	r2, [r3, #12]
	GPIO_In_InitStruct.Mode = GPIO_MODE_INPUT;
 8002b7c:	2300      	movs	r3, #0
 8002b7e:	613b      	str	r3, [r7, #16]
	GPIO_In_InitStruct.Pull = GPIO_PULLUP;
 8002b80:	2301      	movs	r3, #1
 8002b82:	617b      	str	r3, [r7, #20]
	GPIO_In_InitStruct.Pin = i2c->SDA_GPIO_Pin;
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	891b      	ldrh	r3, [r3, #8]
 8002b88:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(i2c->SDA_GPIOx, &GPIO_In_InitStruct);
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	685b      	ldr	r3, [r3, #4]
 8002b8e:	f107 020c 	add.w	r2, r7, #12
 8002b92:	4611      	mov	r1, r2
 8002b94:	4618      	mov	r0, r3
 8002b96:	f7fe f88f 	bl	8000cb8 <HAL_GPIO_Init>
	HAL_GPIO_WritePin(i2c->SCK_GPIOx, i2c->SCK_GPIO_Pin, GPIO_PIN_SET);
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	68d8      	ldr	r0, [r3, #12]
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	8a1b      	ldrh	r3, [r3, #16]
 8002ba2:	2201      	movs	r2, #1
 8002ba4:	4619      	mov	r1, r3
 8002ba6:	f7fe fa22 	bl	8000fee <HAL_GPIO_WritePin>
	my_delay_count(5);
 8002baa:	2005      	movs	r0, #5
 8002bac:	f7ff fdc4 	bl	8002738 <my_delay_count>
	bit = (HAL_GPIO_ReadPin(i2c->SDA_GPIOx, i2c->SDA_GPIO_Pin) == GPIO_PIN_RESET ? 0 : 1);
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	685a      	ldr	r2, [r3, #4]
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	891b      	ldrh	r3, [r3, #8]
 8002bb8:	4619      	mov	r1, r3
 8002bba:	4610      	mov	r0, r2
 8002bbc:	f7fe fa00 	bl	8000fc0 <HAL_GPIO_ReadPin>
 8002bc0:	4603      	mov	r3, r0
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	bf14      	ite	ne
 8002bc6:	2301      	movne	r3, #1
 8002bc8:	2300      	moveq	r3, #0
 8002bca:	b2db      	uxtb	r3, r3
 8002bcc:	77fb      	strb	r3, [r7, #31]
	while (bit)
 8002bce:	e01c      	b.n	8002c0a <I2C_Wait_Ack+0xa8>
	{
		ucErrTime++;
 8002bd0:	7fbb      	ldrb	r3, [r7, #30]
 8002bd2:	3301      	adds	r3, #1
 8002bd4:	77bb      	strb	r3, [r7, #30]
		if(ucErrTime > 250)
 8002bd6:	7fbb      	ldrb	r3, [r7, #30]
 8002bd8:	2bfa      	cmp	r3, #250	; 0xfa
 8002bda:	d904      	bls.n	8002be6 <I2C_Wait_Ack+0x84>
		{
			I2C_Stop(i2c);
 8002bdc:	6878      	ldr	r0, [r7, #4]
 8002bde:	f7ff fee4 	bl	80029aa <I2C_Stop>
			return 1;
 8002be2:	2301      	movs	r3, #1
 8002be4:	e020      	b.n	8002c28 <I2C_Wait_Ack+0xc6>
		}
		my_delay_count(5);
 8002be6:	2005      	movs	r0, #5
 8002be8:	f7ff fda6 	bl	8002738 <my_delay_count>
		bit = (HAL_GPIO_ReadPin(i2c->SDA_GPIOx, i2c->SDA_GPIO_Pin) == GPIO_PIN_RESET ? 0 : 1);
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	685a      	ldr	r2, [r3, #4]
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	891b      	ldrh	r3, [r3, #8]
 8002bf4:	4619      	mov	r1, r3
 8002bf6:	4610      	mov	r0, r2
 8002bf8:	f7fe f9e2 	bl	8000fc0 <HAL_GPIO_ReadPin>
 8002bfc:	4603      	mov	r3, r0
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	bf14      	ite	ne
 8002c02:	2301      	movne	r3, #1
 8002c04:	2300      	moveq	r3, #0
 8002c06:	b2db      	uxtb	r3, r3
 8002c08:	77fb      	strb	r3, [r7, #31]
	while (bit)
 8002c0a:	7ffb      	ldrb	r3, [r7, #31]
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d1df      	bne.n	8002bd0 <I2C_Wait_Ack+0x6e>
	}
	HAL_GPIO_WritePin(i2c->SCK_GPIOx, i2c->SCK_GPIO_Pin, GPIO_PIN_RESET);
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	68d8      	ldr	r0, [r3, #12]
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	8a1b      	ldrh	r3, [r3, #16]
 8002c18:	2200      	movs	r2, #0
 8002c1a:	4619      	mov	r1, r3
 8002c1c:	f7fe f9e7 	bl	8000fee <HAL_GPIO_WritePin>
	my_delay_count(5);
 8002c20:	2005      	movs	r0, #5
 8002c22:	f7ff fd89 	bl	8002738 <my_delay_count>
	return 0;
 8002c26:	2300      	movs	r3, #0
}
 8002c28:	4618      	mov	r0, r3
 8002c2a:	3720      	adds	r7, #32
 8002c2c:	46bd      	mov	sp, r7
 8002c2e:	bd80      	pop	{r7, pc}

08002c30 <I2C_Send_Byte>:

void I2C_Send_Byte(struct I2C_Pins *i2c, uint8_t data)
{
 8002c30:	b580      	push	{r7, lr}
 8002c32:	b088      	sub	sp, #32
 8002c34:	af00      	add	r7, sp, #0
 8002c36:	6078      	str	r0, [r7, #4]
 8002c38:	460b      	mov	r3, r1
 8002c3a:	70fb      	strb	r3, [r7, #3]
	uint8_t i;
	GPIO_InitTypeDef GPIO_Out_InitStruct = {0};
 8002c3c:	f107 030c 	add.w	r3, r7, #12
 8002c40:	2200      	movs	r2, #0
 8002c42:	601a      	str	r2, [r3, #0]
 8002c44:	605a      	str	r2, [r3, #4]
 8002c46:	609a      	str	r2, [r3, #8]
 8002c48:	60da      	str	r2, [r3, #12]
	GPIO_Out_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002c4a:	2301      	movs	r3, #1
 8002c4c:	613b      	str	r3, [r7, #16]
	GPIO_Out_InitStruct.Pull = GPIO_NOPULL;
 8002c4e:	2300      	movs	r3, #0
 8002c50:	617b      	str	r3, [r7, #20]
	GPIO_Out_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c52:	2302      	movs	r3, #2
 8002c54:	61bb      	str	r3, [r7, #24]
	GPIO_Out_InitStruct.Pin = i2c->SDA_GPIO_Pin;
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	891b      	ldrh	r3, [r3, #8]
 8002c5a:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(i2c->SDA_GPIOx, &GPIO_Out_InitStruct);
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	685b      	ldr	r3, [r3, #4]
 8002c60:	f107 020c 	add.w	r2, r7, #12
 8002c64:	4611      	mov	r1, r2
 8002c66:	4618      	mov	r0, r3
 8002c68:	f7fe f826 	bl	8000cb8 <HAL_GPIO_Init>
	HAL_GPIO_WritePin(i2c->SCK_GPIOx, i2c->SCK_GPIO_Pin, GPIO_PIN_RESET);
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	68d8      	ldr	r0, [r3, #12]
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	8a1b      	ldrh	r3, [r3, #16]
 8002c74:	2200      	movs	r2, #0
 8002c76:	4619      	mov	r1, r3
 8002c78:	f7fe f9b9 	bl	8000fee <HAL_GPIO_WritePin>
	my_delay_count(5);
 8002c7c:	2005      	movs	r0, #5
 8002c7e:	f7ff fd5b 	bl	8002738 <my_delay_count>
	for (i = 0; i < 8; i++)
 8002c82:	2300      	movs	r3, #0
 8002c84:	77fb      	strb	r3, [r7, #31]
 8002c86:	e033      	b.n	8002cf0 <I2C_Send_Byte+0xc0>
    {
		if (data & 0x80)
 8002c88:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	da08      	bge.n	8002ca2 <I2C_Send_Byte+0x72>
			HAL_GPIO_WritePin(i2c->SDA_GPIOx, i2c->SDA_GPIO_Pin, GPIO_PIN_SET);
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	6858      	ldr	r0, [r3, #4]
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	891b      	ldrh	r3, [r3, #8]
 8002c98:	2201      	movs	r2, #1
 8002c9a:	4619      	mov	r1, r3
 8002c9c:	f7fe f9a7 	bl	8000fee <HAL_GPIO_WritePin>
 8002ca0:	e007      	b.n	8002cb2 <I2C_Send_Byte+0x82>
		else
			HAL_GPIO_WritePin(i2c->SDA_GPIOx, i2c->SDA_GPIO_Pin, GPIO_PIN_RESET);
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	6858      	ldr	r0, [r3, #4]
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	891b      	ldrh	r3, [r3, #8]
 8002caa:	2200      	movs	r2, #0
 8002cac:	4619      	mov	r1, r3
 8002cae:	f7fe f99e 	bl	8000fee <HAL_GPIO_WritePin>

		my_delay_count(5);
 8002cb2:	2005      	movs	r0, #5
 8002cb4:	f7ff fd40 	bl	8002738 <my_delay_count>
		data <<= 1;
 8002cb8:	78fb      	ldrb	r3, [r7, #3]
 8002cba:	005b      	lsls	r3, r3, #1
 8002cbc:	70fb      	strb	r3, [r7, #3]
		HAL_GPIO_WritePin(i2c->SCK_GPIOx, i2c->SCK_GPIO_Pin, GPIO_PIN_SET);
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	68d8      	ldr	r0, [r3, #12]
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	8a1b      	ldrh	r3, [r3, #16]
 8002cc6:	2201      	movs	r2, #1
 8002cc8:	4619      	mov	r1, r3
 8002cca:	f7fe f990 	bl	8000fee <HAL_GPIO_WritePin>
		my_delay_count(5);
 8002cce:	2005      	movs	r0, #5
 8002cd0:	f7ff fd32 	bl	8002738 <my_delay_count>
		HAL_GPIO_WritePin(i2c->SCK_GPIOx, i2c->SCK_GPIO_Pin, GPIO_PIN_RESET);
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	68d8      	ldr	r0, [r3, #12]
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	8a1b      	ldrh	r3, [r3, #16]
 8002cdc:	2200      	movs	r2, #0
 8002cde:	4619      	mov	r1, r3
 8002ce0:	f7fe f985 	bl	8000fee <HAL_GPIO_WritePin>
		my_delay_count(5);
 8002ce4:	2005      	movs	r0, #5
 8002ce6:	f7ff fd27 	bl	8002738 <my_delay_count>
	for (i = 0; i < 8; i++)
 8002cea:	7ffb      	ldrb	r3, [r7, #31]
 8002cec:	3301      	adds	r3, #1
 8002cee:	77fb      	strb	r3, [r7, #31]
 8002cf0:	7ffb      	ldrb	r3, [r7, #31]
 8002cf2:	2b07      	cmp	r3, #7
 8002cf4:	d9c8      	bls.n	8002c88 <I2C_Send_Byte+0x58>
    }
	I2C_Wait_Ack(i2c);
 8002cf6:	6878      	ldr	r0, [r7, #4]
 8002cf8:	f7ff ff33 	bl	8002b62 <I2C_Wait_Ack>
}
 8002cfc:	bf00      	nop
 8002cfe:	3720      	adds	r7, #32
 8002d00:	46bd      	mov	sp, r7
 8002d02:	bd80      	pop	{r7, pc}

08002d04 <I2C_Read_Byte>:

uint8_t I2C_Read_Byte(struct I2C_Pins *i2c, uint8_t ack)
{
 8002d04:	b580      	push	{r7, lr}
 8002d06:	b088      	sub	sp, #32
 8002d08:	af00      	add	r7, sp, #0
 8002d0a:	6078      	str	r0, [r7, #4]
 8002d0c:	460b      	mov	r3, r1
 8002d0e:	70fb      	strb	r3, [r7, #3]
	uint8_t i, receive = 0;
 8002d10:	2300      	movs	r3, #0
 8002d12:	77bb      	strb	r3, [r7, #30]
	uint8_t bit;
	GPIO_InitTypeDef GPIO_In_InitStruct = {0};
 8002d14:	f107 030c 	add.w	r3, r7, #12
 8002d18:	2200      	movs	r2, #0
 8002d1a:	601a      	str	r2, [r3, #0]
 8002d1c:	605a      	str	r2, [r3, #4]
 8002d1e:	609a      	str	r2, [r3, #8]
 8002d20:	60da      	str	r2, [r3, #12]
	GPIO_In_InitStruct.Mode = GPIO_MODE_INPUT;
 8002d22:	2300      	movs	r3, #0
 8002d24:	613b      	str	r3, [r7, #16]
	GPIO_In_InitStruct.Pull = GPIO_PULLUP;
 8002d26:	2301      	movs	r3, #1
 8002d28:	617b      	str	r3, [r7, #20]
	GPIO_In_InitStruct.Pin = i2c->SDA_GPIO_Pin;
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	891b      	ldrh	r3, [r3, #8]
 8002d2e:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(i2c->SDA_GPIOx, &GPIO_In_InitStruct);
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	685b      	ldr	r3, [r3, #4]
 8002d34:	f107 020c 	add.w	r2, r7, #12
 8002d38:	4611      	mov	r1, r2
 8002d3a:	4618      	mov	r0, r3
 8002d3c:	f7fd ffbc 	bl	8000cb8 <HAL_GPIO_Init>
	my_delay_count(5);
 8002d40:	2005      	movs	r0, #5
 8002d42:	f7ff fcf9 	bl	8002738 <my_delay_count>
	for (i = 0; i < 8; i++)
 8002d46:	2300      	movs	r3, #0
 8002d48:	77fb      	strb	r3, [r7, #31]
 8002d4a:	e033      	b.n	8002db4 <I2C_Read_Byte+0xb0>
	{
		HAL_GPIO_WritePin(i2c->SCK_GPIOx, i2c->SCK_GPIO_Pin, GPIO_PIN_RESET);
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	68d8      	ldr	r0, [r3, #12]
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	8a1b      	ldrh	r3, [r3, #16]
 8002d54:	2200      	movs	r2, #0
 8002d56:	4619      	mov	r1, r3
 8002d58:	f7fe f949 	bl	8000fee <HAL_GPIO_WritePin>
		my_delay_count(5);
 8002d5c:	2005      	movs	r0, #5
 8002d5e:	f7ff fceb 	bl	8002738 <my_delay_count>
		HAL_GPIO_WritePin(i2c->SCK_GPIOx, i2c->SCK_GPIO_Pin, GPIO_PIN_SET);
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	68d8      	ldr	r0, [r3, #12]
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	8a1b      	ldrh	r3, [r3, #16]
 8002d6a:	2201      	movs	r2, #1
 8002d6c:	4619      	mov	r1, r3
 8002d6e:	f7fe f93e 	bl	8000fee <HAL_GPIO_WritePin>
		receive <<= 1;
 8002d72:	7fbb      	ldrb	r3, [r7, #30]
 8002d74:	005b      	lsls	r3, r3, #1
 8002d76:	77bb      	strb	r3, [r7, #30]
		my_delay_count(5);
 8002d78:	2005      	movs	r0, #5
 8002d7a:	f7ff fcdd 	bl	8002738 <my_delay_count>
		bit = (HAL_GPIO_ReadPin(i2c->SDA_GPIOx, i2c->SDA_GPIO_Pin) == GPIO_PIN_RESET ? 0 : 1);
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	685a      	ldr	r2, [r3, #4]
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	891b      	ldrh	r3, [r3, #8]
 8002d86:	4619      	mov	r1, r3
 8002d88:	4610      	mov	r0, r2
 8002d8a:	f7fe f919 	bl	8000fc0 <HAL_GPIO_ReadPin>
 8002d8e:	4603      	mov	r3, r0
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	bf14      	ite	ne
 8002d94:	2301      	movne	r3, #1
 8002d96:	2300      	moveq	r3, #0
 8002d98:	b2db      	uxtb	r3, r3
 8002d9a:	777b      	strb	r3, [r7, #29]
		my_delay_count(5);
 8002d9c:	2005      	movs	r0, #5
 8002d9e:	f7ff fccb 	bl	8002738 <my_delay_count>
		if (bit) receive++;
 8002da2:	7f7b      	ldrb	r3, [r7, #29]
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d002      	beq.n	8002dae <I2C_Read_Byte+0xaa>
 8002da8:	7fbb      	ldrb	r3, [r7, #30]
 8002daa:	3301      	adds	r3, #1
 8002dac:	77bb      	strb	r3, [r7, #30]
	for (i = 0; i < 8; i++)
 8002dae:	7ffb      	ldrb	r3, [r7, #31]
 8002db0:	3301      	adds	r3, #1
 8002db2:	77fb      	strb	r3, [r7, #31]
 8002db4:	7ffb      	ldrb	r3, [r7, #31]
 8002db6:	2b07      	cmp	r3, #7
 8002db8:	d9c8      	bls.n	8002d4c <I2C_Read_Byte+0x48>
	}
	if (!ack)
 8002dba:	78fb      	ldrb	r3, [r7, #3]
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d103      	bne.n	8002dc8 <I2C_Read_Byte+0xc4>
		I2C_NAck(i2c);//??nACK
 8002dc0:	6878      	ldr	r0, [r7, #4]
 8002dc2:	f7ff fe82 	bl	8002aca <I2C_NAck>
 8002dc6:	e002      	b.n	8002dce <I2C_Read_Byte+0xca>
	else
		I2C_Ack(i2c); //??ACK
 8002dc8:	6878      	ldr	r0, [r7, #4]
 8002dca:	f7ff fe32 	bl	8002a32 <I2C_Ack>
	return receive;
 8002dce:	7fbb      	ldrb	r3, [r7, #30]
}
 8002dd0:	4618      	mov	r0, r3
 8002dd2:	3720      	adds	r7, #32
 8002dd4:	46bd      	mov	sp, r7
 8002dd6:	bd80      	pop	{r7, pc}

08002dd8 <I2C_WriteBytesNoAddr>:
        I2C_Send_Byte(i2c, pData[i]);
    I2C_Stop(i2c);
}

void I2C_WriteBytesNoAddr(struct I2C_Pins *i2c, uint8_t *pData, int len)
{
 8002dd8:	b580      	push	{r7, lr}
 8002dda:	b086      	sub	sp, #24
 8002ddc:	af00      	add	r7, sp, #0
 8002dde:	60f8      	str	r0, [r7, #12]
 8002de0:	60b9      	str	r1, [r7, #8]
 8002de2:	607a      	str	r2, [r7, #4]
    int i;
    I2C_SendStart(i2c);
 8002de4:	68f8      	ldr	r0, [r7, #12]
 8002de6:	f7ff fd94 	bl	8002912 <I2C_SendStart>
    I2C_Send_Byte(i2c, i2c->dev_addr << 1);
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	781b      	ldrb	r3, [r3, #0]
 8002dee:	005b      	lsls	r3, r3, #1
 8002df0:	b2db      	uxtb	r3, r3
 8002df2:	4619      	mov	r1, r3
 8002df4:	68f8      	ldr	r0, [r7, #12]
 8002df6:	f7ff ff1b 	bl	8002c30 <I2C_Send_Byte>
	for (i = 0; i < len; i++)
 8002dfa:	2300      	movs	r3, #0
 8002dfc:	617b      	str	r3, [r7, #20]
 8002dfe:	e00a      	b.n	8002e16 <I2C_WriteBytesNoAddr+0x3e>
        I2C_Send_Byte(i2c, pData[i]);
 8002e00:	697b      	ldr	r3, [r7, #20]
 8002e02:	68ba      	ldr	r2, [r7, #8]
 8002e04:	4413      	add	r3, r2
 8002e06:	781b      	ldrb	r3, [r3, #0]
 8002e08:	4619      	mov	r1, r3
 8002e0a:	68f8      	ldr	r0, [r7, #12]
 8002e0c:	f7ff ff10 	bl	8002c30 <I2C_Send_Byte>
	for (i = 0; i < len; i++)
 8002e10:	697b      	ldr	r3, [r7, #20]
 8002e12:	3301      	adds	r3, #1
 8002e14:	617b      	str	r3, [r7, #20]
 8002e16:	697a      	ldr	r2, [r7, #20]
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	429a      	cmp	r2, r3
 8002e1c:	dbf0      	blt.n	8002e00 <I2C_WriteBytesNoAddr+0x28>
    I2C_Stop(i2c);
 8002e1e:	68f8      	ldr	r0, [r7, #12]
 8002e20:	f7ff fdc3 	bl	80029aa <I2C_Stop>
}
 8002e24:	bf00      	nop
 8002e26:	3718      	adds	r7, #24
 8002e28:	46bd      	mov	sp, r7
 8002e2a:	bd80      	pop	{r7, pc}

08002e2c <I2C_ReadBytesNoAddr>:

    return u8Data;
}

void I2C_ReadBytesNoAddr(struct I2C_Pins *i2c, int len, uint8_t *pData)
{
 8002e2c:	b590      	push	{r4, r7, lr}
 8002e2e:	b087      	sub	sp, #28
 8002e30:	af00      	add	r7, sp, #0
 8002e32:	60f8      	str	r0, [r7, #12]
 8002e34:	60b9      	str	r1, [r7, #8]
 8002e36:	607a      	str	r2, [r7, #4]
    int i;
	I2C_SendStart(i2c);
 8002e38:	68f8      	ldr	r0, [r7, #12]
 8002e3a:	f7ff fd6a 	bl	8002912 <I2C_SendStart>
	I2C_Send_Byte(i2c, (i2c->dev_addr << 1) | 0x01);
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	781b      	ldrb	r3, [r3, #0]
 8002e42:	005b      	lsls	r3, r3, #1
 8002e44:	b25b      	sxtb	r3, r3
 8002e46:	f043 0301 	orr.w	r3, r3, #1
 8002e4a:	b25b      	sxtb	r3, r3
 8002e4c:	b2db      	uxtb	r3, r3
 8002e4e:	4619      	mov	r1, r3
 8002e50:	68f8      	ldr	r0, [r7, #12]
 8002e52:	f7ff feed 	bl	8002c30 <I2C_Send_Byte>
    for (i = 0; i < len; i++) {
 8002e56:	2300      	movs	r3, #0
 8002e58:	617b      	str	r3, [r7, #20]
 8002e5a:	e00b      	b.n	8002e74 <I2C_ReadBytesNoAddr+0x48>
        //if (i == len - 1)
        //    pData[i] = I2C_Read_Byte(i2c, 0);
        //else
            pData[i] = I2C_Read_Byte(i2c, 1);
 8002e5c:	697b      	ldr	r3, [r7, #20]
 8002e5e:	687a      	ldr	r2, [r7, #4]
 8002e60:	18d4      	adds	r4, r2, r3
 8002e62:	2101      	movs	r1, #1
 8002e64:	68f8      	ldr	r0, [r7, #12]
 8002e66:	f7ff ff4d 	bl	8002d04 <I2C_Read_Byte>
 8002e6a:	4603      	mov	r3, r0
 8002e6c:	7023      	strb	r3, [r4, #0]
    for (i = 0; i < len; i++) {
 8002e6e:	697b      	ldr	r3, [r7, #20]
 8002e70:	3301      	adds	r3, #1
 8002e72:	617b      	str	r3, [r7, #20]
 8002e74:	697a      	ldr	r2, [r7, #20]
 8002e76:	68bb      	ldr	r3, [r7, #8]
 8002e78:	429a      	cmp	r2, r3
 8002e7a:	dbef      	blt.n	8002e5c <I2C_ReadBytesNoAddr+0x30>
    }
    I2C_Stop(i2c);
 8002e7c:	68f8      	ldr	r0, [r7, #12]
 8002e7e:	f7ff fd94 	bl	80029aa <I2C_Stop>
}
 8002e82:	bf00      	nop
 8002e84:	371c      	adds	r7, #28
 8002e86:	46bd      	mov	sp, r7
 8002e88:	bd90      	pop	{r4, r7, pc}

08002e8a <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8002e8a:	b480      	push	{r7}
 8002e8c:	b085      	sub	sp, #20
 8002e8e:	af00      	add	r7, sp, #0
 8002e90:	4603      	mov	r3, r0
 8002e92:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8002e94:	2300      	movs	r3, #0
 8002e96:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8002e98:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002e9c:	2b84      	cmp	r3, #132	; 0x84
 8002e9e:	d005      	beq.n	8002eac <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8002ea0:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	4413      	add	r3, r2
 8002ea8:	3303      	adds	r3, #3
 8002eaa:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8002eac:	68fb      	ldr	r3, [r7, #12]
}
 8002eae:	4618      	mov	r0, r3
 8002eb0:	3714      	adds	r7, #20
 8002eb2:	46bd      	mov	sp, r7
 8002eb4:	bc80      	pop	{r7}
 8002eb6:	4770      	bx	lr

08002eb8 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8002eb8:	b580      	push	{r7, lr}
 8002eba:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8002ebc:	f000 fad0 	bl	8003460 <vTaskStartScheduler>
  
  return osOK;
 8002ec0:	2300      	movs	r3, #0
}
 8002ec2:	4618      	mov	r0, r3
 8002ec4:	bd80      	pop	{r7, pc}

08002ec6 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8002ec6:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002ec8:	b089      	sub	sp, #36	; 0x24
 8002eca:	af04      	add	r7, sp, #16
 8002ecc:	6078      	str	r0, [r7, #4]
 8002ece:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	695b      	ldr	r3, [r3, #20]
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d020      	beq.n	8002f1a <osThreadCreate+0x54>
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	699b      	ldr	r3, [r3, #24]
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d01c      	beq.n	8002f1a <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	685c      	ldr	r4, [r3, #4]
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681d      	ldr	r5, [r3, #0]
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	691e      	ldr	r6, [r3, #16]
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8002ef2:	4618      	mov	r0, r3
 8002ef4:	f7ff ffc9 	bl	8002e8a <makeFreeRtosPriority>
 8002ef8:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	695b      	ldr	r3, [r3, #20]
 8002efe:	687a      	ldr	r2, [r7, #4]
 8002f00:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002f02:	9202      	str	r2, [sp, #8]
 8002f04:	9301      	str	r3, [sp, #4]
 8002f06:	9100      	str	r1, [sp, #0]
 8002f08:	683b      	ldr	r3, [r7, #0]
 8002f0a:	4632      	mov	r2, r6
 8002f0c:	4629      	mov	r1, r5
 8002f0e:	4620      	mov	r0, r4
 8002f10:	f000 f8e8 	bl	80030e4 <xTaskCreateStatic>
 8002f14:	4603      	mov	r3, r0
 8002f16:	60fb      	str	r3, [r7, #12]
 8002f18:	e01c      	b.n	8002f54 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	685c      	ldr	r4, [r3, #4]
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002f26:	b29e      	uxth	r6, r3
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8002f2e:	4618      	mov	r0, r3
 8002f30:	f7ff ffab 	bl	8002e8a <makeFreeRtosPriority>
 8002f34:	4602      	mov	r2, r0
 8002f36:	f107 030c 	add.w	r3, r7, #12
 8002f3a:	9301      	str	r3, [sp, #4]
 8002f3c:	9200      	str	r2, [sp, #0]
 8002f3e:	683b      	ldr	r3, [r7, #0]
 8002f40:	4632      	mov	r2, r6
 8002f42:	4629      	mov	r1, r5
 8002f44:	4620      	mov	r0, r4
 8002f46:	f000 f929 	bl	800319c <xTaskCreate>
 8002f4a:	4603      	mov	r3, r0
 8002f4c:	2b01      	cmp	r3, #1
 8002f4e:	d001      	beq.n	8002f54 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8002f50:	2300      	movs	r3, #0
 8002f52:	e000      	b.n	8002f56 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8002f54:	68fb      	ldr	r3, [r7, #12]
}
 8002f56:	4618      	mov	r0, r3
 8002f58:	3714      	adds	r7, #20
 8002f5a:	46bd      	mov	sp, r7
 8002f5c:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002f5e <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8002f5e:	b580      	push	{r7, lr}
 8002f60:	b084      	sub	sp, #16
 8002f62:	af00      	add	r7, sp, #0
 8002f64:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d001      	beq.n	8002f74 <osDelay+0x16>
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	e000      	b.n	8002f76 <osDelay+0x18>
 8002f74:	2301      	movs	r3, #1
 8002f76:	4618      	mov	r0, r3
 8002f78:	f000 fa3e 	bl	80033f8 <vTaskDelay>
  
  return osOK;
 8002f7c:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8002f7e:	4618      	mov	r0, r3
 8002f80:	3710      	adds	r7, #16
 8002f82:	46bd      	mov	sp, r7
 8002f84:	bd80      	pop	{r7, pc}

08002f86 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002f86:	b480      	push	{r7}
 8002f88:	b083      	sub	sp, #12
 8002f8a:	af00      	add	r7, sp, #0
 8002f8c:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	f103 0208 	add.w	r2, r3, #8
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002f9e:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	f103 0208 	add.w	r2, r3, #8
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	f103 0208 	add.w	r2, r3, #8
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	2200      	movs	r2, #0
 8002fb8:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002fba:	bf00      	nop
 8002fbc:	370c      	adds	r7, #12
 8002fbe:	46bd      	mov	sp, r7
 8002fc0:	bc80      	pop	{r7}
 8002fc2:	4770      	bx	lr

08002fc4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002fc4:	b480      	push	{r7}
 8002fc6:	b083      	sub	sp, #12
 8002fc8:	af00      	add	r7, sp, #0
 8002fca:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	2200      	movs	r2, #0
 8002fd0:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002fd2:	bf00      	nop
 8002fd4:	370c      	adds	r7, #12
 8002fd6:	46bd      	mov	sp, r7
 8002fd8:	bc80      	pop	{r7}
 8002fda:	4770      	bx	lr

08002fdc <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002fdc:	b480      	push	{r7}
 8002fde:	b085      	sub	sp, #20
 8002fe0:	af00      	add	r7, sp, #0
 8002fe2:	6078      	str	r0, [r7, #4]
 8002fe4:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	685b      	ldr	r3, [r3, #4]
 8002fea:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8002fec:	683b      	ldr	r3, [r7, #0]
 8002fee:	68fa      	ldr	r2, [r7, #12]
 8002ff0:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	689a      	ldr	r2, [r3, #8]
 8002ff6:	683b      	ldr	r3, [r7, #0]
 8002ff8:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	689b      	ldr	r3, [r3, #8]
 8002ffe:	683a      	ldr	r2, [r7, #0]
 8003000:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	683a      	ldr	r2, [r7, #0]
 8003006:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8003008:	683b      	ldr	r3, [r7, #0]
 800300a:	687a      	ldr	r2, [r7, #4]
 800300c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	1c5a      	adds	r2, r3, #1
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	601a      	str	r2, [r3, #0]
}
 8003018:	bf00      	nop
 800301a:	3714      	adds	r7, #20
 800301c:	46bd      	mov	sp, r7
 800301e:	bc80      	pop	{r7}
 8003020:	4770      	bx	lr

08003022 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003022:	b480      	push	{r7}
 8003024:	b085      	sub	sp, #20
 8003026:	af00      	add	r7, sp, #0
 8003028:	6078      	str	r0, [r7, #4]
 800302a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800302c:	683b      	ldr	r3, [r7, #0]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003032:	68bb      	ldr	r3, [r7, #8]
 8003034:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003038:	d103      	bne.n	8003042 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	691b      	ldr	r3, [r3, #16]
 800303e:	60fb      	str	r3, [r7, #12]
 8003040:	e00c      	b.n	800305c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	3308      	adds	r3, #8
 8003046:	60fb      	str	r3, [r7, #12]
 8003048:	e002      	b.n	8003050 <vListInsert+0x2e>
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	685b      	ldr	r3, [r3, #4]
 800304e:	60fb      	str	r3, [r7, #12]
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	685b      	ldr	r3, [r3, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	68ba      	ldr	r2, [r7, #8]
 8003058:	429a      	cmp	r2, r3
 800305a:	d2f6      	bcs.n	800304a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	685a      	ldr	r2, [r3, #4]
 8003060:	683b      	ldr	r3, [r7, #0]
 8003062:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003064:	683b      	ldr	r3, [r7, #0]
 8003066:	685b      	ldr	r3, [r3, #4]
 8003068:	683a      	ldr	r2, [r7, #0]
 800306a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800306c:	683b      	ldr	r3, [r7, #0]
 800306e:	68fa      	ldr	r2, [r7, #12]
 8003070:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	683a      	ldr	r2, [r7, #0]
 8003076:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8003078:	683b      	ldr	r3, [r7, #0]
 800307a:	687a      	ldr	r2, [r7, #4]
 800307c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	1c5a      	adds	r2, r3, #1
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	601a      	str	r2, [r3, #0]
}
 8003088:	bf00      	nop
 800308a:	3714      	adds	r7, #20
 800308c:	46bd      	mov	sp, r7
 800308e:	bc80      	pop	{r7}
 8003090:	4770      	bx	lr

08003092 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003092:	b480      	push	{r7}
 8003094:	b085      	sub	sp, #20
 8003096:	af00      	add	r7, sp, #0
 8003098:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	691b      	ldr	r3, [r3, #16]
 800309e:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	685b      	ldr	r3, [r3, #4]
 80030a4:	687a      	ldr	r2, [r7, #4]
 80030a6:	6892      	ldr	r2, [r2, #8]
 80030a8:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	689b      	ldr	r3, [r3, #8]
 80030ae:	687a      	ldr	r2, [r7, #4]
 80030b0:	6852      	ldr	r2, [r2, #4]
 80030b2:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	685b      	ldr	r3, [r3, #4]
 80030b8:	687a      	ldr	r2, [r7, #4]
 80030ba:	429a      	cmp	r2, r3
 80030bc:	d103      	bne.n	80030c6 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	689a      	ldr	r2, [r3, #8]
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	2200      	movs	r2, #0
 80030ca:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	1e5a      	subs	r2, r3, #1
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	681b      	ldr	r3, [r3, #0]
}
 80030da:	4618      	mov	r0, r3
 80030dc:	3714      	adds	r7, #20
 80030de:	46bd      	mov	sp, r7
 80030e0:	bc80      	pop	{r7}
 80030e2:	4770      	bx	lr

080030e4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80030e4:	b580      	push	{r7, lr}
 80030e6:	b08e      	sub	sp, #56	; 0x38
 80030e8:	af04      	add	r7, sp, #16
 80030ea:	60f8      	str	r0, [r7, #12]
 80030ec:	60b9      	str	r1, [r7, #8]
 80030ee:	607a      	str	r2, [r7, #4]
 80030f0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80030f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d10a      	bne.n	800310e <xTaskCreateStatic+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80030f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030fc:	f383 8811 	msr	BASEPRI, r3
 8003100:	f3bf 8f6f 	isb	sy
 8003104:	f3bf 8f4f 	dsb	sy
 8003108:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800310a:	bf00      	nop
 800310c:	e7fe      	b.n	800310c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800310e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003110:	2b00      	cmp	r3, #0
 8003112:	d10a      	bne.n	800312a <xTaskCreateStatic+0x46>
	__asm volatile
 8003114:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003118:	f383 8811 	msr	BASEPRI, r3
 800311c:	f3bf 8f6f 	isb	sy
 8003120:	f3bf 8f4f 	dsb	sy
 8003124:	61fb      	str	r3, [r7, #28]
}
 8003126:	bf00      	nop
 8003128:	e7fe      	b.n	8003128 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800312a:	2354      	movs	r3, #84	; 0x54
 800312c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800312e:	693b      	ldr	r3, [r7, #16]
 8003130:	2b54      	cmp	r3, #84	; 0x54
 8003132:	d00a      	beq.n	800314a <xTaskCreateStatic+0x66>
	__asm volatile
 8003134:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003138:	f383 8811 	msr	BASEPRI, r3
 800313c:	f3bf 8f6f 	isb	sy
 8003140:	f3bf 8f4f 	dsb	sy
 8003144:	61bb      	str	r3, [r7, #24]
}
 8003146:	bf00      	nop
 8003148:	e7fe      	b.n	8003148 <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800314a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800314c:	2b00      	cmp	r3, #0
 800314e:	d01e      	beq.n	800318e <xTaskCreateStatic+0xaa>
 8003150:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003152:	2b00      	cmp	r3, #0
 8003154:	d01b      	beq.n	800318e <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003156:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003158:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800315a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800315c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800315e:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8003160:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003162:	2202      	movs	r2, #2
 8003164:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8003168:	2300      	movs	r3, #0
 800316a:	9303      	str	r3, [sp, #12]
 800316c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800316e:	9302      	str	r3, [sp, #8]
 8003170:	f107 0314 	add.w	r3, r7, #20
 8003174:	9301      	str	r3, [sp, #4]
 8003176:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003178:	9300      	str	r3, [sp, #0]
 800317a:	683b      	ldr	r3, [r7, #0]
 800317c:	687a      	ldr	r2, [r7, #4]
 800317e:	68b9      	ldr	r1, [r7, #8]
 8003180:	68f8      	ldr	r0, [r7, #12]
 8003182:	f000 f850 	bl	8003226 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003186:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003188:	f000 f8cc 	bl	8003324 <prvAddNewTaskToReadyList>
 800318c:	e001      	b.n	8003192 <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 800318e:	2300      	movs	r3, #0
 8003190:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8003192:	697b      	ldr	r3, [r7, #20]
	}
 8003194:	4618      	mov	r0, r3
 8003196:	3728      	adds	r7, #40	; 0x28
 8003198:	46bd      	mov	sp, r7
 800319a:	bd80      	pop	{r7, pc}

0800319c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800319c:	b580      	push	{r7, lr}
 800319e:	b08c      	sub	sp, #48	; 0x30
 80031a0:	af04      	add	r7, sp, #16
 80031a2:	60f8      	str	r0, [r7, #12]
 80031a4:	60b9      	str	r1, [r7, #8]
 80031a6:	603b      	str	r3, [r7, #0]
 80031a8:	4613      	mov	r3, r2
 80031aa:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80031ac:	88fb      	ldrh	r3, [r7, #6]
 80031ae:	009b      	lsls	r3, r3, #2
 80031b0:	4618      	mov	r0, r3
 80031b2:	f000 fe6d 	bl	8003e90 <pvPortMalloc>
 80031b6:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80031b8:	697b      	ldr	r3, [r7, #20]
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d00e      	beq.n	80031dc <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 80031be:	2054      	movs	r0, #84	; 0x54
 80031c0:	f000 fe66 	bl	8003e90 <pvPortMalloc>
 80031c4:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80031c6:	69fb      	ldr	r3, [r7, #28]
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d003      	beq.n	80031d4 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80031cc:	69fb      	ldr	r3, [r7, #28]
 80031ce:	697a      	ldr	r2, [r7, #20]
 80031d0:	631a      	str	r2, [r3, #48]	; 0x30
 80031d2:	e005      	b.n	80031e0 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80031d4:	6978      	ldr	r0, [r7, #20]
 80031d6:	f000 ff1f 	bl	8004018 <vPortFree>
 80031da:	e001      	b.n	80031e0 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80031dc:	2300      	movs	r3, #0
 80031de:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80031e0:	69fb      	ldr	r3, [r7, #28]
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d017      	beq.n	8003216 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80031e6:	69fb      	ldr	r3, [r7, #28]
 80031e8:	2200      	movs	r2, #0
 80031ea:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80031ee:	88fa      	ldrh	r2, [r7, #6]
 80031f0:	2300      	movs	r3, #0
 80031f2:	9303      	str	r3, [sp, #12]
 80031f4:	69fb      	ldr	r3, [r7, #28]
 80031f6:	9302      	str	r3, [sp, #8]
 80031f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031fa:	9301      	str	r3, [sp, #4]
 80031fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031fe:	9300      	str	r3, [sp, #0]
 8003200:	683b      	ldr	r3, [r7, #0]
 8003202:	68b9      	ldr	r1, [r7, #8]
 8003204:	68f8      	ldr	r0, [r7, #12]
 8003206:	f000 f80e 	bl	8003226 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800320a:	69f8      	ldr	r0, [r7, #28]
 800320c:	f000 f88a 	bl	8003324 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8003210:	2301      	movs	r3, #1
 8003212:	61bb      	str	r3, [r7, #24]
 8003214:	e002      	b.n	800321c <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003216:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800321a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800321c:	69bb      	ldr	r3, [r7, #24]
	}
 800321e:	4618      	mov	r0, r3
 8003220:	3720      	adds	r7, #32
 8003222:	46bd      	mov	sp, r7
 8003224:	bd80      	pop	{r7, pc}

08003226 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8003226:	b580      	push	{r7, lr}
 8003228:	b088      	sub	sp, #32
 800322a:	af00      	add	r7, sp, #0
 800322c:	60f8      	str	r0, [r7, #12]
 800322e:	60b9      	str	r1, [r7, #8]
 8003230:	607a      	str	r2, [r7, #4]
 8003232:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8003234:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003236:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800323e:	3b01      	subs	r3, #1
 8003240:	009b      	lsls	r3, r3, #2
 8003242:	4413      	add	r3, r2
 8003244:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8003246:	69bb      	ldr	r3, [r7, #24]
 8003248:	f023 0307 	bic.w	r3, r3, #7
 800324c:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800324e:	69bb      	ldr	r3, [r7, #24]
 8003250:	f003 0307 	and.w	r3, r3, #7
 8003254:	2b00      	cmp	r3, #0
 8003256:	d00a      	beq.n	800326e <prvInitialiseNewTask+0x48>
	__asm volatile
 8003258:	f04f 0350 	mov.w	r3, #80	; 0x50
 800325c:	f383 8811 	msr	BASEPRI, r3
 8003260:	f3bf 8f6f 	isb	sy
 8003264:	f3bf 8f4f 	dsb	sy
 8003268:	617b      	str	r3, [r7, #20]
}
 800326a:	bf00      	nop
 800326c:	e7fe      	b.n	800326c <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800326e:	2300      	movs	r3, #0
 8003270:	61fb      	str	r3, [r7, #28]
 8003272:	e012      	b.n	800329a <prvInitialiseNewTask+0x74>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003274:	68ba      	ldr	r2, [r7, #8]
 8003276:	69fb      	ldr	r3, [r7, #28]
 8003278:	4413      	add	r3, r2
 800327a:	7819      	ldrb	r1, [r3, #0]
 800327c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800327e:	69fb      	ldr	r3, [r7, #28]
 8003280:	4413      	add	r3, r2
 8003282:	3334      	adds	r3, #52	; 0x34
 8003284:	460a      	mov	r2, r1
 8003286:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8003288:	68ba      	ldr	r2, [r7, #8]
 800328a:	69fb      	ldr	r3, [r7, #28]
 800328c:	4413      	add	r3, r2
 800328e:	781b      	ldrb	r3, [r3, #0]
 8003290:	2b00      	cmp	r3, #0
 8003292:	d006      	beq.n	80032a2 <prvInitialiseNewTask+0x7c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003294:	69fb      	ldr	r3, [r7, #28]
 8003296:	3301      	adds	r3, #1
 8003298:	61fb      	str	r3, [r7, #28]
 800329a:	69fb      	ldr	r3, [r7, #28]
 800329c:	2b0f      	cmp	r3, #15
 800329e:	d9e9      	bls.n	8003274 <prvInitialiseNewTask+0x4e>
 80032a0:	e000      	b.n	80032a4 <prvInitialiseNewTask+0x7e>
		{
			break;
 80032a2:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80032a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032a6:	2200      	movs	r2, #0
 80032a8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80032ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032ae:	2b06      	cmp	r3, #6
 80032b0:	d901      	bls.n	80032b6 <prvInitialiseNewTask+0x90>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80032b2:	2306      	movs	r3, #6
 80032b4:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80032b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032b8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80032ba:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80032bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032be:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80032c0:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80032c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032c4:	2200      	movs	r2, #0
 80032c6:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80032c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032ca:	3304      	adds	r3, #4
 80032cc:	4618      	mov	r0, r3
 80032ce:	f7ff fe79 	bl	8002fc4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80032d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032d4:	3318      	adds	r3, #24
 80032d6:	4618      	mov	r0, r3
 80032d8:	f7ff fe74 	bl	8002fc4 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80032dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032de:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80032e0:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80032e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032e4:	f1c3 0207 	rsb	r2, r3, #7
 80032e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032ea:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80032ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032ee:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80032f0:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80032f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032f4:	2200      	movs	r2, #0
 80032f6:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80032f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032fa:	2200      	movs	r2, #0
 80032fc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003300:	683a      	ldr	r2, [r7, #0]
 8003302:	68f9      	ldr	r1, [r7, #12]
 8003304:	69b8      	ldr	r0, [r7, #24]
 8003306:	f000 fc0d 	bl	8003b24 <pxPortInitialiseStack>
 800330a:	4602      	mov	r2, r0
 800330c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800330e:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8003310:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003312:	2b00      	cmp	r3, #0
 8003314:	d002      	beq.n	800331c <prvInitialiseNewTask+0xf6>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003316:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003318:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800331a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800331c:	bf00      	nop
 800331e:	3720      	adds	r7, #32
 8003320:	46bd      	mov	sp, r7
 8003322:	bd80      	pop	{r7, pc}

08003324 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8003324:	b580      	push	{r7, lr}
 8003326:	b082      	sub	sp, #8
 8003328:	af00      	add	r7, sp, #0
 800332a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800332c:	f000 fcee 	bl	8003d0c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8003330:	4b2a      	ldr	r3, [pc, #168]	; (80033dc <prvAddNewTaskToReadyList+0xb8>)
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	3301      	adds	r3, #1
 8003336:	4a29      	ldr	r2, [pc, #164]	; (80033dc <prvAddNewTaskToReadyList+0xb8>)
 8003338:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800333a:	4b29      	ldr	r3, [pc, #164]	; (80033e0 <prvAddNewTaskToReadyList+0xbc>)
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	2b00      	cmp	r3, #0
 8003340:	d109      	bne.n	8003356 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8003342:	4a27      	ldr	r2, [pc, #156]	; (80033e0 <prvAddNewTaskToReadyList+0xbc>)
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003348:	4b24      	ldr	r3, [pc, #144]	; (80033dc <prvAddNewTaskToReadyList+0xb8>)
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	2b01      	cmp	r3, #1
 800334e:	d110      	bne.n	8003372 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8003350:	f000 fac0 	bl	80038d4 <prvInitialiseTaskLists>
 8003354:	e00d      	b.n	8003372 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8003356:	4b23      	ldr	r3, [pc, #140]	; (80033e4 <prvAddNewTaskToReadyList+0xc0>)
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	2b00      	cmp	r3, #0
 800335c:	d109      	bne.n	8003372 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800335e:	4b20      	ldr	r3, [pc, #128]	; (80033e0 <prvAddNewTaskToReadyList+0xbc>)
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003368:	429a      	cmp	r2, r3
 800336a:	d802      	bhi.n	8003372 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800336c:	4a1c      	ldr	r2, [pc, #112]	; (80033e0 <prvAddNewTaskToReadyList+0xbc>)
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8003372:	4b1d      	ldr	r3, [pc, #116]	; (80033e8 <prvAddNewTaskToReadyList+0xc4>)
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	3301      	adds	r3, #1
 8003378:	4a1b      	ldr	r2, [pc, #108]	; (80033e8 <prvAddNewTaskToReadyList+0xc4>)
 800337a:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003380:	2201      	movs	r2, #1
 8003382:	409a      	lsls	r2, r3
 8003384:	4b19      	ldr	r3, [pc, #100]	; (80033ec <prvAddNewTaskToReadyList+0xc8>)
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	4313      	orrs	r3, r2
 800338a:	4a18      	ldr	r2, [pc, #96]	; (80033ec <prvAddNewTaskToReadyList+0xc8>)
 800338c:	6013      	str	r3, [r2, #0]
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003392:	4613      	mov	r3, r2
 8003394:	009b      	lsls	r3, r3, #2
 8003396:	4413      	add	r3, r2
 8003398:	009b      	lsls	r3, r3, #2
 800339a:	4a15      	ldr	r2, [pc, #84]	; (80033f0 <prvAddNewTaskToReadyList+0xcc>)
 800339c:	441a      	add	r2, r3
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	3304      	adds	r3, #4
 80033a2:	4619      	mov	r1, r3
 80033a4:	4610      	mov	r0, r2
 80033a6:	f7ff fe19 	bl	8002fdc <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80033aa:	f000 fcdf 	bl	8003d6c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80033ae:	4b0d      	ldr	r3, [pc, #52]	; (80033e4 <prvAddNewTaskToReadyList+0xc0>)
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d00e      	beq.n	80033d4 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80033b6:	4b0a      	ldr	r3, [pc, #40]	; (80033e0 <prvAddNewTaskToReadyList+0xbc>)
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033c0:	429a      	cmp	r2, r3
 80033c2:	d207      	bcs.n	80033d4 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80033c4:	4b0b      	ldr	r3, [pc, #44]	; (80033f4 <prvAddNewTaskToReadyList+0xd0>)
 80033c6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80033ca:	601a      	str	r2, [r3, #0]
 80033cc:	f3bf 8f4f 	dsb	sy
 80033d0:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80033d4:	bf00      	nop
 80033d6:	3708      	adds	r7, #8
 80033d8:	46bd      	mov	sp, r7
 80033da:	bd80      	pop	{r7, pc}
 80033dc:	200003a8 	.word	0x200003a8
 80033e0:	200002a8 	.word	0x200002a8
 80033e4:	200003b4 	.word	0x200003b4
 80033e8:	200003c4 	.word	0x200003c4
 80033ec:	200003b0 	.word	0x200003b0
 80033f0:	200002ac 	.word	0x200002ac
 80033f4:	e000ed04 	.word	0xe000ed04

080033f8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80033f8:	b580      	push	{r7, lr}
 80033fa:	b084      	sub	sp, #16
 80033fc:	af00      	add	r7, sp, #0
 80033fe:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8003400:	2300      	movs	r3, #0
 8003402:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	2b00      	cmp	r3, #0
 8003408:	d017      	beq.n	800343a <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800340a:	4b13      	ldr	r3, [pc, #76]	; (8003458 <vTaskDelay+0x60>)
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	2b00      	cmp	r3, #0
 8003410:	d00a      	beq.n	8003428 <vTaskDelay+0x30>
	__asm volatile
 8003412:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003416:	f383 8811 	msr	BASEPRI, r3
 800341a:	f3bf 8f6f 	isb	sy
 800341e:	f3bf 8f4f 	dsb	sy
 8003422:	60bb      	str	r3, [r7, #8]
}
 8003424:	bf00      	nop
 8003426:	e7fe      	b.n	8003426 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8003428:	f000 f87a 	bl	8003520 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800342c:	2100      	movs	r1, #0
 800342e:	6878      	ldr	r0, [r7, #4]
 8003430:	f000 fb12 	bl	8003a58 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8003434:	f000 f882 	bl	800353c <xTaskResumeAll>
 8003438:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	2b00      	cmp	r3, #0
 800343e:	d107      	bne.n	8003450 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8003440:	4b06      	ldr	r3, [pc, #24]	; (800345c <vTaskDelay+0x64>)
 8003442:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003446:	601a      	str	r2, [r3, #0]
 8003448:	f3bf 8f4f 	dsb	sy
 800344c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8003450:	bf00      	nop
 8003452:	3710      	adds	r7, #16
 8003454:	46bd      	mov	sp, r7
 8003456:	bd80      	pop	{r7, pc}
 8003458:	200003d0 	.word	0x200003d0
 800345c:	e000ed04 	.word	0xe000ed04

08003460 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003460:	b580      	push	{r7, lr}
 8003462:	b08a      	sub	sp, #40	; 0x28
 8003464:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8003466:	2300      	movs	r3, #0
 8003468:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800346a:	2300      	movs	r3, #0
 800346c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800346e:	463a      	mov	r2, r7
 8003470:	1d39      	adds	r1, r7, #4
 8003472:	f107 0308 	add.w	r3, r7, #8
 8003476:	4618      	mov	r0, r3
 8003478:	f7fc fe6a 	bl	8000150 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800347c:	6839      	ldr	r1, [r7, #0]
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	68ba      	ldr	r2, [r7, #8]
 8003482:	9202      	str	r2, [sp, #8]
 8003484:	9301      	str	r3, [sp, #4]
 8003486:	2300      	movs	r3, #0
 8003488:	9300      	str	r3, [sp, #0]
 800348a:	2300      	movs	r3, #0
 800348c:	460a      	mov	r2, r1
 800348e:	491e      	ldr	r1, [pc, #120]	; (8003508 <vTaskStartScheduler+0xa8>)
 8003490:	481e      	ldr	r0, [pc, #120]	; (800350c <vTaskStartScheduler+0xac>)
 8003492:	f7ff fe27 	bl	80030e4 <xTaskCreateStatic>
 8003496:	4603      	mov	r3, r0
 8003498:	4a1d      	ldr	r2, [pc, #116]	; (8003510 <vTaskStartScheduler+0xb0>)
 800349a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800349c:	4b1c      	ldr	r3, [pc, #112]	; (8003510 <vTaskStartScheduler+0xb0>)
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d002      	beq.n	80034aa <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80034a4:	2301      	movs	r3, #1
 80034a6:	617b      	str	r3, [r7, #20]
 80034a8:	e001      	b.n	80034ae <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80034aa:	2300      	movs	r3, #0
 80034ac:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80034ae:	697b      	ldr	r3, [r7, #20]
 80034b0:	2b01      	cmp	r3, #1
 80034b2:	d116      	bne.n	80034e2 <vTaskStartScheduler+0x82>
	__asm volatile
 80034b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034b8:	f383 8811 	msr	BASEPRI, r3
 80034bc:	f3bf 8f6f 	isb	sy
 80034c0:	f3bf 8f4f 	dsb	sy
 80034c4:	613b      	str	r3, [r7, #16]
}
 80034c6:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80034c8:	4b12      	ldr	r3, [pc, #72]	; (8003514 <vTaskStartScheduler+0xb4>)
 80034ca:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80034ce:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80034d0:	4b11      	ldr	r3, [pc, #68]	; (8003518 <vTaskStartScheduler+0xb8>)
 80034d2:	2201      	movs	r2, #1
 80034d4:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 80034d6:	4b11      	ldr	r3, [pc, #68]	; (800351c <vTaskStartScheduler+0xbc>)
 80034d8:	2200      	movs	r2, #0
 80034da:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80034dc:	f000 fba4 	bl	8003c28 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80034e0:	e00e      	b.n	8003500 <vTaskStartScheduler+0xa0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80034e2:	697b      	ldr	r3, [r7, #20]
 80034e4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80034e8:	d10a      	bne.n	8003500 <vTaskStartScheduler+0xa0>
	__asm volatile
 80034ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034ee:	f383 8811 	msr	BASEPRI, r3
 80034f2:	f3bf 8f6f 	isb	sy
 80034f6:	f3bf 8f4f 	dsb	sy
 80034fa:	60fb      	str	r3, [r7, #12]
}
 80034fc:	bf00      	nop
 80034fe:	e7fe      	b.n	80034fe <vTaskStartScheduler+0x9e>
}
 8003500:	bf00      	nop
 8003502:	3718      	adds	r7, #24
 8003504:	46bd      	mov	sp, r7
 8003506:	bd80      	pop	{r7, pc}
 8003508:	08004304 	.word	0x08004304
 800350c:	080038a5 	.word	0x080038a5
 8003510:	200003cc 	.word	0x200003cc
 8003514:	200003c8 	.word	0x200003c8
 8003518:	200003b4 	.word	0x200003b4
 800351c:	200003ac 	.word	0x200003ac

08003520 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003520:	b480      	push	{r7}
 8003522:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8003524:	4b04      	ldr	r3, [pc, #16]	; (8003538 <vTaskSuspendAll+0x18>)
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	3301      	adds	r3, #1
 800352a:	4a03      	ldr	r2, [pc, #12]	; (8003538 <vTaskSuspendAll+0x18>)
 800352c:	6013      	str	r3, [r2, #0]
}
 800352e:	bf00      	nop
 8003530:	46bd      	mov	sp, r7
 8003532:	bc80      	pop	{r7}
 8003534:	4770      	bx	lr
 8003536:	bf00      	nop
 8003538:	200003d0 	.word	0x200003d0

0800353c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800353c:	b580      	push	{r7, lr}
 800353e:	b084      	sub	sp, #16
 8003540:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8003542:	2300      	movs	r3, #0
 8003544:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8003546:	2300      	movs	r3, #0
 8003548:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800354a:	4b41      	ldr	r3, [pc, #260]	; (8003650 <xTaskResumeAll+0x114>)
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	2b00      	cmp	r3, #0
 8003550:	d10a      	bne.n	8003568 <xTaskResumeAll+0x2c>
	__asm volatile
 8003552:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003556:	f383 8811 	msr	BASEPRI, r3
 800355a:	f3bf 8f6f 	isb	sy
 800355e:	f3bf 8f4f 	dsb	sy
 8003562:	603b      	str	r3, [r7, #0]
}
 8003564:	bf00      	nop
 8003566:	e7fe      	b.n	8003566 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8003568:	f000 fbd0 	bl	8003d0c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800356c:	4b38      	ldr	r3, [pc, #224]	; (8003650 <xTaskResumeAll+0x114>)
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	3b01      	subs	r3, #1
 8003572:	4a37      	ldr	r2, [pc, #220]	; (8003650 <xTaskResumeAll+0x114>)
 8003574:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003576:	4b36      	ldr	r3, [pc, #216]	; (8003650 <xTaskResumeAll+0x114>)
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	2b00      	cmp	r3, #0
 800357c:	d161      	bne.n	8003642 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800357e:	4b35      	ldr	r3, [pc, #212]	; (8003654 <xTaskResumeAll+0x118>)
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	2b00      	cmp	r3, #0
 8003584:	d05d      	beq.n	8003642 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003586:	e02e      	b.n	80035e6 <xTaskResumeAll+0xaa>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8003588:	4b33      	ldr	r3, [pc, #204]	; (8003658 <xTaskResumeAll+0x11c>)
 800358a:	68db      	ldr	r3, [r3, #12]
 800358c:	68db      	ldr	r3, [r3, #12]
 800358e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	3318      	adds	r3, #24
 8003594:	4618      	mov	r0, r3
 8003596:	f7ff fd7c 	bl	8003092 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	3304      	adds	r3, #4
 800359e:	4618      	mov	r0, r3
 80035a0:	f7ff fd77 	bl	8003092 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035a8:	2201      	movs	r2, #1
 80035aa:	409a      	lsls	r2, r3
 80035ac:	4b2b      	ldr	r3, [pc, #172]	; (800365c <xTaskResumeAll+0x120>)
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	4313      	orrs	r3, r2
 80035b2:	4a2a      	ldr	r2, [pc, #168]	; (800365c <xTaskResumeAll+0x120>)
 80035b4:	6013      	str	r3, [r2, #0]
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80035ba:	4613      	mov	r3, r2
 80035bc:	009b      	lsls	r3, r3, #2
 80035be:	4413      	add	r3, r2
 80035c0:	009b      	lsls	r3, r3, #2
 80035c2:	4a27      	ldr	r2, [pc, #156]	; (8003660 <xTaskResumeAll+0x124>)
 80035c4:	441a      	add	r2, r3
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	3304      	adds	r3, #4
 80035ca:	4619      	mov	r1, r3
 80035cc:	4610      	mov	r0, r2
 80035ce:	f7ff fd05 	bl	8002fdc <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80035d6:	4b23      	ldr	r3, [pc, #140]	; (8003664 <xTaskResumeAll+0x128>)
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035dc:	429a      	cmp	r2, r3
 80035de:	d302      	bcc.n	80035e6 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 80035e0:	4b21      	ldr	r3, [pc, #132]	; (8003668 <xTaskResumeAll+0x12c>)
 80035e2:	2201      	movs	r2, #1
 80035e4:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80035e6:	4b1c      	ldr	r3, [pc, #112]	; (8003658 <xTaskResumeAll+0x11c>)
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d1cc      	bne.n	8003588 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d001      	beq.n	80035f8 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80035f4:	f000 fa0c 	bl	8003a10 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80035f8:	4b1c      	ldr	r3, [pc, #112]	; (800366c <xTaskResumeAll+0x130>)
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	2b00      	cmp	r3, #0
 8003602:	d010      	beq.n	8003626 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8003604:	f000 f836 	bl	8003674 <xTaskIncrementTick>
 8003608:	4603      	mov	r3, r0
 800360a:	2b00      	cmp	r3, #0
 800360c:	d002      	beq.n	8003614 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800360e:	4b16      	ldr	r3, [pc, #88]	; (8003668 <xTaskResumeAll+0x12c>)
 8003610:	2201      	movs	r2, #1
 8003612:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	3b01      	subs	r3, #1
 8003618:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	2b00      	cmp	r3, #0
 800361e:	d1f1      	bne.n	8003604 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 8003620:	4b12      	ldr	r3, [pc, #72]	; (800366c <xTaskResumeAll+0x130>)
 8003622:	2200      	movs	r2, #0
 8003624:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8003626:	4b10      	ldr	r3, [pc, #64]	; (8003668 <xTaskResumeAll+0x12c>)
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	2b00      	cmp	r3, #0
 800362c:	d009      	beq.n	8003642 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800362e:	2301      	movs	r3, #1
 8003630:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8003632:	4b0f      	ldr	r3, [pc, #60]	; (8003670 <xTaskResumeAll+0x134>)
 8003634:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003638:	601a      	str	r2, [r3, #0]
 800363a:	f3bf 8f4f 	dsb	sy
 800363e:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003642:	f000 fb93 	bl	8003d6c <vPortExitCritical>

	return xAlreadyYielded;
 8003646:	68bb      	ldr	r3, [r7, #8]
}
 8003648:	4618      	mov	r0, r3
 800364a:	3710      	adds	r7, #16
 800364c:	46bd      	mov	sp, r7
 800364e:	bd80      	pop	{r7, pc}
 8003650:	200003d0 	.word	0x200003d0
 8003654:	200003a8 	.word	0x200003a8
 8003658:	20000368 	.word	0x20000368
 800365c:	200003b0 	.word	0x200003b0
 8003660:	200002ac 	.word	0x200002ac
 8003664:	200002a8 	.word	0x200002a8
 8003668:	200003bc 	.word	0x200003bc
 800366c:	200003b8 	.word	0x200003b8
 8003670:	e000ed04 	.word	0xe000ed04

08003674 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003674:	b580      	push	{r7, lr}
 8003676:	b086      	sub	sp, #24
 8003678:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800367a:	2300      	movs	r3, #0
 800367c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800367e:	4b51      	ldr	r3, [pc, #324]	; (80037c4 <xTaskIncrementTick+0x150>)
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	2b00      	cmp	r3, #0
 8003684:	f040 808d 	bne.w	80037a2 <xTaskIncrementTick+0x12e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003688:	4b4f      	ldr	r3, [pc, #316]	; (80037c8 <xTaskIncrementTick+0x154>)
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	3301      	adds	r3, #1
 800368e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8003690:	4a4d      	ldr	r2, [pc, #308]	; (80037c8 <xTaskIncrementTick+0x154>)
 8003692:	693b      	ldr	r3, [r7, #16]
 8003694:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003696:	693b      	ldr	r3, [r7, #16]
 8003698:	2b00      	cmp	r3, #0
 800369a:	d120      	bne.n	80036de <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800369c:	4b4b      	ldr	r3, [pc, #300]	; (80037cc <xTaskIncrementTick+0x158>)
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d00a      	beq.n	80036bc <xTaskIncrementTick+0x48>
	__asm volatile
 80036a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036aa:	f383 8811 	msr	BASEPRI, r3
 80036ae:	f3bf 8f6f 	isb	sy
 80036b2:	f3bf 8f4f 	dsb	sy
 80036b6:	603b      	str	r3, [r7, #0]
}
 80036b8:	bf00      	nop
 80036ba:	e7fe      	b.n	80036ba <xTaskIncrementTick+0x46>
 80036bc:	4b43      	ldr	r3, [pc, #268]	; (80037cc <xTaskIncrementTick+0x158>)
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	60fb      	str	r3, [r7, #12]
 80036c2:	4b43      	ldr	r3, [pc, #268]	; (80037d0 <xTaskIncrementTick+0x15c>)
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	4a41      	ldr	r2, [pc, #260]	; (80037cc <xTaskIncrementTick+0x158>)
 80036c8:	6013      	str	r3, [r2, #0]
 80036ca:	4a41      	ldr	r2, [pc, #260]	; (80037d0 <xTaskIncrementTick+0x15c>)
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	6013      	str	r3, [r2, #0]
 80036d0:	4b40      	ldr	r3, [pc, #256]	; (80037d4 <xTaskIncrementTick+0x160>)
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	3301      	adds	r3, #1
 80036d6:	4a3f      	ldr	r2, [pc, #252]	; (80037d4 <xTaskIncrementTick+0x160>)
 80036d8:	6013      	str	r3, [r2, #0]
 80036da:	f000 f999 	bl	8003a10 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80036de:	4b3e      	ldr	r3, [pc, #248]	; (80037d8 <xTaskIncrementTick+0x164>)
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	693a      	ldr	r2, [r7, #16]
 80036e4:	429a      	cmp	r2, r3
 80036e6:	d34d      	bcc.n	8003784 <xTaskIncrementTick+0x110>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80036e8:	4b38      	ldr	r3, [pc, #224]	; (80037cc <xTaskIncrementTick+0x158>)
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d101      	bne.n	80036f6 <xTaskIncrementTick+0x82>
 80036f2:	2301      	movs	r3, #1
 80036f4:	e000      	b.n	80036f8 <xTaskIncrementTick+0x84>
 80036f6:	2300      	movs	r3, #0
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d004      	beq.n	8003706 <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80036fc:	4b36      	ldr	r3, [pc, #216]	; (80037d8 <xTaskIncrementTick+0x164>)
 80036fe:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003702:	601a      	str	r2, [r3, #0]
					break;
 8003704:	e03e      	b.n	8003784 <xTaskIncrementTick+0x110>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003706:	4b31      	ldr	r3, [pc, #196]	; (80037cc <xTaskIncrementTick+0x158>)
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	68db      	ldr	r3, [r3, #12]
 800370c:	68db      	ldr	r3, [r3, #12]
 800370e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003710:	68bb      	ldr	r3, [r7, #8]
 8003712:	685b      	ldr	r3, [r3, #4]
 8003714:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8003716:	693a      	ldr	r2, [r7, #16]
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	429a      	cmp	r2, r3
 800371c:	d203      	bcs.n	8003726 <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800371e:	4a2e      	ldr	r2, [pc, #184]	; (80037d8 <xTaskIncrementTick+0x164>)
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	6013      	str	r3, [r2, #0]
						break;
 8003724:	e02e      	b.n	8003784 <xTaskIncrementTick+0x110>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003726:	68bb      	ldr	r3, [r7, #8]
 8003728:	3304      	adds	r3, #4
 800372a:	4618      	mov	r0, r3
 800372c:	f7ff fcb1 	bl	8003092 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003730:	68bb      	ldr	r3, [r7, #8]
 8003732:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003734:	2b00      	cmp	r3, #0
 8003736:	d004      	beq.n	8003742 <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003738:	68bb      	ldr	r3, [r7, #8]
 800373a:	3318      	adds	r3, #24
 800373c:	4618      	mov	r0, r3
 800373e:	f7ff fca8 	bl	8003092 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8003742:	68bb      	ldr	r3, [r7, #8]
 8003744:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003746:	2201      	movs	r2, #1
 8003748:	409a      	lsls	r2, r3
 800374a:	4b24      	ldr	r3, [pc, #144]	; (80037dc <xTaskIncrementTick+0x168>)
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	4313      	orrs	r3, r2
 8003750:	4a22      	ldr	r2, [pc, #136]	; (80037dc <xTaskIncrementTick+0x168>)
 8003752:	6013      	str	r3, [r2, #0]
 8003754:	68bb      	ldr	r3, [r7, #8]
 8003756:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003758:	4613      	mov	r3, r2
 800375a:	009b      	lsls	r3, r3, #2
 800375c:	4413      	add	r3, r2
 800375e:	009b      	lsls	r3, r3, #2
 8003760:	4a1f      	ldr	r2, [pc, #124]	; (80037e0 <xTaskIncrementTick+0x16c>)
 8003762:	441a      	add	r2, r3
 8003764:	68bb      	ldr	r3, [r7, #8]
 8003766:	3304      	adds	r3, #4
 8003768:	4619      	mov	r1, r3
 800376a:	4610      	mov	r0, r2
 800376c:	f7ff fc36 	bl	8002fdc <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003770:	68bb      	ldr	r3, [r7, #8]
 8003772:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003774:	4b1b      	ldr	r3, [pc, #108]	; (80037e4 <xTaskIncrementTick+0x170>)
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800377a:	429a      	cmp	r2, r3
 800377c:	d3b4      	bcc.n	80036e8 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800377e:	2301      	movs	r3, #1
 8003780:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003782:	e7b1      	b.n	80036e8 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003784:	4b17      	ldr	r3, [pc, #92]	; (80037e4 <xTaskIncrementTick+0x170>)
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800378a:	4915      	ldr	r1, [pc, #84]	; (80037e0 <xTaskIncrementTick+0x16c>)
 800378c:	4613      	mov	r3, r2
 800378e:	009b      	lsls	r3, r3, #2
 8003790:	4413      	add	r3, r2
 8003792:	009b      	lsls	r3, r3, #2
 8003794:	440b      	add	r3, r1
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	2b01      	cmp	r3, #1
 800379a:	d907      	bls.n	80037ac <xTaskIncrementTick+0x138>
			{
				xSwitchRequired = pdTRUE;
 800379c:	2301      	movs	r3, #1
 800379e:	617b      	str	r3, [r7, #20]
 80037a0:	e004      	b.n	80037ac <xTaskIncrementTick+0x138>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80037a2:	4b11      	ldr	r3, [pc, #68]	; (80037e8 <xTaskIncrementTick+0x174>)
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	3301      	adds	r3, #1
 80037a8:	4a0f      	ldr	r2, [pc, #60]	; (80037e8 <xTaskIncrementTick+0x174>)
 80037aa:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80037ac:	4b0f      	ldr	r3, [pc, #60]	; (80037ec <xTaskIncrementTick+0x178>)
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d001      	beq.n	80037b8 <xTaskIncrementTick+0x144>
		{
			xSwitchRequired = pdTRUE;
 80037b4:	2301      	movs	r3, #1
 80037b6:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80037b8:	697b      	ldr	r3, [r7, #20]
}
 80037ba:	4618      	mov	r0, r3
 80037bc:	3718      	adds	r7, #24
 80037be:	46bd      	mov	sp, r7
 80037c0:	bd80      	pop	{r7, pc}
 80037c2:	bf00      	nop
 80037c4:	200003d0 	.word	0x200003d0
 80037c8:	200003ac 	.word	0x200003ac
 80037cc:	20000360 	.word	0x20000360
 80037d0:	20000364 	.word	0x20000364
 80037d4:	200003c0 	.word	0x200003c0
 80037d8:	200003c8 	.word	0x200003c8
 80037dc:	200003b0 	.word	0x200003b0
 80037e0:	200002ac 	.word	0x200002ac
 80037e4:	200002a8 	.word	0x200002a8
 80037e8:	200003b8 	.word	0x200003b8
 80037ec:	200003bc 	.word	0x200003bc

080037f0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80037f0:	b480      	push	{r7}
 80037f2:	b087      	sub	sp, #28
 80037f4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80037f6:	4b26      	ldr	r3, [pc, #152]	; (8003890 <vTaskSwitchContext+0xa0>)
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d003      	beq.n	8003806 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80037fe:	4b25      	ldr	r3, [pc, #148]	; (8003894 <vTaskSwitchContext+0xa4>)
 8003800:	2201      	movs	r2, #1
 8003802:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8003804:	e03f      	b.n	8003886 <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 8003806:	4b23      	ldr	r3, [pc, #140]	; (8003894 <vTaskSwitchContext+0xa4>)
 8003808:	2200      	movs	r2, #0
 800380a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 800380c:	4b22      	ldr	r3, [pc, #136]	; (8003898 <vTaskSwitchContext+0xa8>)
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	fab3 f383 	clz	r3, r3
 8003818:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800381a:	7afb      	ldrb	r3, [r7, #11]
 800381c:	f1c3 031f 	rsb	r3, r3, #31
 8003820:	617b      	str	r3, [r7, #20]
 8003822:	491e      	ldr	r1, [pc, #120]	; (800389c <vTaskSwitchContext+0xac>)
 8003824:	697a      	ldr	r2, [r7, #20]
 8003826:	4613      	mov	r3, r2
 8003828:	009b      	lsls	r3, r3, #2
 800382a:	4413      	add	r3, r2
 800382c:	009b      	lsls	r3, r3, #2
 800382e:	440b      	add	r3, r1
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	2b00      	cmp	r3, #0
 8003834:	d10a      	bne.n	800384c <vTaskSwitchContext+0x5c>
	__asm volatile
 8003836:	f04f 0350 	mov.w	r3, #80	; 0x50
 800383a:	f383 8811 	msr	BASEPRI, r3
 800383e:	f3bf 8f6f 	isb	sy
 8003842:	f3bf 8f4f 	dsb	sy
 8003846:	607b      	str	r3, [r7, #4]
}
 8003848:	bf00      	nop
 800384a:	e7fe      	b.n	800384a <vTaskSwitchContext+0x5a>
 800384c:	697a      	ldr	r2, [r7, #20]
 800384e:	4613      	mov	r3, r2
 8003850:	009b      	lsls	r3, r3, #2
 8003852:	4413      	add	r3, r2
 8003854:	009b      	lsls	r3, r3, #2
 8003856:	4a11      	ldr	r2, [pc, #68]	; (800389c <vTaskSwitchContext+0xac>)
 8003858:	4413      	add	r3, r2
 800385a:	613b      	str	r3, [r7, #16]
 800385c:	693b      	ldr	r3, [r7, #16]
 800385e:	685b      	ldr	r3, [r3, #4]
 8003860:	685a      	ldr	r2, [r3, #4]
 8003862:	693b      	ldr	r3, [r7, #16]
 8003864:	605a      	str	r2, [r3, #4]
 8003866:	693b      	ldr	r3, [r7, #16]
 8003868:	685a      	ldr	r2, [r3, #4]
 800386a:	693b      	ldr	r3, [r7, #16]
 800386c:	3308      	adds	r3, #8
 800386e:	429a      	cmp	r2, r3
 8003870:	d104      	bne.n	800387c <vTaskSwitchContext+0x8c>
 8003872:	693b      	ldr	r3, [r7, #16]
 8003874:	685b      	ldr	r3, [r3, #4]
 8003876:	685a      	ldr	r2, [r3, #4]
 8003878:	693b      	ldr	r3, [r7, #16]
 800387a:	605a      	str	r2, [r3, #4]
 800387c:	693b      	ldr	r3, [r7, #16]
 800387e:	685b      	ldr	r3, [r3, #4]
 8003880:	68db      	ldr	r3, [r3, #12]
 8003882:	4a07      	ldr	r2, [pc, #28]	; (80038a0 <vTaskSwitchContext+0xb0>)
 8003884:	6013      	str	r3, [r2, #0]
}
 8003886:	bf00      	nop
 8003888:	371c      	adds	r7, #28
 800388a:	46bd      	mov	sp, r7
 800388c:	bc80      	pop	{r7}
 800388e:	4770      	bx	lr
 8003890:	200003d0 	.word	0x200003d0
 8003894:	200003bc 	.word	0x200003bc
 8003898:	200003b0 	.word	0x200003b0
 800389c:	200002ac 	.word	0x200002ac
 80038a0:	200002a8 	.word	0x200002a8

080038a4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80038a4:	b580      	push	{r7, lr}
 80038a6:	b082      	sub	sp, #8
 80038a8:	af00      	add	r7, sp, #0
 80038aa:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80038ac:	f000 f852 	bl	8003954 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80038b0:	4b06      	ldr	r3, [pc, #24]	; (80038cc <prvIdleTask+0x28>)
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	2b01      	cmp	r3, #1
 80038b6:	d9f9      	bls.n	80038ac <prvIdleTask+0x8>
			{
				taskYIELD();
 80038b8:	4b05      	ldr	r3, [pc, #20]	; (80038d0 <prvIdleTask+0x2c>)
 80038ba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80038be:	601a      	str	r2, [r3, #0]
 80038c0:	f3bf 8f4f 	dsb	sy
 80038c4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80038c8:	e7f0      	b.n	80038ac <prvIdleTask+0x8>
 80038ca:	bf00      	nop
 80038cc:	200002ac 	.word	0x200002ac
 80038d0:	e000ed04 	.word	0xe000ed04

080038d4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80038d4:	b580      	push	{r7, lr}
 80038d6:	b082      	sub	sp, #8
 80038d8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80038da:	2300      	movs	r3, #0
 80038dc:	607b      	str	r3, [r7, #4]
 80038de:	e00c      	b.n	80038fa <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80038e0:	687a      	ldr	r2, [r7, #4]
 80038e2:	4613      	mov	r3, r2
 80038e4:	009b      	lsls	r3, r3, #2
 80038e6:	4413      	add	r3, r2
 80038e8:	009b      	lsls	r3, r3, #2
 80038ea:	4a12      	ldr	r2, [pc, #72]	; (8003934 <prvInitialiseTaskLists+0x60>)
 80038ec:	4413      	add	r3, r2
 80038ee:	4618      	mov	r0, r3
 80038f0:	f7ff fb49 	bl	8002f86 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	3301      	adds	r3, #1
 80038f8:	607b      	str	r3, [r7, #4]
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	2b06      	cmp	r3, #6
 80038fe:	d9ef      	bls.n	80038e0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8003900:	480d      	ldr	r0, [pc, #52]	; (8003938 <prvInitialiseTaskLists+0x64>)
 8003902:	f7ff fb40 	bl	8002f86 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8003906:	480d      	ldr	r0, [pc, #52]	; (800393c <prvInitialiseTaskLists+0x68>)
 8003908:	f7ff fb3d 	bl	8002f86 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800390c:	480c      	ldr	r0, [pc, #48]	; (8003940 <prvInitialiseTaskLists+0x6c>)
 800390e:	f7ff fb3a 	bl	8002f86 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8003912:	480c      	ldr	r0, [pc, #48]	; (8003944 <prvInitialiseTaskLists+0x70>)
 8003914:	f7ff fb37 	bl	8002f86 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8003918:	480b      	ldr	r0, [pc, #44]	; (8003948 <prvInitialiseTaskLists+0x74>)
 800391a:	f7ff fb34 	bl	8002f86 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800391e:	4b0b      	ldr	r3, [pc, #44]	; (800394c <prvInitialiseTaskLists+0x78>)
 8003920:	4a05      	ldr	r2, [pc, #20]	; (8003938 <prvInitialiseTaskLists+0x64>)
 8003922:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003924:	4b0a      	ldr	r3, [pc, #40]	; (8003950 <prvInitialiseTaskLists+0x7c>)
 8003926:	4a05      	ldr	r2, [pc, #20]	; (800393c <prvInitialiseTaskLists+0x68>)
 8003928:	601a      	str	r2, [r3, #0]
}
 800392a:	bf00      	nop
 800392c:	3708      	adds	r7, #8
 800392e:	46bd      	mov	sp, r7
 8003930:	bd80      	pop	{r7, pc}
 8003932:	bf00      	nop
 8003934:	200002ac 	.word	0x200002ac
 8003938:	20000338 	.word	0x20000338
 800393c:	2000034c 	.word	0x2000034c
 8003940:	20000368 	.word	0x20000368
 8003944:	2000037c 	.word	0x2000037c
 8003948:	20000394 	.word	0x20000394
 800394c:	20000360 	.word	0x20000360
 8003950:	20000364 	.word	0x20000364

08003954 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003954:	b580      	push	{r7, lr}
 8003956:	b082      	sub	sp, #8
 8003958:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800395a:	e019      	b.n	8003990 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800395c:	f000 f9d6 	bl	8003d0c <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8003960:	4b10      	ldr	r3, [pc, #64]	; (80039a4 <prvCheckTasksWaitingTermination+0x50>)
 8003962:	68db      	ldr	r3, [r3, #12]
 8003964:	68db      	ldr	r3, [r3, #12]
 8003966:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	3304      	adds	r3, #4
 800396c:	4618      	mov	r0, r3
 800396e:	f7ff fb90 	bl	8003092 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8003972:	4b0d      	ldr	r3, [pc, #52]	; (80039a8 <prvCheckTasksWaitingTermination+0x54>)
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	3b01      	subs	r3, #1
 8003978:	4a0b      	ldr	r2, [pc, #44]	; (80039a8 <prvCheckTasksWaitingTermination+0x54>)
 800397a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800397c:	4b0b      	ldr	r3, [pc, #44]	; (80039ac <prvCheckTasksWaitingTermination+0x58>)
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	3b01      	subs	r3, #1
 8003982:	4a0a      	ldr	r2, [pc, #40]	; (80039ac <prvCheckTasksWaitingTermination+0x58>)
 8003984:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8003986:	f000 f9f1 	bl	8003d6c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800398a:	6878      	ldr	r0, [r7, #4]
 800398c:	f000 f810 	bl	80039b0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003990:	4b06      	ldr	r3, [pc, #24]	; (80039ac <prvCheckTasksWaitingTermination+0x58>)
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	2b00      	cmp	r3, #0
 8003996:	d1e1      	bne.n	800395c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8003998:	bf00      	nop
 800399a:	bf00      	nop
 800399c:	3708      	adds	r7, #8
 800399e:	46bd      	mov	sp, r7
 80039a0:	bd80      	pop	{r7, pc}
 80039a2:	bf00      	nop
 80039a4:	2000037c 	.word	0x2000037c
 80039a8:	200003a8 	.word	0x200003a8
 80039ac:	20000390 	.word	0x20000390

080039b0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80039b0:	b580      	push	{r7, lr}
 80039b2:	b084      	sub	sp, #16
 80039b4:	af00      	add	r7, sp, #0
 80039b6:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d108      	bne.n	80039d4 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039c6:	4618      	mov	r0, r3
 80039c8:	f000 fb26 	bl	8004018 <vPortFree>
				vPortFree( pxTCB );
 80039cc:	6878      	ldr	r0, [r7, #4]
 80039ce:	f000 fb23 	bl	8004018 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80039d2:	e018      	b.n	8003a06 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80039da:	2b01      	cmp	r3, #1
 80039dc:	d103      	bne.n	80039e6 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80039de:	6878      	ldr	r0, [r7, #4]
 80039e0:	f000 fb1a 	bl	8004018 <vPortFree>
	}
 80039e4:	e00f      	b.n	8003a06 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80039ec:	2b02      	cmp	r3, #2
 80039ee:	d00a      	beq.n	8003a06 <prvDeleteTCB+0x56>
	__asm volatile
 80039f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039f4:	f383 8811 	msr	BASEPRI, r3
 80039f8:	f3bf 8f6f 	isb	sy
 80039fc:	f3bf 8f4f 	dsb	sy
 8003a00:	60fb      	str	r3, [r7, #12]
}
 8003a02:	bf00      	nop
 8003a04:	e7fe      	b.n	8003a04 <prvDeleteTCB+0x54>
	}
 8003a06:	bf00      	nop
 8003a08:	3710      	adds	r7, #16
 8003a0a:	46bd      	mov	sp, r7
 8003a0c:	bd80      	pop	{r7, pc}
	...

08003a10 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003a10:	b480      	push	{r7}
 8003a12:	b083      	sub	sp, #12
 8003a14:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003a16:	4b0e      	ldr	r3, [pc, #56]	; (8003a50 <prvResetNextTaskUnblockTime+0x40>)
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d101      	bne.n	8003a24 <prvResetNextTaskUnblockTime+0x14>
 8003a20:	2301      	movs	r3, #1
 8003a22:	e000      	b.n	8003a26 <prvResetNextTaskUnblockTime+0x16>
 8003a24:	2300      	movs	r3, #0
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d004      	beq.n	8003a34 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8003a2a:	4b0a      	ldr	r3, [pc, #40]	; (8003a54 <prvResetNextTaskUnblockTime+0x44>)
 8003a2c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003a30:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8003a32:	e008      	b.n	8003a46 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003a34:	4b06      	ldr	r3, [pc, #24]	; (8003a50 <prvResetNextTaskUnblockTime+0x40>)
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	68db      	ldr	r3, [r3, #12]
 8003a3a:	68db      	ldr	r3, [r3, #12]
 8003a3c:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	685b      	ldr	r3, [r3, #4]
 8003a42:	4a04      	ldr	r2, [pc, #16]	; (8003a54 <prvResetNextTaskUnblockTime+0x44>)
 8003a44:	6013      	str	r3, [r2, #0]
}
 8003a46:	bf00      	nop
 8003a48:	370c      	adds	r7, #12
 8003a4a:	46bd      	mov	sp, r7
 8003a4c:	bc80      	pop	{r7}
 8003a4e:	4770      	bx	lr
 8003a50:	20000360 	.word	0x20000360
 8003a54:	200003c8 	.word	0x200003c8

08003a58 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8003a58:	b580      	push	{r7, lr}
 8003a5a:	b084      	sub	sp, #16
 8003a5c:	af00      	add	r7, sp, #0
 8003a5e:	6078      	str	r0, [r7, #4]
 8003a60:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8003a62:	4b29      	ldr	r3, [pc, #164]	; (8003b08 <prvAddCurrentTaskToDelayedList+0xb0>)
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003a68:	4b28      	ldr	r3, [pc, #160]	; (8003b0c <prvAddCurrentTaskToDelayedList+0xb4>)
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	3304      	adds	r3, #4
 8003a6e:	4618      	mov	r0, r3
 8003a70:	f7ff fb0f 	bl	8003092 <uxListRemove>
 8003a74:	4603      	mov	r3, r0
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d10b      	bne.n	8003a92 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8003a7a:	4b24      	ldr	r3, [pc, #144]	; (8003b0c <prvAddCurrentTaskToDelayedList+0xb4>)
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a80:	2201      	movs	r2, #1
 8003a82:	fa02 f303 	lsl.w	r3, r2, r3
 8003a86:	43da      	mvns	r2, r3
 8003a88:	4b21      	ldr	r3, [pc, #132]	; (8003b10 <prvAddCurrentTaskToDelayedList+0xb8>)
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	4013      	ands	r3, r2
 8003a8e:	4a20      	ldr	r2, [pc, #128]	; (8003b10 <prvAddCurrentTaskToDelayedList+0xb8>)
 8003a90:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003a98:	d10a      	bne.n	8003ab0 <prvAddCurrentTaskToDelayedList+0x58>
 8003a9a:	683b      	ldr	r3, [r7, #0]
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d007      	beq.n	8003ab0 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003aa0:	4b1a      	ldr	r3, [pc, #104]	; (8003b0c <prvAddCurrentTaskToDelayedList+0xb4>)
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	3304      	adds	r3, #4
 8003aa6:	4619      	mov	r1, r3
 8003aa8:	481a      	ldr	r0, [pc, #104]	; (8003b14 <prvAddCurrentTaskToDelayedList+0xbc>)
 8003aaa:	f7ff fa97 	bl	8002fdc <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8003aae:	e026      	b.n	8003afe <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8003ab0:	68fa      	ldr	r2, [r7, #12]
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	4413      	add	r3, r2
 8003ab6:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003ab8:	4b14      	ldr	r3, [pc, #80]	; (8003b0c <prvAddCurrentTaskToDelayedList+0xb4>)
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	68ba      	ldr	r2, [r7, #8]
 8003abe:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8003ac0:	68ba      	ldr	r2, [r7, #8]
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	429a      	cmp	r2, r3
 8003ac6:	d209      	bcs.n	8003adc <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003ac8:	4b13      	ldr	r3, [pc, #76]	; (8003b18 <prvAddCurrentTaskToDelayedList+0xc0>)
 8003aca:	681a      	ldr	r2, [r3, #0]
 8003acc:	4b0f      	ldr	r3, [pc, #60]	; (8003b0c <prvAddCurrentTaskToDelayedList+0xb4>)
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	3304      	adds	r3, #4
 8003ad2:	4619      	mov	r1, r3
 8003ad4:	4610      	mov	r0, r2
 8003ad6:	f7ff faa4 	bl	8003022 <vListInsert>
}
 8003ada:	e010      	b.n	8003afe <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003adc:	4b0f      	ldr	r3, [pc, #60]	; (8003b1c <prvAddCurrentTaskToDelayedList+0xc4>)
 8003ade:	681a      	ldr	r2, [r3, #0]
 8003ae0:	4b0a      	ldr	r3, [pc, #40]	; (8003b0c <prvAddCurrentTaskToDelayedList+0xb4>)
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	3304      	adds	r3, #4
 8003ae6:	4619      	mov	r1, r3
 8003ae8:	4610      	mov	r0, r2
 8003aea:	f7ff fa9a 	bl	8003022 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8003aee:	4b0c      	ldr	r3, [pc, #48]	; (8003b20 <prvAddCurrentTaskToDelayedList+0xc8>)
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	68ba      	ldr	r2, [r7, #8]
 8003af4:	429a      	cmp	r2, r3
 8003af6:	d202      	bcs.n	8003afe <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8003af8:	4a09      	ldr	r2, [pc, #36]	; (8003b20 <prvAddCurrentTaskToDelayedList+0xc8>)
 8003afa:	68bb      	ldr	r3, [r7, #8]
 8003afc:	6013      	str	r3, [r2, #0]
}
 8003afe:	bf00      	nop
 8003b00:	3710      	adds	r7, #16
 8003b02:	46bd      	mov	sp, r7
 8003b04:	bd80      	pop	{r7, pc}
 8003b06:	bf00      	nop
 8003b08:	200003ac 	.word	0x200003ac
 8003b0c:	200002a8 	.word	0x200002a8
 8003b10:	200003b0 	.word	0x200003b0
 8003b14:	20000394 	.word	0x20000394
 8003b18:	20000364 	.word	0x20000364
 8003b1c:	20000360 	.word	0x20000360
 8003b20:	200003c8 	.word	0x200003c8

08003b24 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8003b24:	b480      	push	{r7}
 8003b26:	b085      	sub	sp, #20
 8003b28:	af00      	add	r7, sp, #0
 8003b2a:	60f8      	str	r0, [r7, #12]
 8003b2c:	60b9      	str	r1, [r7, #8]
 8003b2e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	3b04      	subs	r3, #4
 8003b34:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003b3c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	3b04      	subs	r3, #4
 8003b42:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8003b44:	68bb      	ldr	r3, [r7, #8]
 8003b46:	f023 0201 	bic.w	r2, r3, #1
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	3b04      	subs	r3, #4
 8003b52:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8003b54:	4a08      	ldr	r2, [pc, #32]	; (8003b78 <pxPortInitialiseStack+0x54>)
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	3b14      	subs	r3, #20
 8003b5e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8003b60:	687a      	ldr	r2, [r7, #4]
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	3b20      	subs	r3, #32
 8003b6a:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8003b6c:	68fb      	ldr	r3, [r7, #12]
}
 8003b6e:	4618      	mov	r0, r3
 8003b70:	3714      	adds	r7, #20
 8003b72:	46bd      	mov	sp, r7
 8003b74:	bc80      	pop	{r7}
 8003b76:	4770      	bx	lr
 8003b78:	08003b7d 	.word	0x08003b7d

08003b7c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8003b7c:	b480      	push	{r7}
 8003b7e:	b085      	sub	sp, #20
 8003b80:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8003b82:	2300      	movs	r3, #0
 8003b84:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8003b86:	4b12      	ldr	r3, [pc, #72]	; (8003bd0 <prvTaskExitError+0x54>)
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003b8e:	d00a      	beq.n	8003ba6 <prvTaskExitError+0x2a>
	__asm volatile
 8003b90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b94:	f383 8811 	msr	BASEPRI, r3
 8003b98:	f3bf 8f6f 	isb	sy
 8003b9c:	f3bf 8f4f 	dsb	sy
 8003ba0:	60fb      	str	r3, [r7, #12]
}
 8003ba2:	bf00      	nop
 8003ba4:	e7fe      	b.n	8003ba4 <prvTaskExitError+0x28>
	__asm volatile
 8003ba6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003baa:	f383 8811 	msr	BASEPRI, r3
 8003bae:	f3bf 8f6f 	isb	sy
 8003bb2:	f3bf 8f4f 	dsb	sy
 8003bb6:	60bb      	str	r3, [r7, #8]
}
 8003bb8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8003bba:	bf00      	nop
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d0fc      	beq.n	8003bbc <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8003bc2:	bf00      	nop
 8003bc4:	bf00      	nop
 8003bc6:	3714      	adds	r7, #20
 8003bc8:	46bd      	mov	sp, r7
 8003bca:	bc80      	pop	{r7}
 8003bcc:	4770      	bx	lr
 8003bce:	bf00      	nop
 8003bd0:	2000000c 	.word	0x2000000c
	...

08003be0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8003be0:	4b07      	ldr	r3, [pc, #28]	; (8003c00 <pxCurrentTCBConst2>)
 8003be2:	6819      	ldr	r1, [r3, #0]
 8003be4:	6808      	ldr	r0, [r1, #0]
 8003be6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8003bea:	f380 8809 	msr	PSP, r0
 8003bee:	f3bf 8f6f 	isb	sy
 8003bf2:	f04f 0000 	mov.w	r0, #0
 8003bf6:	f380 8811 	msr	BASEPRI, r0
 8003bfa:	f04e 0e0d 	orr.w	lr, lr, #13
 8003bfe:	4770      	bx	lr

08003c00 <pxCurrentTCBConst2>:
 8003c00:	200002a8 	.word	0x200002a8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8003c04:	bf00      	nop
 8003c06:	bf00      	nop

08003c08 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8003c08:	4806      	ldr	r0, [pc, #24]	; (8003c24 <prvPortStartFirstTask+0x1c>)
 8003c0a:	6800      	ldr	r0, [r0, #0]
 8003c0c:	6800      	ldr	r0, [r0, #0]
 8003c0e:	f380 8808 	msr	MSP, r0
 8003c12:	b662      	cpsie	i
 8003c14:	b661      	cpsie	f
 8003c16:	f3bf 8f4f 	dsb	sy
 8003c1a:	f3bf 8f6f 	isb	sy
 8003c1e:	df00      	svc	0
 8003c20:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8003c22:	bf00      	nop
 8003c24:	e000ed08 	.word	0xe000ed08

08003c28 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8003c28:	b580      	push	{r7, lr}
 8003c2a:	b084      	sub	sp, #16
 8003c2c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8003c2e:	4b32      	ldr	r3, [pc, #200]	; (8003cf8 <xPortStartScheduler+0xd0>)
 8003c30:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	781b      	ldrb	r3, [r3, #0]
 8003c36:	b2db      	uxtb	r3, r3
 8003c38:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	22ff      	movs	r2, #255	; 0xff
 8003c3e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	781b      	ldrb	r3, [r3, #0]
 8003c44:	b2db      	uxtb	r3, r3
 8003c46:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8003c48:	78fb      	ldrb	r3, [r7, #3]
 8003c4a:	b2db      	uxtb	r3, r3
 8003c4c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003c50:	b2da      	uxtb	r2, r3
 8003c52:	4b2a      	ldr	r3, [pc, #168]	; (8003cfc <xPortStartScheduler+0xd4>)
 8003c54:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8003c56:	4b2a      	ldr	r3, [pc, #168]	; (8003d00 <xPortStartScheduler+0xd8>)
 8003c58:	2207      	movs	r2, #7
 8003c5a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003c5c:	e009      	b.n	8003c72 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8003c5e:	4b28      	ldr	r3, [pc, #160]	; (8003d00 <xPortStartScheduler+0xd8>)
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	3b01      	subs	r3, #1
 8003c64:	4a26      	ldr	r2, [pc, #152]	; (8003d00 <xPortStartScheduler+0xd8>)
 8003c66:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8003c68:	78fb      	ldrb	r3, [r7, #3]
 8003c6a:	b2db      	uxtb	r3, r3
 8003c6c:	005b      	lsls	r3, r3, #1
 8003c6e:	b2db      	uxtb	r3, r3
 8003c70:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003c72:	78fb      	ldrb	r3, [r7, #3]
 8003c74:	b2db      	uxtb	r3, r3
 8003c76:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c7a:	2b80      	cmp	r3, #128	; 0x80
 8003c7c:	d0ef      	beq.n	8003c5e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8003c7e:	4b20      	ldr	r3, [pc, #128]	; (8003d00 <xPortStartScheduler+0xd8>)
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	f1c3 0307 	rsb	r3, r3, #7
 8003c86:	2b04      	cmp	r3, #4
 8003c88:	d00a      	beq.n	8003ca0 <xPortStartScheduler+0x78>
	__asm volatile
 8003c8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c8e:	f383 8811 	msr	BASEPRI, r3
 8003c92:	f3bf 8f6f 	isb	sy
 8003c96:	f3bf 8f4f 	dsb	sy
 8003c9a:	60bb      	str	r3, [r7, #8]
}
 8003c9c:	bf00      	nop
 8003c9e:	e7fe      	b.n	8003c9e <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8003ca0:	4b17      	ldr	r3, [pc, #92]	; (8003d00 <xPortStartScheduler+0xd8>)
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	021b      	lsls	r3, r3, #8
 8003ca6:	4a16      	ldr	r2, [pc, #88]	; (8003d00 <xPortStartScheduler+0xd8>)
 8003ca8:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8003caa:	4b15      	ldr	r3, [pc, #84]	; (8003d00 <xPortStartScheduler+0xd8>)
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003cb2:	4a13      	ldr	r2, [pc, #76]	; (8003d00 <xPortStartScheduler+0xd8>)
 8003cb4:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	b2da      	uxtb	r2, r3
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8003cbe:	4b11      	ldr	r3, [pc, #68]	; (8003d04 <xPortStartScheduler+0xdc>)
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	4a10      	ldr	r2, [pc, #64]	; (8003d04 <xPortStartScheduler+0xdc>)
 8003cc4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003cc8:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8003cca:	4b0e      	ldr	r3, [pc, #56]	; (8003d04 <xPortStartScheduler+0xdc>)
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	4a0d      	ldr	r2, [pc, #52]	; (8003d04 <xPortStartScheduler+0xdc>)
 8003cd0:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8003cd4:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8003cd6:	f000 f8b9 	bl	8003e4c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8003cda:	4b0b      	ldr	r3, [pc, #44]	; (8003d08 <xPortStartScheduler+0xe0>)
 8003cdc:	2200      	movs	r2, #0
 8003cde:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8003ce0:	f7ff ff92 	bl	8003c08 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8003ce4:	f7ff fd84 	bl	80037f0 <vTaskSwitchContext>
	prvTaskExitError();
 8003ce8:	f7ff ff48 	bl	8003b7c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8003cec:	2300      	movs	r3, #0
}
 8003cee:	4618      	mov	r0, r3
 8003cf0:	3710      	adds	r7, #16
 8003cf2:	46bd      	mov	sp, r7
 8003cf4:	bd80      	pop	{r7, pc}
 8003cf6:	bf00      	nop
 8003cf8:	e000e400 	.word	0xe000e400
 8003cfc:	200003d4 	.word	0x200003d4
 8003d00:	200003d8 	.word	0x200003d8
 8003d04:	e000ed20 	.word	0xe000ed20
 8003d08:	2000000c 	.word	0x2000000c

08003d0c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8003d0c:	b480      	push	{r7}
 8003d0e:	b083      	sub	sp, #12
 8003d10:	af00      	add	r7, sp, #0
	__asm volatile
 8003d12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d16:	f383 8811 	msr	BASEPRI, r3
 8003d1a:	f3bf 8f6f 	isb	sy
 8003d1e:	f3bf 8f4f 	dsb	sy
 8003d22:	607b      	str	r3, [r7, #4]
}
 8003d24:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8003d26:	4b0f      	ldr	r3, [pc, #60]	; (8003d64 <vPortEnterCritical+0x58>)
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	3301      	adds	r3, #1
 8003d2c:	4a0d      	ldr	r2, [pc, #52]	; (8003d64 <vPortEnterCritical+0x58>)
 8003d2e:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8003d30:	4b0c      	ldr	r3, [pc, #48]	; (8003d64 <vPortEnterCritical+0x58>)
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	2b01      	cmp	r3, #1
 8003d36:	d10f      	bne.n	8003d58 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8003d38:	4b0b      	ldr	r3, [pc, #44]	; (8003d68 <vPortEnterCritical+0x5c>)
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	b2db      	uxtb	r3, r3
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d00a      	beq.n	8003d58 <vPortEnterCritical+0x4c>
	__asm volatile
 8003d42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d46:	f383 8811 	msr	BASEPRI, r3
 8003d4a:	f3bf 8f6f 	isb	sy
 8003d4e:	f3bf 8f4f 	dsb	sy
 8003d52:	603b      	str	r3, [r7, #0]
}
 8003d54:	bf00      	nop
 8003d56:	e7fe      	b.n	8003d56 <vPortEnterCritical+0x4a>
	}
}
 8003d58:	bf00      	nop
 8003d5a:	370c      	adds	r7, #12
 8003d5c:	46bd      	mov	sp, r7
 8003d5e:	bc80      	pop	{r7}
 8003d60:	4770      	bx	lr
 8003d62:	bf00      	nop
 8003d64:	2000000c 	.word	0x2000000c
 8003d68:	e000ed04 	.word	0xe000ed04

08003d6c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8003d6c:	b480      	push	{r7}
 8003d6e:	b083      	sub	sp, #12
 8003d70:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8003d72:	4b11      	ldr	r3, [pc, #68]	; (8003db8 <vPortExitCritical+0x4c>)
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d10a      	bne.n	8003d90 <vPortExitCritical+0x24>
	__asm volatile
 8003d7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d7e:	f383 8811 	msr	BASEPRI, r3
 8003d82:	f3bf 8f6f 	isb	sy
 8003d86:	f3bf 8f4f 	dsb	sy
 8003d8a:	607b      	str	r3, [r7, #4]
}
 8003d8c:	bf00      	nop
 8003d8e:	e7fe      	b.n	8003d8e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8003d90:	4b09      	ldr	r3, [pc, #36]	; (8003db8 <vPortExitCritical+0x4c>)
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	3b01      	subs	r3, #1
 8003d96:	4a08      	ldr	r2, [pc, #32]	; (8003db8 <vPortExitCritical+0x4c>)
 8003d98:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8003d9a:	4b07      	ldr	r3, [pc, #28]	; (8003db8 <vPortExitCritical+0x4c>)
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d105      	bne.n	8003dae <vPortExitCritical+0x42>
 8003da2:	2300      	movs	r3, #0
 8003da4:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8003da6:	683b      	ldr	r3, [r7, #0]
 8003da8:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8003dac:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8003dae:	bf00      	nop
 8003db0:	370c      	adds	r7, #12
 8003db2:	46bd      	mov	sp, r7
 8003db4:	bc80      	pop	{r7}
 8003db6:	4770      	bx	lr
 8003db8:	2000000c 	.word	0x2000000c
 8003dbc:	00000000 	.word	0x00000000

08003dc0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8003dc0:	f3ef 8009 	mrs	r0, PSP
 8003dc4:	f3bf 8f6f 	isb	sy
 8003dc8:	4b0d      	ldr	r3, [pc, #52]	; (8003e00 <pxCurrentTCBConst>)
 8003dca:	681a      	ldr	r2, [r3, #0]
 8003dcc:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8003dd0:	6010      	str	r0, [r2, #0]
 8003dd2:	e92d 4008 	stmdb	sp!, {r3, lr}
 8003dd6:	f04f 0050 	mov.w	r0, #80	; 0x50
 8003dda:	f380 8811 	msr	BASEPRI, r0
 8003dde:	f7ff fd07 	bl	80037f0 <vTaskSwitchContext>
 8003de2:	f04f 0000 	mov.w	r0, #0
 8003de6:	f380 8811 	msr	BASEPRI, r0
 8003dea:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8003dee:	6819      	ldr	r1, [r3, #0]
 8003df0:	6808      	ldr	r0, [r1, #0]
 8003df2:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8003df6:	f380 8809 	msr	PSP, r0
 8003dfa:	f3bf 8f6f 	isb	sy
 8003dfe:	4770      	bx	lr

08003e00 <pxCurrentTCBConst>:
 8003e00:	200002a8 	.word	0x200002a8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8003e04:	bf00      	nop
 8003e06:	bf00      	nop

08003e08 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8003e08:	b580      	push	{r7, lr}
 8003e0a:	b082      	sub	sp, #8
 8003e0c:	af00      	add	r7, sp, #0
	__asm volatile
 8003e0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e12:	f383 8811 	msr	BASEPRI, r3
 8003e16:	f3bf 8f6f 	isb	sy
 8003e1a:	f3bf 8f4f 	dsb	sy
 8003e1e:	607b      	str	r3, [r7, #4]
}
 8003e20:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8003e22:	f7ff fc27 	bl	8003674 <xTaskIncrementTick>
 8003e26:	4603      	mov	r3, r0
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d003      	beq.n	8003e34 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8003e2c:	4b06      	ldr	r3, [pc, #24]	; (8003e48 <SysTick_Handler+0x40>)
 8003e2e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003e32:	601a      	str	r2, [r3, #0]
 8003e34:	2300      	movs	r3, #0
 8003e36:	603b      	str	r3, [r7, #0]
	__asm volatile
 8003e38:	683b      	ldr	r3, [r7, #0]
 8003e3a:	f383 8811 	msr	BASEPRI, r3
}
 8003e3e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8003e40:	bf00      	nop
 8003e42:	3708      	adds	r7, #8
 8003e44:	46bd      	mov	sp, r7
 8003e46:	bd80      	pop	{r7, pc}
 8003e48:	e000ed04 	.word	0xe000ed04

08003e4c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8003e4c:	b480      	push	{r7}
 8003e4e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8003e50:	4b0a      	ldr	r3, [pc, #40]	; (8003e7c <vPortSetupTimerInterrupt+0x30>)
 8003e52:	2200      	movs	r2, #0
 8003e54:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8003e56:	4b0a      	ldr	r3, [pc, #40]	; (8003e80 <vPortSetupTimerInterrupt+0x34>)
 8003e58:	2200      	movs	r2, #0
 8003e5a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8003e5c:	4b09      	ldr	r3, [pc, #36]	; (8003e84 <vPortSetupTimerInterrupt+0x38>)
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	4a09      	ldr	r2, [pc, #36]	; (8003e88 <vPortSetupTimerInterrupt+0x3c>)
 8003e62:	fba2 2303 	umull	r2, r3, r2, r3
 8003e66:	099b      	lsrs	r3, r3, #6
 8003e68:	4a08      	ldr	r2, [pc, #32]	; (8003e8c <vPortSetupTimerInterrupt+0x40>)
 8003e6a:	3b01      	subs	r3, #1
 8003e6c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8003e6e:	4b03      	ldr	r3, [pc, #12]	; (8003e7c <vPortSetupTimerInterrupt+0x30>)
 8003e70:	2207      	movs	r2, #7
 8003e72:	601a      	str	r2, [r3, #0]
}
 8003e74:	bf00      	nop
 8003e76:	46bd      	mov	sp, r7
 8003e78:	bc80      	pop	{r7}
 8003e7a:	4770      	bx	lr
 8003e7c:	e000e010 	.word	0xe000e010
 8003e80:	e000e018 	.word	0xe000e018
 8003e84:	20000000 	.word	0x20000000
 8003e88:	10624dd3 	.word	0x10624dd3
 8003e8c:	e000e014 	.word	0xe000e014

08003e90 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8003e90:	b580      	push	{r7, lr}
 8003e92:	b08a      	sub	sp, #40	; 0x28
 8003e94:	af00      	add	r7, sp, #0
 8003e96:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8003e98:	2300      	movs	r3, #0
 8003e9a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8003e9c:	f7ff fb40 	bl	8003520 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8003ea0:	4b58      	ldr	r3, [pc, #352]	; (8004004 <pvPortMalloc+0x174>)
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d101      	bne.n	8003eac <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8003ea8:	f000 f910 	bl	80040cc <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8003eac:	4b56      	ldr	r3, [pc, #344]	; (8004008 <pvPortMalloc+0x178>)
 8003eae:	681a      	ldr	r2, [r3, #0]
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	4013      	ands	r3, r2
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	f040 808e 	bne.w	8003fd6 <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d01d      	beq.n	8003efc <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8003ec0:	2208      	movs	r2, #8
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	4413      	add	r3, r2
 8003ec6:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	f003 0307 	and.w	r3, r3, #7
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d014      	beq.n	8003efc <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	f023 0307 	bic.w	r3, r3, #7
 8003ed8:	3308      	adds	r3, #8
 8003eda:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	f003 0307 	and.w	r3, r3, #7
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d00a      	beq.n	8003efc <pvPortMalloc+0x6c>
	__asm volatile
 8003ee6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003eea:	f383 8811 	msr	BASEPRI, r3
 8003eee:	f3bf 8f6f 	isb	sy
 8003ef2:	f3bf 8f4f 	dsb	sy
 8003ef6:	617b      	str	r3, [r7, #20]
}
 8003ef8:	bf00      	nop
 8003efa:	e7fe      	b.n	8003efa <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d069      	beq.n	8003fd6 <pvPortMalloc+0x146>
 8003f02:	4b42      	ldr	r3, [pc, #264]	; (800400c <pvPortMalloc+0x17c>)
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	687a      	ldr	r2, [r7, #4]
 8003f08:	429a      	cmp	r2, r3
 8003f0a:	d864      	bhi.n	8003fd6 <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8003f0c:	4b40      	ldr	r3, [pc, #256]	; (8004010 <pvPortMalloc+0x180>)
 8003f0e:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8003f10:	4b3f      	ldr	r3, [pc, #252]	; (8004010 <pvPortMalloc+0x180>)
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003f16:	e004      	b.n	8003f22 <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8003f18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f1a:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8003f1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003f22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f24:	685b      	ldr	r3, [r3, #4]
 8003f26:	687a      	ldr	r2, [r7, #4]
 8003f28:	429a      	cmp	r2, r3
 8003f2a:	d903      	bls.n	8003f34 <pvPortMalloc+0xa4>
 8003f2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d1f1      	bne.n	8003f18 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8003f34:	4b33      	ldr	r3, [pc, #204]	; (8004004 <pvPortMalloc+0x174>)
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f3a:	429a      	cmp	r2, r3
 8003f3c:	d04b      	beq.n	8003fd6 <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8003f3e:	6a3b      	ldr	r3, [r7, #32]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	2208      	movs	r2, #8
 8003f44:	4413      	add	r3, r2
 8003f46:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8003f48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f4a:	681a      	ldr	r2, [r3, #0]
 8003f4c:	6a3b      	ldr	r3, [r7, #32]
 8003f4e:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8003f50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f52:	685a      	ldr	r2, [r3, #4]
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	1ad2      	subs	r2, r2, r3
 8003f58:	2308      	movs	r3, #8
 8003f5a:	005b      	lsls	r3, r3, #1
 8003f5c:	429a      	cmp	r2, r3
 8003f5e:	d91f      	bls.n	8003fa0 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8003f60:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	4413      	add	r3, r2
 8003f66:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003f68:	69bb      	ldr	r3, [r7, #24]
 8003f6a:	f003 0307 	and.w	r3, r3, #7
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d00a      	beq.n	8003f88 <pvPortMalloc+0xf8>
	__asm volatile
 8003f72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f76:	f383 8811 	msr	BASEPRI, r3
 8003f7a:	f3bf 8f6f 	isb	sy
 8003f7e:	f3bf 8f4f 	dsb	sy
 8003f82:	613b      	str	r3, [r7, #16]
}
 8003f84:	bf00      	nop
 8003f86:	e7fe      	b.n	8003f86 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8003f88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f8a:	685a      	ldr	r2, [r3, #4]
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	1ad2      	subs	r2, r2, r3
 8003f90:	69bb      	ldr	r3, [r7, #24]
 8003f92:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8003f94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f96:	687a      	ldr	r2, [r7, #4]
 8003f98:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8003f9a:	69b8      	ldr	r0, [r7, #24]
 8003f9c:	f000 f8f8 	bl	8004190 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8003fa0:	4b1a      	ldr	r3, [pc, #104]	; (800400c <pvPortMalloc+0x17c>)
 8003fa2:	681a      	ldr	r2, [r3, #0]
 8003fa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fa6:	685b      	ldr	r3, [r3, #4]
 8003fa8:	1ad3      	subs	r3, r2, r3
 8003faa:	4a18      	ldr	r2, [pc, #96]	; (800400c <pvPortMalloc+0x17c>)
 8003fac:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8003fae:	4b17      	ldr	r3, [pc, #92]	; (800400c <pvPortMalloc+0x17c>)
 8003fb0:	681a      	ldr	r2, [r3, #0]
 8003fb2:	4b18      	ldr	r3, [pc, #96]	; (8004014 <pvPortMalloc+0x184>)
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	429a      	cmp	r2, r3
 8003fb8:	d203      	bcs.n	8003fc2 <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8003fba:	4b14      	ldr	r3, [pc, #80]	; (800400c <pvPortMalloc+0x17c>)
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	4a15      	ldr	r2, [pc, #84]	; (8004014 <pvPortMalloc+0x184>)
 8003fc0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8003fc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fc4:	685a      	ldr	r2, [r3, #4]
 8003fc6:	4b10      	ldr	r3, [pc, #64]	; (8004008 <pvPortMalloc+0x178>)
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	431a      	orrs	r2, r3
 8003fcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fce:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8003fd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fd2:	2200      	movs	r2, #0
 8003fd4:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8003fd6:	f7ff fab1 	bl	800353c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8003fda:	69fb      	ldr	r3, [r7, #28]
 8003fdc:	f003 0307 	and.w	r3, r3, #7
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d00a      	beq.n	8003ffa <pvPortMalloc+0x16a>
	__asm volatile
 8003fe4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fe8:	f383 8811 	msr	BASEPRI, r3
 8003fec:	f3bf 8f6f 	isb	sy
 8003ff0:	f3bf 8f4f 	dsb	sy
 8003ff4:	60fb      	str	r3, [r7, #12]
}
 8003ff6:	bf00      	nop
 8003ff8:	e7fe      	b.n	8003ff8 <pvPortMalloc+0x168>
	return pvReturn;
 8003ffa:	69fb      	ldr	r3, [r7, #28]
}
 8003ffc:	4618      	mov	r0, r3
 8003ffe:	3728      	adds	r7, #40	; 0x28
 8004000:	46bd      	mov	sp, r7
 8004002:	bd80      	pop	{r7, pc}
 8004004:	20000fe4 	.word	0x20000fe4
 8004008:	20000ff0 	.word	0x20000ff0
 800400c:	20000fe8 	.word	0x20000fe8
 8004010:	20000fdc 	.word	0x20000fdc
 8004014:	20000fec 	.word	0x20000fec

08004018 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8004018:	b580      	push	{r7, lr}
 800401a:	b086      	sub	sp, #24
 800401c:	af00      	add	r7, sp, #0
 800401e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	2b00      	cmp	r3, #0
 8004028:	d048      	beq.n	80040bc <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800402a:	2308      	movs	r3, #8
 800402c:	425b      	negs	r3, r3
 800402e:	697a      	ldr	r2, [r7, #20]
 8004030:	4413      	add	r3, r2
 8004032:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8004034:	697b      	ldr	r3, [r7, #20]
 8004036:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8004038:	693b      	ldr	r3, [r7, #16]
 800403a:	685a      	ldr	r2, [r3, #4]
 800403c:	4b21      	ldr	r3, [pc, #132]	; (80040c4 <vPortFree+0xac>)
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	4013      	ands	r3, r2
 8004042:	2b00      	cmp	r3, #0
 8004044:	d10a      	bne.n	800405c <vPortFree+0x44>
	__asm volatile
 8004046:	f04f 0350 	mov.w	r3, #80	; 0x50
 800404a:	f383 8811 	msr	BASEPRI, r3
 800404e:	f3bf 8f6f 	isb	sy
 8004052:	f3bf 8f4f 	dsb	sy
 8004056:	60fb      	str	r3, [r7, #12]
}
 8004058:	bf00      	nop
 800405a:	e7fe      	b.n	800405a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800405c:	693b      	ldr	r3, [r7, #16]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	2b00      	cmp	r3, #0
 8004062:	d00a      	beq.n	800407a <vPortFree+0x62>
	__asm volatile
 8004064:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004068:	f383 8811 	msr	BASEPRI, r3
 800406c:	f3bf 8f6f 	isb	sy
 8004070:	f3bf 8f4f 	dsb	sy
 8004074:	60bb      	str	r3, [r7, #8]
}
 8004076:	bf00      	nop
 8004078:	e7fe      	b.n	8004078 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800407a:	693b      	ldr	r3, [r7, #16]
 800407c:	685a      	ldr	r2, [r3, #4]
 800407e:	4b11      	ldr	r3, [pc, #68]	; (80040c4 <vPortFree+0xac>)
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	4013      	ands	r3, r2
 8004084:	2b00      	cmp	r3, #0
 8004086:	d019      	beq.n	80040bc <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8004088:	693b      	ldr	r3, [r7, #16]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	2b00      	cmp	r3, #0
 800408e:	d115      	bne.n	80040bc <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8004090:	693b      	ldr	r3, [r7, #16]
 8004092:	685a      	ldr	r2, [r3, #4]
 8004094:	4b0b      	ldr	r3, [pc, #44]	; (80040c4 <vPortFree+0xac>)
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	43db      	mvns	r3, r3
 800409a:	401a      	ands	r2, r3
 800409c:	693b      	ldr	r3, [r7, #16]
 800409e:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80040a0:	f7ff fa3e 	bl	8003520 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80040a4:	693b      	ldr	r3, [r7, #16]
 80040a6:	685a      	ldr	r2, [r3, #4]
 80040a8:	4b07      	ldr	r3, [pc, #28]	; (80040c8 <vPortFree+0xb0>)
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	4413      	add	r3, r2
 80040ae:	4a06      	ldr	r2, [pc, #24]	; (80040c8 <vPortFree+0xb0>)
 80040b0:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80040b2:	6938      	ldr	r0, [r7, #16]
 80040b4:	f000 f86c 	bl	8004190 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80040b8:	f7ff fa40 	bl	800353c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80040bc:	bf00      	nop
 80040be:	3718      	adds	r7, #24
 80040c0:	46bd      	mov	sp, r7
 80040c2:	bd80      	pop	{r7, pc}
 80040c4:	20000ff0 	.word	0x20000ff0
 80040c8:	20000fe8 	.word	0x20000fe8

080040cc <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80040cc:	b480      	push	{r7}
 80040ce:	b085      	sub	sp, #20
 80040d0:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80040d2:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80040d6:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80040d8:	4b27      	ldr	r3, [pc, #156]	; (8004178 <prvHeapInit+0xac>)
 80040da:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	f003 0307 	and.w	r3, r3, #7
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d00c      	beq.n	8004100 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	3307      	adds	r3, #7
 80040ea:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	f023 0307 	bic.w	r3, r3, #7
 80040f2:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80040f4:	68ba      	ldr	r2, [r7, #8]
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	1ad3      	subs	r3, r2, r3
 80040fa:	4a1f      	ldr	r2, [pc, #124]	; (8004178 <prvHeapInit+0xac>)
 80040fc:	4413      	add	r3, r2
 80040fe:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8004104:	4a1d      	ldr	r2, [pc, #116]	; (800417c <prvHeapInit+0xb0>)
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800410a:	4b1c      	ldr	r3, [pc, #112]	; (800417c <prvHeapInit+0xb0>)
 800410c:	2200      	movs	r2, #0
 800410e:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	68ba      	ldr	r2, [r7, #8]
 8004114:	4413      	add	r3, r2
 8004116:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8004118:	2208      	movs	r2, #8
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	1a9b      	subs	r3, r3, r2
 800411e:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	f023 0307 	bic.w	r3, r3, #7
 8004126:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	4a15      	ldr	r2, [pc, #84]	; (8004180 <prvHeapInit+0xb4>)
 800412c:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800412e:	4b14      	ldr	r3, [pc, #80]	; (8004180 <prvHeapInit+0xb4>)
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	2200      	movs	r2, #0
 8004134:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8004136:	4b12      	ldr	r3, [pc, #72]	; (8004180 <prvHeapInit+0xb4>)
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	2200      	movs	r2, #0
 800413c:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8004142:	683b      	ldr	r3, [r7, #0]
 8004144:	68fa      	ldr	r2, [r7, #12]
 8004146:	1ad2      	subs	r2, r2, r3
 8004148:	683b      	ldr	r3, [r7, #0]
 800414a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800414c:	4b0c      	ldr	r3, [pc, #48]	; (8004180 <prvHeapInit+0xb4>)
 800414e:	681a      	ldr	r2, [r3, #0]
 8004150:	683b      	ldr	r3, [r7, #0]
 8004152:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004154:	683b      	ldr	r3, [r7, #0]
 8004156:	685b      	ldr	r3, [r3, #4]
 8004158:	4a0a      	ldr	r2, [pc, #40]	; (8004184 <prvHeapInit+0xb8>)
 800415a:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800415c:	683b      	ldr	r3, [r7, #0]
 800415e:	685b      	ldr	r3, [r3, #4]
 8004160:	4a09      	ldr	r2, [pc, #36]	; (8004188 <prvHeapInit+0xbc>)
 8004162:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8004164:	4b09      	ldr	r3, [pc, #36]	; (800418c <prvHeapInit+0xc0>)
 8004166:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800416a:	601a      	str	r2, [r3, #0]
}
 800416c:	bf00      	nop
 800416e:	3714      	adds	r7, #20
 8004170:	46bd      	mov	sp, r7
 8004172:	bc80      	pop	{r7}
 8004174:	4770      	bx	lr
 8004176:	bf00      	nop
 8004178:	200003dc 	.word	0x200003dc
 800417c:	20000fdc 	.word	0x20000fdc
 8004180:	20000fe4 	.word	0x20000fe4
 8004184:	20000fec 	.word	0x20000fec
 8004188:	20000fe8 	.word	0x20000fe8
 800418c:	20000ff0 	.word	0x20000ff0

08004190 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8004190:	b480      	push	{r7}
 8004192:	b085      	sub	sp, #20
 8004194:	af00      	add	r7, sp, #0
 8004196:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004198:	4b27      	ldr	r3, [pc, #156]	; (8004238 <prvInsertBlockIntoFreeList+0xa8>)
 800419a:	60fb      	str	r3, [r7, #12]
 800419c:	e002      	b.n	80041a4 <prvInsertBlockIntoFreeList+0x14>
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	60fb      	str	r3, [r7, #12]
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	687a      	ldr	r2, [r7, #4]
 80041aa:	429a      	cmp	r2, r3
 80041ac:	d8f7      	bhi.n	800419e <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	685b      	ldr	r3, [r3, #4]
 80041b6:	68ba      	ldr	r2, [r7, #8]
 80041b8:	4413      	add	r3, r2
 80041ba:	687a      	ldr	r2, [r7, #4]
 80041bc:	429a      	cmp	r2, r3
 80041be:	d108      	bne.n	80041d2 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	685a      	ldr	r2, [r3, #4]
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	685b      	ldr	r3, [r3, #4]
 80041c8:	441a      	add	r2, r3
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	685b      	ldr	r3, [r3, #4]
 80041da:	68ba      	ldr	r2, [r7, #8]
 80041dc:	441a      	add	r2, r3
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	429a      	cmp	r2, r3
 80041e4:	d118      	bne.n	8004218 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	681a      	ldr	r2, [r3, #0]
 80041ea:	4b14      	ldr	r3, [pc, #80]	; (800423c <prvInsertBlockIntoFreeList+0xac>)
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	429a      	cmp	r2, r3
 80041f0:	d00d      	beq.n	800420e <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	685a      	ldr	r2, [r3, #4]
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	685b      	ldr	r3, [r3, #4]
 80041fc:	441a      	add	r2, r3
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	681a      	ldr	r2, [r3, #0]
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	601a      	str	r2, [r3, #0]
 800420c:	e008      	b.n	8004220 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800420e:	4b0b      	ldr	r3, [pc, #44]	; (800423c <prvInsertBlockIntoFreeList+0xac>)
 8004210:	681a      	ldr	r2, [r3, #0]
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	601a      	str	r2, [r3, #0]
 8004216:	e003      	b.n	8004220 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	681a      	ldr	r2, [r3, #0]
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8004220:	68fa      	ldr	r2, [r7, #12]
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	429a      	cmp	r2, r3
 8004226:	d002      	beq.n	800422e <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	687a      	ldr	r2, [r7, #4]
 800422c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800422e:	bf00      	nop
 8004230:	3714      	adds	r7, #20
 8004232:	46bd      	mov	sp, r7
 8004234:	bc80      	pop	{r7}
 8004236:	4770      	bx	lr
 8004238:	20000fdc 	.word	0x20000fdc
 800423c:	20000fe4 	.word	0x20000fe4

08004240 <__libc_init_array>:
 8004240:	b570      	push	{r4, r5, r6, lr}
 8004242:	2600      	movs	r6, #0
 8004244:	4d0c      	ldr	r5, [pc, #48]	; (8004278 <__libc_init_array+0x38>)
 8004246:	4c0d      	ldr	r4, [pc, #52]	; (800427c <__libc_init_array+0x3c>)
 8004248:	1b64      	subs	r4, r4, r5
 800424a:	10a4      	asrs	r4, r4, #2
 800424c:	42a6      	cmp	r6, r4
 800424e:	d109      	bne.n	8004264 <__libc_init_array+0x24>
 8004250:	f000 f830 	bl	80042b4 <_init>
 8004254:	2600      	movs	r6, #0
 8004256:	4d0a      	ldr	r5, [pc, #40]	; (8004280 <__libc_init_array+0x40>)
 8004258:	4c0a      	ldr	r4, [pc, #40]	; (8004284 <__libc_init_array+0x44>)
 800425a:	1b64      	subs	r4, r4, r5
 800425c:	10a4      	asrs	r4, r4, #2
 800425e:	42a6      	cmp	r6, r4
 8004260:	d105      	bne.n	800426e <__libc_init_array+0x2e>
 8004262:	bd70      	pop	{r4, r5, r6, pc}
 8004264:	f855 3b04 	ldr.w	r3, [r5], #4
 8004268:	4798      	blx	r3
 800426a:	3601      	adds	r6, #1
 800426c:	e7ee      	b.n	800424c <__libc_init_array+0xc>
 800426e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004272:	4798      	blx	r3
 8004274:	3601      	adds	r6, #1
 8004276:	e7f2      	b.n	800425e <__libc_init_array+0x1e>
 8004278:	08004324 	.word	0x08004324
 800427c:	08004324 	.word	0x08004324
 8004280:	08004324 	.word	0x08004324
 8004284:	08004328 	.word	0x08004328

08004288 <memcpy>:
 8004288:	440a      	add	r2, r1
 800428a:	4291      	cmp	r1, r2
 800428c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8004290:	d100      	bne.n	8004294 <memcpy+0xc>
 8004292:	4770      	bx	lr
 8004294:	b510      	push	{r4, lr}
 8004296:	f811 4b01 	ldrb.w	r4, [r1], #1
 800429a:	4291      	cmp	r1, r2
 800429c:	f803 4f01 	strb.w	r4, [r3, #1]!
 80042a0:	d1f9      	bne.n	8004296 <memcpy+0xe>
 80042a2:	bd10      	pop	{r4, pc}

080042a4 <memset>:
 80042a4:	4603      	mov	r3, r0
 80042a6:	4402      	add	r2, r0
 80042a8:	4293      	cmp	r3, r2
 80042aa:	d100      	bne.n	80042ae <memset+0xa>
 80042ac:	4770      	bx	lr
 80042ae:	f803 1b01 	strb.w	r1, [r3], #1
 80042b2:	e7f9      	b.n	80042a8 <memset+0x4>

080042b4 <_init>:
 80042b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80042b6:	bf00      	nop
 80042b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80042ba:	bc08      	pop	{r3}
 80042bc:	469e      	mov	lr, r3
 80042be:	4770      	bx	lr

080042c0 <_fini>:
 80042c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80042c2:	bf00      	nop
 80042c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80042c6:	bc08      	pop	{r3}
 80042c8:	469e      	mov	lr, r3
 80042ca:	4770      	bx	lr
